
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30 (git sha1 f7a8284c7b0, clang 14.0.3 -fPIC -Os)


-- Executing script file `top.ys' --

1. Executing RTLIL frontend.
Input filename: top.il

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \pin_clk_if_0
Used module:     \pin_port_b_7__oe
Used module:     \pin_port_b_7__io
Used module:     \pin_port_b_6__oe
Used module:     \pin_port_b_6__io
Used module:     \pin_port_b_5__oe
Used module:     \pin_port_b_5__io
Used module:     \pin_port_b_4__oe
Used module:     \pin_port_b_4__io
Used module:     \pin_port_b_3__oe
Used module:     \pin_port_b_3__io
Used module:     \pin_port_b_2__oe
Used module:     \pin_port_b_2__io
Used module:     \pin_port_b_1__oe
Used module:     \pin_port_b_1__io
Used module:     \pin_port_b_0__oe
Used module:     \pin_port_b_0__io
Used module:     \pin_port_a_7__oe
Used module:     \pin_port_a_7__io
Used module:     \pin_port_a_6__oe
Used module:     \pin_port_a_6__io
Used module:     \pin_port_a_5__oe
Used module:     \pin_port_a_5__io
Used module:     \pin_port_a_4__oe
Used module:     \pin_port_a_4__io
Used module:     \pin_port_a_3__oe
Used module:     \pin_port_a_3__io
Used module:     \pin_port_a_2__oe
Used module:     \pin_port_a_2__io
Used module:     \pin_port_a_1__oe
Used module:     \pin_port_a_1__io
Used module:     \pin_port_a_0__oe
Used module:     \pin_port_a_0__io
Used module:     \pin_fx2_0__fd
Used module:     \pin_fx2_0__flag
Used module:     \pin_fx2_0__fifoadr
Used module:     \pin_fx2_0__pktend
Used module:     \pin_fx2_0__slwr
Used module:     \pin_fx2_0__slrd
Used module:     \pin_fx2_0__sloe
Used module:     \pin_i2c_0__sda
Used module:     \pin_i2c_0__scl
Used module:     \pin_unused_0
Used module:     \cd_sync
Used module:     \multiplexer
Used module:         \U$$0$5
Used module:             \U$$2
Used module:                 \lfsr
Used module:             \U$$1$7
Used module:             \U$$0$6
Used module:     \fx2_crossbar
Used module:         \fsm$4
Used module:         \out_fifo_0
Used module:             \skid
Used module:             \inner$2
Used module:                 \unbuffered$3
Used module:         \in_fifo_0
Used module:             \inner
Used module:                 \unbuffered
Used module:         \bus$1
Used module:     \registers
Used module:     \i2c_target
Used module:         \fsm
Used module:         \bus
Used module:             \U$$1
Used module:             \U$$0

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \pin_clk_if_0
Used module:     \pin_port_b_7__oe
Used module:     \pin_port_b_7__io
Used module:     \pin_port_b_6__oe
Used module:     \pin_port_b_6__io
Used module:     \pin_port_b_5__oe
Used module:     \pin_port_b_5__io
Used module:     \pin_port_b_4__oe
Used module:     \pin_port_b_4__io
Used module:     \pin_port_b_3__oe
Used module:     \pin_port_b_3__io
Used module:     \pin_port_b_2__oe
Used module:     \pin_port_b_2__io
Used module:     \pin_port_b_1__oe
Used module:     \pin_port_b_1__io
Used module:     \pin_port_b_0__oe
Used module:     \pin_port_b_0__io
Used module:     \pin_port_a_7__oe
Used module:     \pin_port_a_7__io
Used module:     \pin_port_a_6__oe
Used module:     \pin_port_a_6__io
Used module:     \pin_port_a_5__oe
Used module:     \pin_port_a_5__io
Used module:     \pin_port_a_4__oe
Used module:     \pin_port_a_4__io
Used module:     \pin_port_a_3__oe
Used module:     \pin_port_a_3__io
Used module:     \pin_port_a_2__oe
Used module:     \pin_port_a_2__io
Used module:     \pin_port_a_1__oe
Used module:     \pin_port_a_1__io
Used module:     \pin_port_a_0__oe
Used module:     \pin_port_a_0__io
Used module:     \pin_fx2_0__fd
Used module:     \pin_fx2_0__flag
Used module:     \pin_fx2_0__fifoadr
Used module:     \pin_fx2_0__pktend
Used module:     \pin_fx2_0__slwr
Used module:     \pin_fx2_0__slrd
Used module:     \pin_fx2_0__sloe
Used module:     \pin_i2c_0__sda
Used module:     \pin_i2c_0__scl
Used module:     \pin_unused_0
Used module:     \cd_sync
Used module:     \multiplexer
Used module:         \U$$0$5
Used module:             \U$$2
Used module:                 \lfsr
Used module:             \U$$1$7
Used module:             \U$$0$6
Used module:     \fx2_crossbar
Used module:         \fsm$4
Used module:         \out_fifo_0
Used module:             \skid
Used module:             \inner$2
Used module:                 \unbuffered$3
Used module:         \in_fifo_0
Used module:             \inner
Used module:                 \unbuffered
Used module:         \bus$1
Used module:     \registers
Used module:     \i2c_target
Used module:         \fsm
Used module:         \bus
Used module:             \U$$1
Used module:             \U$$0
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $group_2 in module cd_sync.
Marked 2 switch rules as full_case in process $group_8 in module U$$2.
Marked 1 switch rules as full_case in process $group_7 in module U$$2.
Marked 1 switch rules as full_case in process $group_4 in module U$$2.
Marked 1 switch rules as full_case in process $group_3 in module U$$2.
Marked 1 switch rules as full_case in process $group_1 in module U$$2.
Marked 2 switch rules as full_case in process $group_9 in module fx2_crossbar.
Marked 1 switch rules as full_case in process $group_6 in module fx2_crossbar.
Marked 1 switch rules as full_case in process $group_4 in module fx2_crossbar.
Marked 1 switch rules as full_case in process $group_2 in module fx2_crossbar.
Marked 1 switch rules as full_case in process $group_1 in module fx2_crossbar.
Marked 2 switch rules as full_case in process $group_9 in module fsm$4.
Marked 2 switch rules as full_case in process $group_8 in module fsm$4.
Marked 1 switch rules as full_case in process $group_7 in module fsm$4.
Marked 1 switch rules as full_case in process $group_6 in module fsm$4.
Marked 1 switch rules as full_case in process $group_5 in module fsm$4.
Marked 2 switch rules as full_case in process $group_4 in module fsm$4.
Marked 2 switch rules as full_case in process $group_3 in module fsm$4.
Marked 1 switch rules as full_case in process $group_2 in module fsm$4.
Marked 1 switch rules as full_case in process $group_1 in module fsm$4.
Marked 8 switch rules as full_case in process $group_0 in module fsm$4.
Marked 1 switch rules as full_case in process $group_5 in module out_fifo_0.
Marked 1 switch rules as full_case in process $group_4 in module out_fifo_0.
Marked 1 switch rules as full_case in process $group_3 in module out_fifo_0.
Marked 2 switch rules as full_case in process $group_5 in module registers.
Marked 2 switch rules as full_case in process $group_4 in module registers.
Marked 1 switch rules as full_case in process $group_18 in module fsm.
Marked 1 switch rules as full_case in process $group_17 in module fsm.
Marked 1 switch rules as full_case in process $group_11 in module fsm.
Marked 1 switch rules as full_case in process $group_10 in module fsm.
Marked 1 switch rules as full_case in process $group_9 in module fsm.
Marked 4 switch rules as full_case in process $group_3 in module fsm.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 136 redundant assignments.
Promoted 134 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:406$176'.

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 2 switches.
<suppressed ~292 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\top.$group_16'.
Creating decoders for process `\top.$group_15'.
Creating decoders for process `\top.$group_14'.
Creating decoders for process `\top.$group_13'.
Creating decoders for process `\top.$group_12'.
Creating decoders for process `\top.$group_11'.
Creating decoders for process `\top.$group_10'.
Creating decoders for process `\top.$group_9'.
Creating decoders for process `\top.$group_8'.
Creating decoders for process `\top.$group_7'.
Creating decoders for process `\top.$group_6'.
Creating decoders for process `\top.$group_5'.
Creating decoders for process `\top.$group_4'.
Creating decoders for process `\top.$group_3'.
Creating decoders for process `\top.$group_2'.
Creating decoders for process `\top.$group_1'.
Creating decoders for process `\top.$group_0'.
Creating decoders for process `\cd_sync.$group_4'.
Creating decoders for process `\cd_sync.$group_3'.
Creating decoders for process `\cd_sync.$group_2'.
     1/1: \timer$next
Creating decoders for process `\cd_sync.$group_1'.
     1/1: \ready$next
Creating decoders for process `\cd_sync.$group_0'.
Creating decoders for process `\U$$2.$group_8'.
     1/1: \flush
Creating decoders for process `\U$$2.$group_7'.
     1/1: \r_en
Creating decoders for process `\U$$2.$group_6'.
     1/1: $signal$2$next
Creating decoders for process `\U$$2.$group_5'.
     1/1: \lfsr_lfsr_en
Creating decoders for process `\U$$2.$group_4'.
     1/1: \w_en
Creating decoders for process `\U$$2.$group_3'.
     1/1: \w_data
Creating decoders for process `\U$$2.$group_2'.
     1/1: \fsm_state$next
Creating decoders for process `\U$$2.$group_1'.
     1/1: $signal$3$next
Creating decoders for process `\U$$2.$group_0'.
Creating decoders for process `\lfsr.$group_0'.
     1/1: \value$next
Creating decoders for process `\U$$1$7.$group_1'.
Creating decoders for process `\U$$1$7.$group_0'.
Creating decoders for process `\U$$0$6.$group_1'.
Creating decoders for process `\U$$0$6.$group_0'.
Creating decoders for process `\fx2_crossbar.$group_9'.
     1/2: \w_en$18
     2/2: \out_fifo_0_w_en
Creating decoders for process `\fx2_crossbar.$group_8'.
     1/1: \bus_nrdy_i
Creating decoders for process `\fx2_crossbar.$group_6'.
     1/2: \flushed
     2/2: \in_fifo_0_flushed
Creating decoders for process `\fx2_crossbar.$group_4'.
     1/2: \r_en$13
     2/2: \in_fifo_0_r_en
Creating decoders for process `\fx2_crossbar.$group_2'.
     1/2: \w_data$12
     2/2: \out_fifo_0_w_data
Creating decoders for process `\fx2_crossbar.$group_1'.
     1/1: \bus_o
Creating decoders for process `\fx2_crossbar.$group_0'.
Creating decoders for process `\fsm$4.$group_13'.
     1/1: \addr$next
Creating decoders for process `\fsm$4.$group_12'.
     1/1: \oe$next
Creating decoders for process `\fsm$4.$group_11'.
     1/1: \sloe$next
Creating decoders for process `\fsm$4.$group_10'.
     1/1: \state$next
Creating decoders for process `\fsm$4.$group_9'.
     1/1: \addr_fsm_next_ce
Creating decoders for process `\fsm$4.$group_8'.
     1/1: \addr_fsm_next
Creating decoders for process `\fsm$4.$group_7'.
     1/1: \slrd
Creating decoders for process `\fsm$4.$group_6'.
     1/1: \pend
Creating decoders for process `\fsm$4.$group_5'.
     1/1: \slwr
Creating decoders for process `\fsm$4.$group_4'.
     1/1: \sloe_fsm_next_ce
Creating decoders for process `\fsm$4.$group_3'.
     1/1: \sloe_fsm_next
Creating decoders for process `\fsm$4.$group_2'.
     1/1: \oe_fsm_next_ce
Creating decoders for process `\fsm$4.$group_1'.
     1/1: \oe_fsm_next
Creating decoders for process `\fsm$4.$group_0'.
     1/1: \next_state
Creating decoders for process `\out_fifo_0.$group_6'.
Creating decoders for process `\out_fifo_0.$group_5'.
     1/1: \skid_w_en
Creating decoders for process `\out_fifo_0.$group_4'.
     1/1: \skid_w_data
Creating decoders for process `\out_fifo_0.$group_3'.
     1/1: \w_rdy$9
Creating decoders for process `\out_fifo_0.$group_2'.
     1/1: \skid_r_en
Creating decoders for process `\out_fifo_0.$group_1'.
     1/1: \inner_w_en
Creating decoders for process `\out_fifo_0.$group_0'.
     1/1: \inner_w_data
Creating decoders for process `\skid.$group_11'.
     1/1: \level$next
Creating decoders for process `\skid.$group_10'.
     1/1: \consume$next
Creating decoders for process `\skid.$group_9'.
Creating decoders for process `\skid.$group_8'.
Creating decoders for process `\skid.$group_7'.
     1/1: \produce$next
Creating decoders for process `\skid.$group_6'.
Creating decoders for process `\skid.$group_5'.
Creating decoders for process `\skid.$group_4'.
Creating decoders for process `\skid.$group_3'.
Creating decoders for process `\skid.$group_2'.
Creating decoders for process `\skid.$group_1'.
Creating decoders for process `\skid.$group_0'.
Creating decoders for process `\inner$2.$group_8'.
Creating decoders for process `\inner$2.$group_7'.
Creating decoders for process `\inner$2.$group_6'.
Creating decoders for process `\inner$2.$group_5'.
     1/1: \r_rdy$next
Creating decoders for process `\inner$2.$group_4'.
Creating decoders for process `\inner$2.$group_3'.
Creating decoders for process `\inner$2.$group_2'.
Creating decoders for process `\inner$2.$group_1'.
Creating decoders for process `\inner$2.$group_0'.
Creating decoders for process `\unbuffered$3.$group_12'.
     1/1: \level$next
Creating decoders for process `\unbuffered$3.$group_11'.
     1/1: \consume$next
Creating decoders for process `\unbuffered$3.$group_10'.
Creating decoders for process `\unbuffered$3.$group_9'.
Creating decoders for process `\unbuffered$3.$group_8'.
Creating decoders for process `\unbuffered$3.$group_7'.
     1/1: \produce$next
Creating decoders for process `\unbuffered$3.$group_6'.
Creating decoders for process `\unbuffered$3.$group_5'.
Creating decoders for process `\unbuffered$3.$group_4'.
Creating decoders for process `\unbuffered$3.$group_3'.
Creating decoders for process `\unbuffered$3.$group_2'.
Creating decoders for process `\unbuffered$3.$group_1'.
Creating decoders for process `\unbuffered$3.$group_0'.
Creating decoders for process `\in_fifo_0.$group_4'.
Creating decoders for process `\in_fifo_0.$group_3'.
Creating decoders for process `\in_fifo_0.$group_2'.
Creating decoders for process `\in_fifo_0.$group_1'.
     1/1: \_pending$next
Creating decoders for process `\in_fifo_0.$group_0'.
     1/1: \queued$next
Creating decoders for process `\inner.$group_8'.
Creating decoders for process `\inner.$group_7'.
Creating decoders for process `\inner.$group_6'.
Creating decoders for process `\inner.$group_5'.
     1/1: \r_rdy$next
Creating decoders for process `\inner.$group_4'.
Creating decoders for process `\inner.$group_3'.
Creating decoders for process `\inner.$group_2'.
Creating decoders for process `\inner.$group_1'.
Creating decoders for process `\inner.$group_0'.
Creating decoders for process `\unbuffered.$group_12'.
     1/1: \level$next
Creating decoders for process `\unbuffered.$group_11'.
     1/1: \consume$next
Creating decoders for process `\unbuffered.$group_10'.
Creating decoders for process `\unbuffered.$group_9'.
Creating decoders for process `\unbuffered.$group_8'.
Creating decoders for process `\unbuffered.$group_7'.
     1/1: \produce$next
Creating decoders for process `\unbuffered.$group_6'.
Creating decoders for process `\unbuffered.$group_5'.
Creating decoders for process `\unbuffered.$group_4'.
Creating decoders for process `\unbuffered.$group_3'.
Creating decoders for process `\unbuffered.$group_2'.
Creating decoders for process `\unbuffered.$group_1'.
Creating decoders for process `\unbuffered.$group_0'.
Creating decoders for process `\bus$1.$group_23'.
     1/1: \nrdy_o$next
Creating decoders for process `\bus$1.$group_22'.
     1/1: \nrdy_r$next
Creating decoders for process `\bus$1.$group_21'.
     1/1: \slrd_p$next
Creating decoders for process `\bus$1.$group_20'.
     1/1: \slrd_r$next
Creating decoders for process `\bus$1.$group_19'.
     1/1: \addr_p$next
Creating decoders for process `\bus$1.$group_18'.
     1/1: \addr_r$next
Creating decoders for process `\bus$1.$group_17'.
Creating decoders for process `\bus$1.$group_16'.
Creating decoders for process `\bus$1.$group_15'.
Creating decoders for process `\bus$1.$group_14'.
Creating decoders for process `\bus$1.$group_13'.
Creating decoders for process `\bus$1.$group_12'.
Creating decoders for process `\bus$1.$group_11'.
Creating decoders for process `\bus$1.$group_10'.
Creating decoders for process `\bus$1.$group_9'.
Creating decoders for process `\bus$1.$group_8'.
Creating decoders for process `\bus$1.$group_7'.
Creating decoders for process `\bus$1.$group_6'.
Creating decoders for process `\bus$1.$group_5'.
Creating decoders for process `\bus$1.$group_4'.
Creating decoders for process `\bus$1.$group_3'.
Creating decoders for process `\bus$1.$group_2'.
Creating decoders for process `\bus$1.$group_1'.
Creating decoders for process `\bus$1.$group_0'.
Creating decoders for process `\registers.$group_5'.
     1/7: $19
     2/7: \ro_reg_dummy$16$next
     3/7: \ro_reg_dummy$next
     4/7: $signal$next
     5/7: $17
     6/7: $signal$1$next
     7/7: $18
Creating decoders for process `\registers.$group_4'.
     1/1: \reg_data$next
Creating decoders for process `\registers.$group_3'.
     1/1: \reg_addr$next
Creating decoders for process `\registers.$group_2'.
     1/1: \latch_addr$next
Creating decoders for process `\registers.$group_1'.
     1/1: \ack_o
Creating decoders for process `\registers.$group_0'.
Creating decoders for process `\i2c_target.$group_1'.
Creating decoders for process `\i2c_target.$group_0'.
Creating decoders for process `\fsm.$group_25'.
     1/1: \scl_o$next
Creating decoders for process `\fsm.$group_24'.
     1/1: \data_i$next
Creating decoders for process `\fsm.$group_23'.
     1/1: \shreg_o$next
Creating decoders for process `\fsm.$group_22'.
     1/1: \sda_o$next
Creating decoders for process `\fsm.$group_21'.
     1/1: \shreg_i$next
Creating decoders for process `\fsm.$group_20'.
     1/1: \bitno$next
Creating decoders for process `\fsm.$group_19'.
     1/1: \state$next
Creating decoders for process `\fsm.$group_18'.
     1/1: \scl_o_fsm_next_ce
Creating decoders for process `\fsm.$group_17'.
     1/1: \scl_o_fsm_next
Creating decoders for process `\fsm.$group_16'.
     1/1: \data_i_fsm_next_ce
Creating decoders for process `\fsm.$group_15'.
     1/1: \data_i_fsm_next
Creating decoders for process `\fsm.$group_14'.
     1/1: \shreg_o_fsm_next_ce
Creating decoders for process `\fsm.$group_13'.
     1/1: \shreg_o_fsm_next
Creating decoders for process `\fsm.$group_12'.
     1/1: \restart
Creating decoders for process `\fsm.$group_11'.
     1/1: \stop
Creating decoders for process `\fsm.$group_10'.
     1/1: \sda_o_fsm_next_ce
Creating decoders for process `\fsm.$group_9'.
     1/1: \sda_o_fsm_next
Creating decoders for process `\fsm.$group_8'.
     1/1: \start
Creating decoders for process `\fsm.$group_7'.
     1/1: \shreg_i_fsm_next_ce
Creating decoders for process `\fsm.$group_6'.
     1/1: \shreg_i_fsm_next
Creating decoders for process `\fsm.$group_5'.
     1/1: \bitno_fsm_next_ce
Creating decoders for process `\fsm.$group_4'.
     1/1: \bitno_fsm_next
Creating decoders for process `\fsm.$group_3'.
     1/1: \next_state
Creating decoders for process `\fsm.$group_2'.
Creating decoders for process `\fsm.$group_1'.
Creating decoders for process `\fsm.$group_0'.
     1/1: \is_el$next
Creating decoders for process `\bus.$group_9'.
     1/1: \sda_r$next
Creating decoders for process `\bus.$group_8'.
     1/1: \scl_r$next
Creating decoders for process `\bus.$group_7'.
Creating decoders for process `\bus.$group_6'.
Creating decoders for process `\bus.$group_5'.
Creating decoders for process `\bus.$group_4'.
Creating decoders for process `\bus.$group_3'.
Creating decoders for process `\bus.$group_2'.
Creating decoders for process `\bus.$group_1'.
Creating decoders for process `\bus.$group_0'.
Creating decoders for process `\U$$1.$group_2'.
Creating decoders for process `\U$$1.$group_1'.
Creating decoders for process `\U$$1.$group_0'.
Creating decoders for process `\U$$0.$group_2'.
Creating decoders for process `\U$$0.$group_1'.
Creating decoders for process `\U$$0.$group_0'.

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$1440' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$1441' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$1442' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$1443' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$1444' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$1445' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$1446' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$1447' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$1448' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$1449' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$1450' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$1452' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$1454' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$1455' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$1456' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$1457' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$1458' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$1459' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/opt/homebrew/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Removing empty process `top.$group_16'.
Removing empty process `top.$group_15'.
Removing empty process `top.$group_14'.
Removing empty process `top.$group_13'.
Removing empty process `top.$group_12'.
Removing empty process `top.$group_11'.
Removing empty process `top.$group_10'.
Removing empty process `top.$group_9'.
Removing empty process `top.$group_8'.
Removing empty process `top.$group_7'.
Removing empty process `top.$group_6'.
Removing empty process `top.$group_5'.
Removing empty process `top.$group_4'.
Removing empty process `top.$group_3'.
Removing empty process `top.$group_2'.
Removing empty process `top.$group_1'.
Removing empty process `top.$group_0'.
Removing empty process `cd_sync.$group_4'.
Removing empty process `cd_sync.$group_3'.
Found and cleaned up 1 empty switch in `\cd_sync.$group_2'.
Removing empty process `cd_sync.$group_2'.
Found and cleaned up 1 empty switch in `\cd_sync.$group_1'.
Removing empty process `cd_sync.$group_1'.
Removing empty process `cd_sync.$group_0'.
Found and cleaned up 2 empty switches in `\U$$2.$group_8'.
Removing empty process `U$$2.$group_8'.
Found and cleaned up 3 empty switches in `\U$$2.$group_7'.
Removing empty process `U$$2.$group_7'.
Found and cleaned up 5 empty switches in `\U$$2.$group_6'.
Removing empty process `U$$2.$group_6'.
Found and cleaned up 3 empty switches in `\U$$2.$group_5'.
Removing empty process `U$$2.$group_5'.
Found and cleaned up 3 empty switches in `\U$$2.$group_4'.
Removing empty process `U$$2.$group_4'.
Found and cleaned up 2 empty switches in `\U$$2.$group_3'.
Removing empty process `U$$2.$group_3'.
Found and cleaned up 4 empty switches in `\U$$2.$group_2'.
Removing empty process `U$$2.$group_2'.
Found and cleaned up 6 empty switches in `\U$$2.$group_1'.
Removing empty process `U$$2.$group_1'.
Removing empty process `U$$2.$group_0'.
Found and cleaned up 3 empty switches in `\lfsr.$group_0'.
Removing empty process `lfsr.$group_0'.
Removing empty process `U$$1$7.$group_1'.
Removing empty process `U$$1$7.$group_0'.
Removing empty process `U$$0$6.$group_1'.
Removing empty process `U$$0$6.$group_0'.
Found and cleaned up 2 empty switches in `\fx2_crossbar.$group_9'.
Removing empty process `fx2_crossbar.$group_9'.
Found and cleaned up 1 empty switch in `\fx2_crossbar.$group_8'.
Removing empty process `fx2_crossbar.$group_8'.
Found and cleaned up 2 empty switches in `\fx2_crossbar.$group_6'.
Removing empty process `fx2_crossbar.$group_6'.
Found and cleaned up 2 empty switches in `\fx2_crossbar.$group_4'.
Removing empty process `fx2_crossbar.$group_4'.
Found and cleaned up 1 empty switch in `\fx2_crossbar.$group_2'.
Removing empty process `fx2_crossbar.$group_2'.
Found and cleaned up 1 empty switch in `\fx2_crossbar.$group_1'.
Removing empty process `fx2_crossbar.$group_1'.
Removing empty process `fx2_crossbar.$group_0'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_13'.
Removing empty process `fsm$4.$group_13'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_12'.
Removing empty process `fsm$4.$group_12'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_11'.
Removing empty process `fsm$4.$group_11'.
Found and cleaned up 1 empty switch in `\fsm$4.$group_10'.
Removing empty process `fsm$4.$group_10'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_9'.
Removing empty process `fsm$4.$group_9'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_8'.
Removing empty process `fsm$4.$group_8'.
Found and cleaned up 4 empty switches in `\fsm$4.$group_7'.
Removing empty process `fsm$4.$group_7'.
Found and cleaned up 4 empty switches in `\fsm$4.$group_6'.
Removing empty process `fsm$4.$group_6'.
Found and cleaned up 4 empty switches in `\fsm$4.$group_5'.
Removing empty process `fsm$4.$group_5'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_4'.
Removing empty process `fsm$4.$group_4'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_3'.
Removing empty process `fsm$4.$group_3'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_2'.
Removing empty process `fsm$4.$group_2'.
Found and cleaned up 2 empty switches in `\fsm$4.$group_1'.
Removing empty process `fsm$4.$group_1'.
Found and cleaned up 9 empty switches in `\fsm$4.$group_0'.
Removing empty process `fsm$4.$group_0'.
Removing empty process `out_fifo_0.$group_6'.
Found and cleaned up 1 empty switch in `\out_fifo_0.$group_5'.
Removing empty process `out_fifo_0.$group_5'.
Found and cleaned up 1 empty switch in `\out_fifo_0.$group_4'.
Removing empty process `out_fifo_0.$group_4'.
Found and cleaned up 1 empty switch in `\out_fifo_0.$group_3'.
Removing empty process `out_fifo_0.$group_3'.
Found and cleaned up 1 empty switch in `\out_fifo_0.$group_2'.
Removing empty process `out_fifo_0.$group_2'.
Found and cleaned up 2 empty switches in `\out_fifo_0.$group_1'.
Removing empty process `out_fifo_0.$group_1'.
Found and cleaned up 2 empty switches in `\out_fifo_0.$group_0'.
Removing empty process `out_fifo_0.$group_0'.
Found and cleaned up 4 empty switches in `\skid.$group_11'.
Removing empty process `skid.$group_11'.
Found and cleaned up 3 empty switches in `\skid.$group_10'.
Removing empty process `skid.$group_10'.
Removing empty process `skid.$group_9'.
Removing empty process `skid.$group_8'.
Found and cleaned up 3 empty switches in `\skid.$group_7'.
Removing empty process `skid.$group_7'.
Removing empty process `skid.$group_6'.
Removing empty process `skid.$group_5'.
Removing empty process `skid.$group_4'.
Removing empty process `skid.$group_3'.
Removing empty process `skid.$group_2'.
Removing empty process `skid.$group_1'.
Removing empty process `skid.$group_0'.
Removing empty process `inner$2.$group_8'.
Removing empty process `inner$2.$group_7'.
Removing empty process `inner$2.$group_6'.
Found and cleaned up 3 empty switches in `\inner$2.$group_5'.
Removing empty process `inner$2.$group_5'.
Removing empty process `inner$2.$group_4'.
Removing empty process `inner$2.$group_3'.
Removing empty process `inner$2.$group_2'.
Removing empty process `inner$2.$group_1'.
Removing empty process `inner$2.$group_0'.
Found and cleaned up 4 empty switches in `\unbuffered$3.$group_12'.
Removing empty process `unbuffered$3.$group_12'.
Found and cleaned up 3 empty switches in `\unbuffered$3.$group_11'.
Removing empty process `unbuffered$3.$group_11'.
Removing empty process `unbuffered$3.$group_10'.
Removing empty process `unbuffered$3.$group_9'.
Removing empty process `unbuffered$3.$group_8'.
Found and cleaned up 3 empty switches in `\unbuffered$3.$group_7'.
Removing empty process `unbuffered$3.$group_7'.
Removing empty process `unbuffered$3.$group_6'.
Removing empty process `unbuffered$3.$group_5'.
Removing empty process `unbuffered$3.$group_4'.
Removing empty process `unbuffered$3.$group_3'.
Removing empty process `unbuffered$3.$group_2'.
Removing empty process `unbuffered$3.$group_1'.
Removing empty process `unbuffered$3.$group_0'.
Removing empty process `in_fifo_0.$group_4'.
Removing empty process `in_fifo_0.$group_3'.
Removing empty process `in_fifo_0.$group_2'.
Found and cleaned up 4 empty switches in `\in_fifo_0.$group_1'.
Removing empty process `in_fifo_0.$group_1'.
Found and cleaned up 3 empty switches in `\in_fifo_0.$group_0'.
Removing empty process `in_fifo_0.$group_0'.
Removing empty process `inner.$group_8'.
Removing empty process `inner.$group_7'.
Removing empty process `inner.$group_6'.
Found and cleaned up 3 empty switches in `\inner.$group_5'.
Removing empty process `inner.$group_5'.
Removing empty process `inner.$group_4'.
Removing empty process `inner.$group_3'.
Removing empty process `inner.$group_2'.
Removing empty process `inner.$group_1'.
Removing empty process `inner.$group_0'.
Found and cleaned up 4 empty switches in `\unbuffered.$group_12'.
Removing empty process `unbuffered.$group_12'.
Found and cleaned up 3 empty switches in `\unbuffered.$group_11'.
Removing empty process `unbuffered.$group_11'.
Removing empty process `unbuffered.$group_10'.
Removing empty process `unbuffered.$group_9'.
Removing empty process `unbuffered.$group_8'.
Found and cleaned up 3 empty switches in `\unbuffered.$group_7'.
Removing empty process `unbuffered.$group_7'.
Removing empty process `unbuffered.$group_6'.
Removing empty process `unbuffered.$group_5'.
Removing empty process `unbuffered.$group_4'.
Removing empty process `unbuffered.$group_3'.
Removing empty process `unbuffered.$group_2'.
Removing empty process `unbuffered.$group_1'.
Removing empty process `unbuffered.$group_0'.
Found and cleaned up 1 empty switch in `\bus$1.$group_23'.
Removing empty process `bus$1.$group_23'.
Found and cleaned up 1 empty switch in `\bus$1.$group_22'.
Removing empty process `bus$1.$group_22'.
Found and cleaned up 1 empty switch in `\bus$1.$group_21'.
Removing empty process `bus$1.$group_21'.
Found and cleaned up 1 empty switch in `\bus$1.$group_20'.
Removing empty process `bus$1.$group_20'.
Found and cleaned up 1 empty switch in `\bus$1.$group_19'.
Removing empty process `bus$1.$group_19'.
Found and cleaned up 1 empty switch in `\bus$1.$group_18'.
Removing empty process `bus$1.$group_18'.
Removing empty process `bus$1.$group_17'.
Removing empty process `bus$1.$group_16'.
Removing empty process `bus$1.$group_15'.
Removing empty process `bus$1.$group_14'.
Removing empty process `bus$1.$group_13'.
Removing empty process `bus$1.$group_12'.
Removing empty process `bus$1.$group_11'.
Removing empty process `bus$1.$group_10'.
Removing empty process `bus$1.$group_9'.
Removing empty process `bus$1.$group_8'.
Removing empty process `bus$1.$group_7'.
Removing empty process `bus$1.$group_6'.
Removing empty process `bus$1.$group_5'.
Removing empty process `bus$1.$group_4'.
Removing empty process `bus$1.$group_3'.
Removing empty process `bus$1.$group_2'.
Removing empty process `bus$1.$group_1'.
Removing empty process `bus$1.$group_0'.
Found and cleaned up 4 empty switches in `\registers.$group_5'.
Removing empty process `registers.$group_5'.
Found and cleaned up 5 empty switches in `\registers.$group_4'.
Removing empty process `registers.$group_4'.
Found and cleaned up 3 empty switches in `\registers.$group_3'.
Removing empty process `registers.$group_3'.
Found and cleaned up 3 empty switches in `\registers.$group_2'.
Removing empty process `registers.$group_2'.
Found and cleaned up 3 empty switches in `\registers.$group_1'.
Removing empty process `registers.$group_1'.
Removing empty process `registers.$group_0'.
Removing empty process `i2c_target.$group_1'.
Removing empty process `i2c_target.$group_0'.
Found and cleaned up 2 empty switches in `\fsm.$group_25'.
Removing empty process `fsm.$group_25'.
Found and cleaned up 2 empty switches in `\fsm.$group_24'.
Removing empty process `fsm.$group_24'.
Found and cleaned up 2 empty switches in `\fsm.$group_23'.
Removing empty process `fsm.$group_23'.
Found and cleaned up 2 empty switches in `\fsm.$group_22'.
Removing empty process `fsm.$group_22'.
Found and cleaned up 2 empty switches in `\fsm.$group_21'.
Removing empty process `fsm.$group_21'.
Found and cleaned up 2 empty switches in `\fsm.$group_20'.
Removing empty process `fsm.$group_20'.
Found and cleaned up 1 empty switch in `\fsm.$group_19'.
Removing empty process `fsm.$group_19'.
Found and cleaned up 4 empty switches in `\fsm.$group_18'.
Removing empty process `fsm.$group_18'.
Found and cleaned up 4 empty switches in `\fsm.$group_17'.
Removing empty process `fsm.$group_17'.
Found and cleaned up 3 empty switches in `\fsm.$group_16'.
Removing empty process `fsm.$group_16'.
Found and cleaned up 3 empty switches in `\fsm.$group_15'.
Removing empty process `fsm.$group_15'.
Found and cleaned up 7 empty switches in `\fsm.$group_14'.
Removing empty process `fsm.$group_14'.
Found and cleaned up 7 empty switches in `\fsm.$group_13'.
Removing empty process `fsm.$group_13'.
Found and cleaned up 6 empty switches in `\fsm.$group_12'.
Removing empty process `fsm.$group_12'.
Found and cleaned up 8 empty switches in `\fsm.$group_11'.
Removing empty process `fsm.$group_11'.
Found and cleaned up 12 empty switches in `\fsm.$group_10'.
Removing empty process `fsm.$group_10'.
Found and cleaned up 12 empty switches in `\fsm.$group_9'.
Removing empty process `fsm.$group_9'.
Found and cleaned up 4 empty switches in `\fsm.$group_8'.
Removing empty process `fsm.$group_8'.
Found and cleaned up 3 empty switches in `\fsm.$group_7'.
Removing empty process `fsm.$group_7'.
Found and cleaned up 3 empty switches in `\fsm.$group_6'.
Removing empty process `fsm.$group_6'.
Found and cleaned up 5 empty switches in `\fsm.$group_5'.
Removing empty process `fsm.$group_5'.
Found and cleaned up 5 empty switches in `\fsm.$group_4'.
Removing empty process `fsm.$group_4'.
Found and cleaned up 17 empty switches in `\fsm.$group_3'.
Removing empty process `fsm.$group_3'.
Removing empty process `fsm.$group_2'.
Removing empty process `fsm.$group_1'.
Found and cleaned up 1 empty switch in `\fsm.$group_0'.
Removing empty process `fsm.$group_0'.
Found and cleaned up 1 empty switch in `\bus.$group_9'.
Removing empty process `bus.$group_9'.
Found and cleaned up 1 empty switch in `\bus.$group_8'.
Removing empty process `bus.$group_8'.
Removing empty process `bus.$group_7'.
Removing empty process `bus.$group_6'.
Removing empty process `bus.$group_5'.
Removing empty process `bus.$group_4'.
Removing empty process `bus.$group_3'.
Removing empty process `bus.$group_2'.
Removing empty process `bus.$group_1'.
Removing empty process `bus.$group_0'.
Removing empty process `U$$1.$group_2'.
Removing empty process `U$$1.$group_1'.
Removing empty process `U$$1.$group_0'.
Removing empty process `U$$0.$group_2'.
Removing empty process `U$$0.$group_1'.
Removing empty process `U$$0.$group_0'.
Cleaned up 294 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module pin_clk_if_0.
Optimizing module pin_port_b_7__oe.
Optimizing module pin_port_b_7__io.
Optimizing module pin_port_b_6__oe.
Optimizing module pin_port_b_6__io.
Optimizing module pin_port_b_5__oe.
Optimizing module pin_port_b_5__io.
Optimizing module pin_port_b_4__oe.
Optimizing module pin_port_b_4__io.
Optimizing module pin_port_b_3__oe.
Optimizing module pin_port_b_3__io.
Optimizing module pin_port_b_2__oe.
Optimizing module pin_port_b_2__io.
Optimizing module pin_port_b_1__oe.
Optimizing module pin_port_b_1__io.
Optimizing module pin_port_b_0__oe.
Optimizing module pin_port_b_0__io.
Optimizing module pin_port_a_7__oe.
Optimizing module pin_port_a_7__io.
Optimizing module pin_port_a_6__oe.
Optimizing module pin_port_a_6__io.
Optimizing module pin_port_a_5__oe.
Optimizing module pin_port_a_5__io.
Optimizing module pin_port_a_4__oe.
Optimizing module pin_port_a_4__io.
Optimizing module pin_port_a_3__oe.
Optimizing module pin_port_a_3__io.
Optimizing module pin_port_a_2__oe.
Optimizing module pin_port_a_2__io.
Optimizing module pin_port_a_1__oe.
Optimizing module pin_port_a_1__io.
Optimizing module pin_port_a_0__oe.
Optimizing module pin_port_a_0__io.
Optimizing module pin_fx2_0__fd.
Optimizing module pin_fx2_0__flag.
Optimizing module pin_fx2_0__fifoadr.
Optimizing module pin_fx2_0__pktend.
Optimizing module pin_fx2_0__slwr.
Optimizing module pin_fx2_0__slrd.
Optimizing module pin_fx2_0__sloe.
Optimizing module pin_i2c_0__sda.
Optimizing module pin_i2c_0__scl.
Optimizing module pin_unused_0.
Optimizing module cd_sync.
Optimizing module multiplexer.
Optimizing module U$$0$5.
Optimizing module U$$2.
<suppressed ~5 debug messages>
Optimizing module lfsr.
<suppressed ~12 debug messages>
Optimizing module U$$1$7.
<suppressed ~2 debug messages>
Optimizing module U$$0$6.
<suppressed ~2 debug messages>
Optimizing module fx2_crossbar.
<suppressed ~19 debug messages>
Optimizing module fsm$4.
<suppressed ~19 debug messages>
Optimizing module out_fifo_0.
Optimizing module skid.
<suppressed ~1 debug messages>
Optimizing module inner$2.
Optimizing module unbuffered$3.
<suppressed ~1 debug messages>
Optimizing module in_fifo_0.
Optimizing module inner.
Optimizing module unbuffered.
<suppressed ~1 debug messages>
Optimizing module bus$1.
Optimizing module registers.
<suppressed ~7 debug messages>
Optimizing module i2c_target.
Optimizing module fsm.
<suppressed ~24 debug messages>
Optimizing module bus.
Optimizing module U$$1.
Optimizing module U$$0.

2.4. Executing FLATTEN pass (flatten design).
Deleting now unused module pin_clk_if_0.
Deleting now unused module pin_port_b_7__oe.
Deleting now unused module pin_port_b_7__io.
Deleting now unused module pin_port_b_6__oe.
Deleting now unused module pin_port_b_6__io.
Deleting now unused module pin_port_b_5__oe.
Deleting now unused module pin_port_b_5__io.
Deleting now unused module pin_port_b_4__oe.
Deleting now unused module pin_port_b_4__io.
Deleting now unused module pin_port_b_3__oe.
Deleting now unused module pin_port_b_3__io.
Deleting now unused module pin_port_b_2__oe.
Deleting now unused module pin_port_b_2__io.
Deleting now unused module pin_port_b_1__oe.
Deleting now unused module pin_port_b_1__io.
Deleting now unused module pin_port_b_0__oe.
Deleting now unused module pin_port_b_0__io.
Deleting now unused module pin_port_a_7__oe.
Deleting now unused module pin_port_a_7__io.
Deleting now unused module pin_port_a_6__oe.
Deleting now unused module pin_port_a_6__io.
Deleting now unused module pin_port_a_5__oe.
Deleting now unused module pin_port_a_5__io.
Deleting now unused module pin_port_a_4__oe.
Deleting now unused module pin_port_a_4__io.
Deleting now unused module pin_port_a_3__oe.
Deleting now unused module pin_port_a_3__io.
Deleting now unused module pin_port_a_2__oe.
Deleting now unused module pin_port_a_2__io.
Deleting now unused module pin_port_a_1__oe.
Deleting now unused module pin_port_a_1__io.
Deleting now unused module pin_port_a_0__oe.
Deleting now unused module pin_port_a_0__io.
Deleting now unused module pin_fx2_0__fd.
Deleting now unused module pin_fx2_0__flag.
Deleting now unused module pin_fx2_0__fifoadr.
Deleting now unused module pin_fx2_0__pktend.
Deleting now unused module pin_fx2_0__slwr.
Deleting now unused module pin_fx2_0__slrd.
Deleting now unused module pin_fx2_0__sloe.
Deleting now unused module pin_i2c_0__sda.
Deleting now unused module pin_i2c_0__scl.
Deleting now unused module pin_unused_0.
Deleting now unused module cd_sync.
Deleting now unused module multiplexer.
Deleting now unused module U$$0$5.
Deleting now unused module U$$2.
Deleting now unused module lfsr.
Deleting now unused module U$$1$7.
Deleting now unused module U$$0$6.
Deleting now unused module fx2_crossbar.
Deleting now unused module fsm$4.
Deleting now unused module out_fifo_0.
Deleting now unused module skid.
Deleting now unused module inner$2.
Deleting now unused module unbuffered$3.
Deleting now unused module in_fifo_0.
Deleting now unused module inner.
Deleting now unused module unbuffered.
Deleting now unused module bus$1.
Deleting now unused module registers.
Deleting now unused module i2c_target.
Deleting now unused module fsm.
Deleting now unused module bus.
Deleting now unused module U$$1.
Deleting now unused module U$$0.
<suppressed ~66 debug messages>

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~54 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 123 unused cells and 751 unused wires.
<suppressed ~168 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~345 debug messages>
Removed a total of 115 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\registers.$procmux$914.
Removed 1 multiplexer ports.
<suppressed ~75 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1021: { $flatten\i2c_target.\fsm.$procmux$1045_CMP $flatten\i2c_target.\fsm.$procmux$1031_CMP $flatten\i2c_target.\fsm.$procmux$1022_CMP }
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1056: { $flatten\i2c_target.\fsm.$procmux$1045_CMP $flatten\i2c_target.\fsm.$procmux$1031_CMP $flatten\i2c_target.\fsm.$procmux$1022_CMP }
    New ctrl vector for $pmux cell $flatten\fx2_crossbar.\fsm.$procmux$574: $auto$opt_reduce.cc:134:opt_pmux$1461
    New ctrl vector for $pmux cell $flatten\fx2_crossbar.\fsm.$procmux$581: $auto$opt_reduce.cc:134:opt_pmux$1463
    New ctrl vector for $pmux cell $flatten\fx2_crossbar.\fsm.$procmux$621: { $flatten\fx2_crossbar.\fsm.$procmux$578_CMP $auto$opt_reduce.cc:134:opt_pmux$1465 }
    New ctrl vector for $pmux cell $flatten\fx2_crossbar.\fsm.$procmux$639: { $flatten\fx2_crossbar.\fsm.$procmux$578_CMP $auto$opt_reduce.cc:134:opt_pmux$1467 }
  Optimizing cells in module \top.
Performed a total of 6 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~159 debug messages>
Removed a total of 53 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 168 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\i2c_target.\fsm.$procmux$922: \i2c_target.fsm.scl_o_fsm_next -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~85 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1141: { $flatten\i2c_target.\fsm.$procmux$1192_CMP $flatten\i2c_target.\fsm.$procmux$1045_CMP $flatten\i2c_target.\fsm.$procmux$1170_CMP $flatten\i2c_target.\fsm.$procmux$1034_CMP $auto$opt_reduce.cc:134:opt_pmux$1469 }
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1199: { $flatten\i2c_target.\fsm.$procmux$1045_CMP $flatten\i2c_target.\fsm.$procmux$1034_CMP $flatten\i2c_target.\fsm.$procmux$1031_CMP $auto$opt_reduce.cc:134:opt_pmux$1471 }
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1262: $auto$opt_reduce.cc:134:opt_pmux$1473
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1277: $auto$opt_reduce.cc:134:opt_pmux$1475
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1294: { $flatten\i2c_target.\fsm.$procmux$1318_CMP $auto$opt_reduce.cc:134:opt_pmux$1477 $flatten\i2c_target.\fsm.$procmux$1031_CMP }
    New ctrl vector for $pmux cell $flatten\i2c_target.\fsm.$procmux$1327: { $auto$opt_reduce.cc:134:opt_pmux$1479 $flatten\i2c_target.\fsm.$procmux$1031_CMP }
  Optimizing cells in module \top.
Performed a total of 6 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.10.13. Executing OPT_DFF pass (perform DFF optimizations).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~85 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.20. Executing OPT_DFF pass (perform DFF optimizations).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.fx2_crossbar.fsm.state as FSM state register:
    Register has an initialization value.
Not marking top.i2c_target.fsm.state as FSM state register:
    Register has an initialization value.
Not marking top.multiplexer.U$$0.U$$2.fsm_state as FSM state register:
    Register has an initialization value.

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~85 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\registers.$24 ($dff) from module top (D = $flatten\registers.$procmux$875_Y, Q = \registers_$signal$1, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1480 ($sdff) from module top (D = \i2c_target.fsm.data_i [1:0], Q = \registers_$signal$1).
Adding SRST signal on $flatten\registers.$23 ($dff) from module top (D = $flatten\registers.$procmux$854_Y, Q = \fx2_crossbar.in_fifo_0.inner.reset, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1486 ($sdff) from module top (D = \i2c_target.fsm.data_i [0], Q = \fx2_crossbar.in_fifo_0.inner.reset).
Adding SRST signal on $flatten\registers.$22 ($dff) from module top (D = $flatten\registers.$procmux$896_Y [31:24], Q = \registers.reg_data [31:24], rval = 8'00000000).
Adding SRST signal on $flatten\registers.$22 ($dff) from module top (D = $flatten\registers.$procmux$898_Y [23:0], Q = \registers.reg_data [23:0], rval = 24'000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1497 ($sdff) from module top (D = $flatten\registers.$procmux$898_Y [23:0], Q = \registers.reg_data [23:0]).
Adding EN signal on $auto$ff.cc:266:slice$1492 ($sdff) from module top (D = $flatten\registers.$procmux$894_Y [31:24], Q = \registers.reg_data [31:24]).
Adding SRST signal on $flatten\registers.$21 ($dff) from module top (D = $flatten\registers.$procmux$904_Y, Q = \registers.reg_addr, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1502 ($sdff) from module top (D = \i2c_target.fsm.data_i [1:0], Q = \registers.reg_addr).
Adding SRST signal on $flatten\registers.$20 ($dff) from module top (D = $flatten\registers.$procmux$908_Y, Q = \registers.latch_addr, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1506 ($sdff) from module top (D = 1'1, Q = \registers.latch_addr).
Adding SRST signal on $flatten\multiplexer.\U$$0.\U$$2.\lfsr.$30 ($dff) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.\lfsr.$procmux$504_Y, Q = \multiplexer.U$$0.U$$2.lfsr.value, rval = 16'0000000000000001).
Adding EN signal on $auto$ff.cc:266:slice$1512 ($sdff) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.\lfsr.$1 [15:0], Q = \multiplexer.U$$0.U$$2.lfsr.value).
Adding SRST signal on $flatten\multiplexer.\U$$0.\U$$2.$37 ($dff) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$454_Y, Q = \registers_$signal$2, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1518 ($sdff) from module top (D = 1'1, Q = \registers_$signal$2).
Adding SRST signal on $flatten\multiplexer.\U$$0.\U$$2.$36 ($dff) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$483_Y, Q = \multiplexer.U$$0.U$$2.fsm_state, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1526 ($sdff) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$479_Y, Q = \multiplexer.U$$0.U$$2.fsm_state).
Adding SRST signal on $flatten\multiplexer.\U$$0.\U$$2.$35 ($dff) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$491_Y, Q = \registers_$signal$3, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$1536 ($sdff) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$491_Y, Q = \registers_$signal$3).
Adding SRST signal on $flatten\i2c_target.\fsm.$110 ($dff) from module top (D = $flatten\i2c_target.\fsm.$procmux$922_Y, Q = \i2c_target.fsm.scl_o, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1552 ($sdff) from module top (D = 1'1, Q = \i2c_target.fsm.scl_o).
Adding SRST signal on $flatten\i2c_target.\fsm.$109 ($dff) from module top (D = $flatten\i2c_target.\fsm.$procmux$926_Y, Q = \i2c_target.fsm.data_i, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$1554 ($sdff) from module top (D = \i2c_target.fsm.data_i_fsm_next, Q = \i2c_target.fsm.data_i).
Adding SRST signal on $flatten\i2c_target.\fsm.$108 ($dff) from module top (D = $flatten\i2c_target.\fsm.$procmux$930_Y, Q = \i2c_target.fsm.shreg_o, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$1556 ($sdff) from module top (D = \i2c_target.fsm.shreg_o_fsm_next, Q = \i2c_target.fsm.shreg_o).
Adding SRST signal on $flatten\i2c_target.\fsm.$107 ($dff) from module top (D = $flatten\i2c_target.\fsm.$procmux$934_Y, Q = \i2c_target.fsm.sda_o, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1558 ($sdff) from module top (D = \i2c_target.fsm.sda_o_fsm_next, Q = \i2c_target.fsm.sda_o).
Adding SRST signal on $flatten\i2c_target.\fsm.$106 ($dff) from module top (D = $flatten\i2c_target.\fsm.$procmux$938_Y, Q = \i2c_target.fsm.shreg_i, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$1560 ($sdff) from module top (D = \i2c_target.fsm.shreg_i_fsm_next, Q = \i2c_target.fsm.shreg_i).
Adding SRST signal on $flatten\i2c_target.\fsm.$105 ($dff) from module top (D = $flatten\i2c_target.\fsm.$procmux$942_Y, Q = \i2c_target.fsm.bitno, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1562 ($sdff) from module top (D = \i2c_target.fsm.bitno_fsm_next, Q = \i2c_target.fsm.bitno).
Adding SRST signal on $flatten\i2c_target.\fsm.$104 ($dff) from module top (D = \i2c_target.fsm.next_state, Q = \i2c_target.fsm.state, rval = 4'0000).
Adding SRST signal on $flatten\i2c_target.\fsm.$103 ($dff) from module top (D = \i2c_target.fsm.is_el$2, Q = \i2c_target.fsm.is_el, rval = 1'0).
Adding SRST signal on $flatten\i2c_target.\bus.$26 ($dff) from module top (D = \i2c_target.bus.U$$1.stage1, Q = \i2c_target.bus.sda_r, rval = 1'1).
Adding SRST signal on $flatten\i2c_target.\bus.$25 ($dff) from module top (D = \i2c_target.bus.U$$0.stage1, Q = \i2c_target.bus.scl_r, rval = 1'1).
Adding SRST signal on $flatten\fx2_crossbar.\out_fifo_0.\skid.$50 ($dff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\skid.$procmux$708_Y, Q = \fx2_crossbar.out_fifo_0.skid.level, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1568 ($sdff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\skid.$procmux$708_Y, Q = \fx2_crossbar.out_fifo_0.skid.level).
Adding SRST signal on $flatten\fx2_crossbar.\out_fifo_0.\skid.$49 ($dff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\skid.$procmux$714_Y, Q = \fx2_crossbar.out_fifo_0.skid.consume, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1576 ($sdff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\skid.$19 [1:0], Q = \fx2_crossbar.out_fifo_0.skid.consume).
Adding SRST signal on $flatten\fx2_crossbar.\out_fifo_0.\skid.$48 ($dff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\skid.$procmux$720_Y, Q = \fx2_crossbar.out_fifo_0.skid.produce, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1582 ($sdff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\skid.$10 [1:0], Q = \fx2_crossbar.out_fifo_0.skid.produce).
Adding SRST signal on $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$50 ($dff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$procmux$736_Y, Q = \fx2_crossbar.out_fifo_0.inner.unbuffered.level, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:266:slice$1588 ($sdff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$procmux$736_Y, Q = \fx2_crossbar.out_fifo_0.inner.unbuffered.level).
Adding SRST signal on $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$49 ($dff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$procmux$742_Y, Q = \fx2_crossbar.out_fifo_0.inner.unbuffered.consume, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:266:slice$1596 ($sdff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$19 [8:0], Q = \fx2_crossbar.out_fifo_0.inner.unbuffered.consume).
Adding SRST signal on $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$48 ($dff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$procmux$748_Y, Q = \fx2_crossbar.out_fifo_0.inner.unbuffered.produce, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:266:slice$1602 ($sdff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$10 [8:0], Q = \fx2_crossbar.out_fifo_0.inner.unbuffered.produce).
Adding SRST signal on $flatten\fx2_crossbar.\out_fifo_0.\inner.$9 ($dff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.$procmux$728_Y, Q = \fx2_crossbar.out_fifo_0.inner.r_rdy, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1608 ($sdff) from module top (D = $flatten\fx2_crossbar.\out_fifo_0.\inner.$procmux$728_Y, Q = \fx2_crossbar.out_fifo_0.inner.r_rdy).
Adding SRST signal on $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$50 ($dff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$procmux$782_Y, Q = \fx2_crossbar.in_fifo_0.inner.unbuffered.level, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:266:slice$1616 ($sdff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$procmux$782_Y, Q = \fx2_crossbar.in_fifo_0.inner.unbuffered.level).
Adding SRST signal on $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$49 ($dff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$procmux$788_Y, Q = \fx2_crossbar.in_fifo_0.inner.unbuffered.consume, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:266:slice$1624 ($sdff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$19 [8:0], Q = \fx2_crossbar.in_fifo_0.inner.unbuffered.consume).
Adding SRST signal on $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$48 ($dff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$procmux$794_Y, Q = \fx2_crossbar.in_fifo_0.inner.unbuffered.produce, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:266:slice$1630 ($sdff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$10 [8:0], Q = \fx2_crossbar.in_fifo_0.inner.unbuffered.produce).
Adding SRST signal on $flatten\fx2_crossbar.\in_fifo_0.\inner.$9 ($dff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.$procmux$774_Y, Q = \fx2_crossbar.in_fifo_0.inner.r_rdy, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1636 ($sdff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.\inner.$procmux$774_Y, Q = \fx2_crossbar.in_fifo_0.inner.r_rdy).
Adding SRST signal on $flatten\fx2_crossbar.\in_fifo_0.$15 ($dff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.$procmux$758_Y, Q = \fx2_crossbar.in_fifo_0._pending, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1644 ($sdff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.$procmux$758_Y, Q = \fx2_crossbar.in_fifo_0._pending).
Adding SRST signal on $flatten\fx2_crossbar.\in_fifo_0.$14 ($dff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.$procmux$764_Y, Q = \fx2_crossbar.in_fifo_0.queued, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:266:slice$1656 ($sdff) from module top (D = $flatten\fx2_crossbar.\in_fifo_0.$3 [9:0], Q = \fx2_crossbar.in_fifo_0.queued).
Adding SRST signal on $flatten\fx2_crossbar.\fsm.$69 ($dff) from module top (D = $flatten\fx2_crossbar.\fsm.$procmux$558_Y, Q = \fx2_crossbar.fsm.addr, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1662 ($sdff) from module top (D = \fx2_crossbar.fsm.addr_fsm_next, Q = \fx2_crossbar.fsm.addr).
Adding SRST signal on $flatten\fx2_crossbar.\fsm.$68 ($dff) from module top (D = $flatten\fx2_crossbar.\fsm.$procmux$562_Y, Q = \fx2_crossbar.fsm.oe, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1664 ($sdff) from module top (D = \fx2_crossbar.fsm.oe_fsm_next, Q = \fx2_crossbar.fsm.oe).
Adding SRST signal on $flatten\fx2_crossbar.\fsm.$67 ($dff) from module top (D = $flatten\fx2_crossbar.\fsm.$procmux$566_Y, Q = \fx2_crossbar.fsm.sloe, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1666 ($sdff) from module top (D = \fx2_crossbar.fsm.sloe_fsm_next, Q = \fx2_crossbar.fsm.sloe).
Adding SRST signal on $flatten\fx2_crossbar.\fsm.$66 ($dff) from module top (D = \fx2_crossbar.fsm.next_state, Q = \fx2_crossbar.fsm.state, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1668 ($sdff) from module top (D = \fx2_crossbar.fsm.next_state, Q = \fx2_crossbar.fsm.state).
Adding SRST signal on $flatten\fx2_crossbar.\bus.$16 ($dff) from module top (D = $flatten\fx2_crossbar.\bus.$9, Q = \fx2_crossbar.bus.nrdy_o, rval = 4'0000).
Adding SRST signal on $flatten\fx2_crossbar.\bus.$15 ($dff) from module top (D = \fx2_crossbar.bus.nrdy_i, Q = \fx2_crossbar.bus.nrdy_r, rval = 4'0000).
Adding SRST signal on $flatten\fx2_crossbar.\bus.$14 ($dff) from module top (D = \fx2_crossbar.bus.slrd_r, Q = \fx2_crossbar.bus.slrd_p, rval = 1'0).
Adding SRST signal on $flatten\fx2_crossbar.\bus.$13 ($dff) from module top (D = \fx2_crossbar.bus.slrd, Q = \fx2_crossbar.bus.slrd_r, rval = 1'0).
Adding SRST signal on $flatten\fx2_crossbar.\bus.$12 ($dff) from module top (D = \fx2_crossbar.bus.addr_r, Q = \fx2_crossbar.bus.addr_p, rval = 2'00).
Adding SRST signal on $flatten\fx2_crossbar.\bus.$11 ($dff) from module top (D = \fx2_crossbar.fsm.addr, Q = \fx2_crossbar.bus.addr_r, rval = 2'00).
Adding EN signal on $flatten\cd_sync.$11 ($dff) from module top (D = $flatten\cd_sync.$5 [9:0], Q = \cd_sync.timer).
Adding EN signal on $flatten\cd_sync.$10 ($dff) from module top (D = 1'1, Q = \cd_sync.ready).
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$1553 ($sdffe) from module top.

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 99 unused cells and 100 unused wires.
<suppressed ~142 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~11 debug messages>

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.16. Rerunning OPT passes. (Maybe there is more to do..)

2.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

2.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.20. Executing OPT_DFF pass (perform DFF optimizations).

2.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.23. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 26 address bits (of 32) from memory init port top.$flatten\fx2_crossbar.\fsm.$auto$mem.cc:319:emit$384 ($flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$382).
Removed top 26 address bits (of 32) from memory init port top.$flatten\fx2_crossbar.\fsm.$auto$mem.cc:319:emit$388 ($flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1549 ($ne).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1653 ($ne).
Removed top 1 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1673 ($ne).
Removed top 3 bits (of 7) from port B of cell top.$flatten\i2c_target.\fsm.$22 ($eq).
Removed top 1 bits (of 4) from port Y of cell top.$flatten\i2c_target.\fsm.$35 ($add).
Removed top 1 bits (of 9) from port Y of cell top.$flatten\i2c_target.\fsm.$46 ($or).
Removed top 1 bits (of 9) from port A of cell top.$flatten\i2c_target.\fsm.$46 ($or).
Removed top 1 bits (of 4) from port B of cell top.$flatten\i2c_target.\fsm.$procmux$1010_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$flatten\i2c_target.\fsm.$procmux$1031_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$flatten\i2c_target.\fsm.$procmux$1034_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$flatten\i2c_target.\fsm.$procmux$1045_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$flatten\i2c_target.\fsm.$procmux$1170_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$flatten\i2c_target.\fsm.$procmux$1192_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell top.$flatten\i2c_target.\fsm.$procmux$1416 ($mux).
Removed top 3 bits (of 4) from port B of cell top.$flatten\i2c_target.\fsm.$procmux$1318_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell top.$flatten\i2c_target.\fsm.$procmux$1353 ($mux).
Removed top 1 bits (of 4) from mux cell top.$flatten\i2c_target.\fsm.$procmux$1379 ($mux).
Removed top 1 bits (of 4) from mux cell top.$flatten\i2c_target.\fsm.$procmux$1381 ($mux).
Removed top 8 bits (of 32) from mux cell top.$flatten\registers.$procmux$898 ($mux).
Removed top 8 bits (of 32) from mux cell top.$flatten\registers.$procmux$896 ($mux).
Removed top 7 bits (of 8) from port B of cell top.$flatten\registers.$procmux$892_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell top.$flatten\registers.$procmux$891_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$flatten\registers.$procmux$871_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\fx2_crossbar.\fsm.$procmux$576_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\fx2_crossbar.\fsm.$procmux$577_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\fx2_crossbar.\fsm.$procmux$578_CMP0 ($eq).
Removed top 1 bits (of 10) from mux cell top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$16 ($mux).
Removed top 1 bits (of 10) from mux cell top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$25 ($mux).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$36 ($add).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$47 ($sub).
Removed top 1 bits (of 3) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\skid.$47 ($sub).
Removed top 1 bits (of 3) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\skid.$36 ($add).
Removed top 1 bits (of 3) from mux cell top.$flatten\fx2_crossbar.\out_fifo_0.\skid.$25 ($mux).
Removed top 1 bits (of 3) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\skid.$21 ($add).
Removed top 1 bits (of 3) from mux cell top.$flatten\fx2_crossbar.\out_fifo_0.\skid.$16 ($mux).
Removed top 1 bits (of 3) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\skid.$12 ($add).
Removed top 1 bits (of 11) from port Y of cell top.$flatten\fx2_crossbar.\in_fifo_0.$5 ($add).
Removed top 1 bits (of 10) from mux cell top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$16 ($mux).
Removed top 1 bits (of 10) from mux cell top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$25 ($mux).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$36 ($add).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$47 ($sub).
Removed top 1 bits (of 2) from FF cell top.$auto$ff.cc:266:slice$1682 ($sdff).
Removed top 1 bits (of 4) from port A of cell top.$flatten\fx2_crossbar.$6 ($and).
Removed top 1 bits (of 17) from port Y of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$29 ($or).
Removed top 1 bits (of 17) from port A of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$29 ($or).
Removed top 15 bits (of 16) from port A of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$15 ($xor).
Removed top 15 bits (of 16) from port B of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$15 ($xor).
Removed top 15 bits (of 16) from port Y of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$15 ($xor).
Removed top 15 bits (of 16) from port B of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$27 ($xor).
Removed top 15 bits (of 16) from port A of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$21 ($xor).
Removed top 15 bits (of 16) from port B of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$21 ($xor).
Removed top 15 bits (of 16) from port Y of cell top.$flatten\multiplexer.\U$$0.\U$$2.\lfsr.$21 ($xor).
Removed top 1 bits (of 2) from port B of cell top.$flatten\multiplexer.\U$$0.\U$$2.$procmux$482_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$flatten\multiplexer.\U$$0.\U$$2.$procmux$466_CMP0 ($eq).
Removed top 1 bits (of 33) from port Y of cell top.$flatten\multiplexer.\U$$0.\U$$2.$12 ($add).
Removed top 32 bits (of 36) from port B of cell top.$flatten\multiplexer.\U$$0.\U$$2.$9 ($shift).
Removed top 1 bits (of 11) from port Y of cell top.$flatten\cd_sync.$7 ($add).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$12 ($add).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$21 ($add).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$12 ($add).
Removed top 1 bits (of 10) from port Y of cell top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$21 ($add).
Removed top 1 bits (of 2) from FF cell top.$auto$ff.cc:266:slice$1683 ($sdff).
Removed top 1 bits (of 11) from wire top.$flatten\cd_sync.$5.
Removed top 1 bits (of 11) from wire top.$flatten\fx2_crossbar.\in_fifo_0.$3.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$10.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$11.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$19.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$20.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$34.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$45.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$10.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$11.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$19.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$20.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$34.
Removed top 1 bits (of 10) from wire top.$flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$45.
Removed top 1 bits (of 4) from wire top.$flatten\i2c_target.\fsm.$33.
Removed top 1 bits (of 9) from wire top.$flatten\i2c_target.\fsm.$42.
Removed top 1 bits (of 4) from wire top.$flatten\i2c_target.\fsm.$procmux$1353_Y.
Removed top 1 bits (of 4) from wire top.$flatten\i2c_target.\fsm.$procmux$1379_Y.
Removed top 1 bits (of 4) from wire top.$flatten\i2c_target.\fsm.$procmux$1381_Y.
Removed top 2 bits (of 4) from wire top.$flatten\i2c_target.\fsm.$procmux$1416_Y.
Removed top 1 bits (of 33) from wire top.$flatten\multiplexer.\U$$0.\U$$2.$10.
Removed top 17 bits (of 32) from wire top.$flatten\multiplexer.\U$$0.\U$$2.$procmux$491_Y.
Removed top 8 bits (of 32) from wire top.$flatten\registers.$procmux$896_Y.
Removed top 15 bits (of 32) from wire top.$flatten\registers.$procmux$898_Y.
Removed top 4 bits (of 8) from wire top.fx2_crossbar_r_data.

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 25 unused wires.
<suppressed ~1 debug messages>

2.16. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for fx2_crossbar.out_fifo_0.skid.r_port ($memrd):
    Found 1 activation_patterns using ctrl signal { \fx2_crossbar.out_fifo_0.skid.r_rdy $flatten\fx2_crossbar.\out_fifo_0.$16 }.
    No candidates found.
  Analyzing resource sharing options for $flatten\fx2_crossbar.\fsm.$auto$mem.cc:273:emit$387 ($memrd_v2):
    Found 1 activation_patterns using ctrl signal $auto$opt_reduce.cc:134:opt_pmux$1461.
    No candidates found.
  Analyzing resource sharing options for $flatten\fx2_crossbar.\fsm.$auto$mem.cc:273:emit$383 ($memrd_v2):
    Found 1 activation_patterns using ctrl signal $auto$opt_reduce.cc:134:opt_pmux$1461.
    No candidates found.

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~88 debug messages>

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\cd_sync.$7 ($add).
  creating $macc model for $flatten\fx2_crossbar.\in_fifo_0.$5 ($add).
  creating $macc model for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$12 ($add).
  creating $macc model for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$21 ($add).
  creating $macc model for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$36 ($add).
  creating $macc model for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$47 ($sub).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$12 ($add).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$21 ($add).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$36 ($add).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$47 ($sub).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\skid.$12 ($add).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\skid.$21 ($add).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\skid.$36 ($add).
  creating $macc model for $flatten\fx2_crossbar.\out_fifo_0.\skid.$47 ($sub).
  creating $macc model for $flatten\i2c_target.\fsm.$35 ($add).
  creating $macc model for $flatten\multiplexer.\U$$0.\U$$2.$12 ($add).
  creating $alu model for $macc $flatten\multiplexer.\U$$0.\U$$2.$12.
  creating $alu model for $macc $flatten\i2c_target.\fsm.$35.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\skid.$47.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\skid.$36.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\skid.$21.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\skid.$12.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$47.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$36.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$21.
  creating $alu model for $macc $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$12.
  creating $alu model for $macc $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$47.
  creating $alu model for $macc $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$36.
  creating $alu model for $macc $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$21.
  creating $alu model for $macc $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$12.
  creating $alu model for $macc $flatten\fx2_crossbar.\in_fifo_0.$5.
  creating $alu model for $macc $flatten\cd_sync.$7.
  creating $alu model for $flatten\fx2_crossbar.\in_fifo_0.$11 ($ge): new $alu
  creating $alu model for $flatten\fx2_crossbar.\in_fifo_0.$9 ($lt): merged with $flatten\fx2_crossbar.\in_fifo_0.$11.
  creating $alu model for $flatten\registers.$7 ($lt): new $alu
  creating $alu cell for $flatten\registers.$7: $auto$alumacc.cc:485:replace_alu$1714
  creating $alu cell for $flatten\fx2_crossbar.\in_fifo_0.$11, $flatten\fx2_crossbar.\in_fifo_0.$9: $auto$alumacc.cc:485:replace_alu$1725
  creating $alu cell for $flatten\cd_sync.$7: $auto$alumacc.cc:485:replace_alu$1738
  creating $alu cell for $flatten\fx2_crossbar.\in_fifo_0.$5: $auto$alumacc.cc:485:replace_alu$1741
  creating $alu cell for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$12: $auto$alumacc.cc:485:replace_alu$1744
  creating $alu cell for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$21: $auto$alumacc.cc:485:replace_alu$1747
  creating $alu cell for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$36: $auto$alumacc.cc:485:replace_alu$1750
  creating $alu cell for $flatten\fx2_crossbar.\in_fifo_0.\inner.\unbuffered.$47: $auto$alumacc.cc:485:replace_alu$1753
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$12: $auto$alumacc.cc:485:replace_alu$1756
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$21: $auto$alumacc.cc:485:replace_alu$1759
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$36: $auto$alumacc.cc:485:replace_alu$1762
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\inner.\unbuffered.$47: $auto$alumacc.cc:485:replace_alu$1765
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\skid.$12: $auto$alumacc.cc:485:replace_alu$1768
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\skid.$21: $auto$alumacc.cc:485:replace_alu$1771
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\skid.$36: $auto$alumacc.cc:485:replace_alu$1774
  creating $alu cell for $flatten\fx2_crossbar.\out_fifo_0.\skid.$47: $auto$alumacc.cc:485:replace_alu$1777
  creating $alu cell for $flatten\i2c_target.\fsm.$35: $auto$alumacc.cc:485:replace_alu$1780
  creating $alu cell for $flatten\multiplexer.\U$$0.\U$$2.$12: $auto$alumacc.cc:485:replace_alu$1783
  created 18 $alu and 0 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.6. Executing OPT_DFF pass (perform DFF optimizations).

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.9. Rerunning OPT passes. (Maybe there is more to do..)

2.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

2.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.13. Executing OPT_DFF pass (perform DFF optimizations).

2.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.16. Finished OPT passes. (There is nothing left to do.)

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
top.$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$382: removing const-1 lane 0
Performed a total of 1 transformations.

2.22.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.22.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing top.fx2_crossbar.out_fifo_0.skid.storage write port 0.

2.22.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.22.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386'[0] in module `\top': merging output FF to cell.
Checking read port `\fx2_crossbar.out_fifo_0.skid.storage'[0] in module `\top': no output FF found.
Checking read port address `\fx2_crossbar.out_fifo_0.skid.storage'[0] in module `\top': address FF has fully-defined init value, not supported.

2.22.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 5 unused wires.
<suppressed ~4 debug messages>

2.22.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory top.$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386
mapping memory top.fx2_crossbar.in_fifo_0.inner.unbuffered.storage via $__ICE40_RAM4K_
mapping memory top.fx2_crossbar.out_fifo_0.inner.unbuffered.storage via $__ICE40_RAM4K_
using FF mapping for memory top.fx2_crossbar.out_fifo_0.skid.storage
<suppressed ~174 debug messages>

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

2.25.2. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

2.25.3. Continuing TECHMAP pass.
Using template $paramod$dd3348ae87356301b9facf18ec8783aacc96eb8d\$__ICE40_RAM4K_ for cells of type $__ICE40_RAM4K_.
No more expansions possible.
<suppressed ~27 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~93 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 75 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386 in module \top:
  created 64 $dff cells and 0 static cells of width 2.
Extracted data FF from read port 0 of top.$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386: $$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdreg[0]
  read interface: 1 $dff and 63 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \fx2_crossbar.out_fifo_0.skid.storage in module \top:
  created 3 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 3 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~46 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][7]$2014.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][7]$2014.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][6]$2011.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][6]$2011.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][5]$2008.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][5]$2008.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][4]$2005.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][4]$2005.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][3]$2002.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][3]$2002.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][1]$1996.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][1]$1996.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][17]$2044.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][17]$2044.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][25]$2068.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][25]$2068.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][5]$1936.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][5]$1936.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][3]$1930.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][3]$1930.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][1]$1924.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][1]$1924.
    dead port 1/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][27]$2074.
    dead port 2/2 on $mux $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][27]$2074.
    dead port 1/2 on $mux $flatten\fx2_crossbar.\fsm.$procmux$574.
    dead port 2/2 on $mux $flatten\fx2_crossbar.\fsm.$procmux$574.
Removed 26 multiplexer ports.
<suppressed ~62 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][2]$1999:
      Old ports: A=2'10, B=2'00, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][1]$a$1949
      New ports: A=1'1, B=1'0, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][1]$a$1949 [1]
      New connections: $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][1]$a$1949 [0] = 1'0
    Consolidated identical input bits for $mux cell $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][0]$1993:
      Old ports: A=2'01, B=2'00, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][0]$a$1946
      New ports: A=1'1, B=1'0, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][0]$a$1946 [0]
      New connections: $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][0]$a$1946 [1] = 1'0
    Consolidated identical input bits for $mux cell $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][26]$2071:
      Old ports: A=2'10, B=2'00, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][13]$a$1985
      New ports: A=1'1, B=1'0, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][13]$a$1985 [1]
      New connections: $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][13]$a$1985 [0] = 1'0
    Consolidated identical input bits for $mux cell $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][16]$2041:
      Old ports: A=2'11, B=2'00, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][8]$a$1970
      New ports: A=1'1, B=1'0, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][8]$a$1970 [0]
      New connections: $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][8]$a$1970 [1] = $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][8]$a$1970 [0]
    Consolidated identical input bits for $mux cell $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][5][8]$2017:
      Old ports: A=2'10, B=2'00, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][4]$a$1958
      New ports: A=1'1, B=1'0, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][4]$a$1958 [1]
      New connections: $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][4]$a$1958 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\fx2_crossbar.$procmux$523:
      Old ports: A=4'0000, B={ $flatten\fx2_crossbar.$16 2'00 }, Y=\fx2_crossbar.bus.nrdy_i
      New ports: A=2'00, B=$flatten\fx2_crossbar.$16, Y=\fx2_crossbar.bus.nrdy_i [3:2]
      New connections: \fx2_crossbar.bus.nrdy_i [1:0] = 2'00
    New ctrl vector for $pmux cell $flatten\fx2_crossbar.\fsm.$procmux$667: { $flatten\fx2_crossbar.\fsm.$procmux$578_CMP $flatten\fx2_crossbar.\fsm.$procmux$577_CMP $auto$opt_reduce.cc:134:opt_pmux$2131 }
    Consolidated identical input bits for $mux cell $flatten\fx2_crossbar.\fsm.$procmux$683:
      Old ports: A=3'100, B=3'011, Y=$flatten\fx2_crossbar.\fsm.$procmux$683_Y
      New ports: A=2'10, B=2'01, Y={ $flatten\fx2_crossbar.\fsm.$procmux$683_Y [2] $flatten\fx2_crossbar.\fsm.$procmux$683_Y [0] }
      New connections: $flatten\fx2_crossbar.\fsm.$procmux$683_Y [1] = $flatten\fx2_crossbar.\fsm.$procmux$683_Y [0]
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1058:
      Old ports: A=8'00000000, B={ \i2c_target.fsm.shreg_o [6:0] 1'0 }, Y=$flatten\i2c_target.\fsm.$procmux$1058_Y
      New ports: A=7'0000000, B=\i2c_target.fsm.shreg_o [6:0], Y=$flatten\i2c_target.\fsm.$procmux$1058_Y [7:1]
      New connections: $flatten\i2c_target.\fsm.$procmux$1058_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1353:
      Old ports: A=3'110, B=3'000, Y=$auto$wreduce.cc:455:run$1702 [2:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$1702 [1]
      New connections: { $auto$wreduce.cc:455:run$1702 [2] $auto$wreduce.cc:455:run$1702 [0] } = { $auto$wreduce.cc:455:run$1702 [1] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1379:
      Old ports: A=3'111, B=3'001, Y=$auto$wreduce.cc:455:run$1703 [2:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$1703 [1]
      New connections: { $auto$wreduce.cc:455:run$1703 [2] $auto$wreduce.cc:455:run$1703 [0] } = { $auto$wreduce.cc:455:run$1703 [1] 1'1 }
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1416:
      Old ports: A=2'00, B=2'11, Y=$auto$wreduce.cc:455:run$1705 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1705 [0]
      New connections: $auto$wreduce.cc:455:run$1705 [1] = $auto$wreduce.cc:455:run$1705 [0]
    New ctrl vector for $pmux cell $flatten\multiplexer.\U$$0.\U$$2.$procmux$491: $auto$opt_reduce.cc:134:opt_pmux$2133
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][6]$1939:
      Old ports: A=2'00, B=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][6]$b$1941, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][2][3]$a$1919
      New ports: A=1'0, B=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][13]$a$1985 [1], Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][2][3]$a$1919 [1]
      New connections: $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][2][3]$a$1919 [0] = 1'0
    Consolidated identical input bits for $mux cell $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][2]$1927:
      Old ports: A=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][3][2]$a$1928, B=2'10, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][2][1]$a$1913
      New ports: A=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][4][4]$a$1958 [1], B=1'1, Y=$memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][2][1]$a$1913 [1]
      New connections: $memory$flatten\fx2_crossbar.\fsm.$auto$proc_rom.cc:150:do_switch$386$rdmux[0][2][1]$a$1913 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1060:
      Old ports: A=$flatten\i2c_target.\fsm.$procmux$1058_Y, B=8'00000000, Y=$flatten\i2c_target.\fsm.$procmux$1060_Y
      New ports: A=$flatten\i2c_target.\fsm.$procmux$1058_Y [7:1], B=7'0000000, Y=$flatten\i2c_target.\fsm.$procmux$1060_Y [7:1]
      New connections: $flatten\i2c_target.\fsm.$procmux$1060_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1381:
      Old ports: A=$auto$wreduce.cc:455:run$1703 [2:0], B=3'000, Y=$auto$wreduce.cc:455:run$1704 [2:0]
      New ports: A={ $auto$wreduce.cc:455:run$1703 [1] 1'1 }, B=2'00, Y=$auto$wreduce.cc:455:run$1704 [1:0]
      New connections: $auto$wreduce.cc:455:run$1704 [2] = $auto$wreduce.cc:455:run$1704 [1]
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1062:
      Old ports: A=$flatten\i2c_target.\fsm.$procmux$1060_Y, B=8'00000000, Y=$flatten\i2c_target.\fsm.$procmux$1062_Y
      New ports: A=$flatten\i2c_target.\fsm.$procmux$1060_Y [7:1], B=7'0000000, Y=$flatten\i2c_target.\fsm.$procmux$1062_Y [7:1]
      New connections: $flatten\i2c_target.\fsm.$procmux$1062_Y [0] = 1'0
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\i2c_target.\fsm.$procmux$1064:
      Old ports: A=$flatten\i2c_target.\fsm.$procmux$1062_Y, B=8'00000000, Y=$flatten\i2c_target.\fsm.$procmux$1064_Y
      New ports: A=$flatten\i2c_target.\fsm.$procmux$1062_Y [7:1], B=7'0000000, Y=$flatten\i2c_target.\fsm.$procmux$1064_Y [7:1]
      New connections: $flatten\i2c_target.\fsm.$procmux$1064_Y [0] = 1'0
  Optimizing cells in module \top.
Performed a total of 19 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 131 unused wires.
<suppressed ~3 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\fx2_crossbar.out_fifo_0.skid.storage[2]$2093 ($dff) from module top (D = \fx2_crossbar.out_fifo_0.skid.storage_w_data, Q = \fx2_crossbar.out_fifo_0.skid.storage[2]).
Adding EN signal on $memory\fx2_crossbar.out_fifo_0.skid.storage[1]$2091 ($dff) from module top (D = \fx2_crossbar.out_fifo_0.skid.storage_w_data, Q = \fx2_crossbar.out_fifo_0.skid.storage[1]).
Adding EN signal on $memory\fx2_crossbar.out_fifo_0.skid.storage[0]$2089 ($dff) from module top (D = \fx2_crossbar.out_fifo_0.skid.storage_w_data, Q = \fx2_crossbar.out_fifo_0.skid.storage[0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1679 ($sdff) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1679 ($sdff) from module top.

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 5 unused wires.
<suppressed ~4 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.20. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1678 ($sdff) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1678 ($sdff) from module top.

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~11 debug messages>

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.27. Executing OPT_DFF pass (perform DFF optimizations).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.30. Rerunning OPT passes. (Maybe there is more to do..)

2.29.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

2.29.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.34. Executing OPT_DFF pass (perform DFF optimizations).

2.29.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.37. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$b3b6ac92d800c6f07aa48f510f923d86a674e5a7\_90_pmux for cells of type $pmux.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$b6ec48645094baeb70d6b93add0cdbbe7498ad3c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$fa8d9e4c2749d63ae521a69564d54ead1ad1232d\_80_ice40_alu for cells of type $alu.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_80_ice40_alu for cells of type $alu.
Using template $paramod$6f67705c43e5e94c02b6ebb52209ce5aa5ade4c1\_80_ice40_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:1ef046be63c9541309f2f19c4ef998a798f64488$paramod$9a804b3e8f3576614913ca1805e89d49da3495fd\_90_shift_shiftx for cells of type $shift.
Using template $paramod$constmap:7e7b0a15aaca16161841ffdeb0270bfb1257cf5d$paramod$fa9ab3dca0ac473ae0e24327e78834a0d64c1ba0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$fc16b9f758000d363d24f130038bd99b46b4fa1b\_90_pmux for cells of type $pmux.
Using template $paramod$constmap:32e2ba8dfb6fc6bef5c5e28b5ac6d61ffb44732f$paramod$f289e28d20b60258b3188876ef4a0edc50fd8f37\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
No more expansions possible.
<suppressed ~1761 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~803 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~540 debug messages>
Removed a total of 180 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 73 unused cells and 1011 unused wires.
<suppressed ~74 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1714.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1714.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1738.slice[0].carry: CO=\cd_sync.timer [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1741.slice[0].carry: CO=\fx2_crossbar.in_fifo_0.queued [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1744.slice[0].carry: CO=\fx2_crossbar.in_fifo_0.inner.unbuffered.produce [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1747.slice[0].carry: CO=\fx2_crossbar.in_fifo_0.inner.unbuffered.consume [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1750.slice[0].carry: CO=\fx2_crossbar.in_fifo_0.inner.unbuffered.level [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1753.slice[0].carry: CO=\fx2_crossbar.in_fifo_0.inner.unbuffered.level [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1756.slice[0].carry: CO=\fx2_crossbar.out_fifo_0.inner.unbuffered.produce [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1759.slice[0].carry: CO=\fx2_crossbar.out_fifo_0.inner.unbuffered.consume [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1762.slice[0].carry: CO=\fx2_crossbar.out_fifo_0.inner.unbuffered.level [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1765.slice[0].carry: CO=\fx2_crossbar.out_fifo_0.inner.unbuffered.level [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1780.slice[0].carry: CO=\i2c_target.fsm.bitno [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1783.slice[0].carry: CO=\registers_$signal$3 [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~13 debug messages>

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.33.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$3551 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [7], Q = $auto$mem.cc:1608:emulate_read_first$1793 [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3550 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [6], Q = $auto$mem.cc:1608:emulate_read_first$1793 [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3549 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [5], Q = $auto$mem.cc:1608:emulate_read_first$1793 [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3548 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [4], Q = $auto$mem.cc:1608:emulate_read_first$1793 [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3547 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [3], Q = $auto$mem.cc:1608:emulate_read_first$1793 [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3546 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [2], Q = $auto$mem.cc:1608:emulate_read_first$1793 [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3545 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [1], Q = $auto$mem.cc:1608:emulate_read_first$1793 [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3544 ($_DFF_P_) from module top (D = $flatten\multiplexer.\U$$0.\U$$2.$procmux$474.Y_B [0], Q = $auto$mem.cc:1608:emulate_read_first$1793 [0], rval = 1'0).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 9 unused cells and 11 unused wires.
<suppressed ~20 debug messages>

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.33.10. Executing OPT_DFF pass (perform DFF optimizations).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.33.12. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~345 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~19 debug messages>

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1738.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1741.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1744.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1747.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1750.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1753.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1756.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1759.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1762.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1765.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1780.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1783.slice[0].carry ($lut).

2.38. Executing ICE40_OPT pass (performing simple optimizations).

2.38.1. Running ICE40 specific optimizations.

2.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~381 debug messages>

2.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~777 debug messages>
Removed a total of 259 cells.

2.38.4. Executing OPT_DFF pass (perform DFF optimizations).

2.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 2076 unused wires.
<suppressed ~11 debug messages>

2.38.6. Rerunning OPT passes. (Removed registers in this run.)

2.38.7. Running ICE40 specific optimizations.

2.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

2.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.38.10. Executing OPT_DFF pass (perform DFF optimizations).

2.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.38.12. Rerunning OPT passes. (Removed registers in this run.)

2.38.13. Running ICE40 specific optimizations.

2.38.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.38.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.38.16. Executing OPT_DFF pass (perform DFF optimizations).

2.38.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.38.18. Finished OPT passes. (There is nothing left to do.)

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.40. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

2.41. Executing ABC9 pass.

2.41.1. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.2. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module top.
Found 0 SCCs.

2.41.4. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.5. Executing PROC pass (convert processes to netlists).

2.41.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.41.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.41.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.41.5.4. Executing PROC_INIT pass (extract init attributes).

2.41.5.5. Executing PROC_ARST pass (detect async resets in processes).

2.41.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.41.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.41.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.41.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.41.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.41.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.41.5.12. Executing OPT_EXPR pass (perform const folding).

2.41.6. Executing TECHMAP pass (map to technology primitives).

2.41.6.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.41.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~127 debug messages>

2.41.7. Executing OPT pass (performing simple optimizations).

2.41.7.1. Executing OPT_EXPR pass (perform const folding).

2.41.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.41.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

2.41.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

2.41.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.41.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.41.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).

2.41.7.8. Executing OPT_EXPR pass (perform const folding).

2.41.7.9. Finished OPT passes. (There is nothing left to do.)

2.41.8. Executing TECHMAP pass (map to technology primitives).

2.41.8.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/abc9_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

2.41.8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

2.41.9. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/abc9_model.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

2.41.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~659 debug messages>

2.41.11. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

2.41.13. Executing TECHMAP pass (map to technology primitives).

2.41.13.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.41.13.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template SB_CARRY for cells of type SB_CARRY.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
No more expansions possible.
<suppressed ~154 debug messages>

2.41.14. Executing OPT pass (performing simple optimizations).

2.41.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

2.41.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

2.41.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.41.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.41.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.41.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.41.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

2.41.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.41.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.41.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.41.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.41.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.41.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.41.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.41.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.41.14.16. Finished OPT passes. (There is nothing left to do.)

2.41.15. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

2.41.16. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 862 cells with 4999 new cells, skipped 1707 cells.
  replaced 4 cell types:
     329 $_OR_
      33 $_XOR_
      12 $_ORNOT_
     488 $_MUX_
  not replaced 18 cell types:
     175 $_NOT_
     373 $_AND_
      32 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000010100001
      54 SB_IO
       1 SB_GB_IO
      52 SB_DFF
      53 SB_DFFE
      21 SB_DFFSR
     197 SB_DFFESR
      22 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000011100000
       4 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000100001011
       2 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000001100010
       2 $paramod$f99246623db89700451daf7d443842de27e23616\SB_RAM40_4K
     240 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000011001011
     122 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
       2 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000010000101
     323 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000000010101
      32 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000100010010

2.41.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

2.41.16.3. Executing XAIGER backend.
<suppressed ~366 debug messages>
Extracted 2277 AND gates and 7060 wires from module `top' to a netlist network with 409 inputs and 776 outputs.

2.41.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

2.41.16.5. Executing ABC9.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    409/    776  and =    1608  lev =   22 (1.40)  mem = 0.07 MB  box = 779  bb = 657
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    409/    776  and =    1524  lev =   12 (0.97)  mem = 0.07 MB  ch =  195  box = 779  bb = 657
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    1524.  Ch =   179.  Total mem =    0.67 MB. Peak cut mem =    0.04 MB.
ABC: P:  Del = 5328.00.  Ar =     529.0.  Edge =     1814.  Cut =     8015.  T =     0.00 sec
ABC: P:  Del = 5328.00.  Ar =     507.0.  Edge =     1845.  Cut =     7569.  T =     0.00 sec
ABC: P:  Del = 5328.00.  Ar =     458.0.  Edge =     1471.  Cut =     8173.  T =     0.00 sec
ABC: F:  Del = 5328.00.  Ar =     457.0.  Edge =     1476.  Cut =     8220.  T =     0.00 sec
ABC: A:  Del = 5328.00.  Ar =     449.0.  Edge =     1376.  Cut =     8211.  T =     0.00 sec
ABC: A:  Del = 5328.00.  Ar =     449.0.  Edge =     1375.  Cut =     8227.  T =     0.00 sec
ABC: Total time =     0.01 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    409/    776  and =    1102  lev =   14 (1.03)  mem = 0.06 MB  box = 779  bb = 657
ABC: Mapping (K=4)  :  lut =    448  edge =    1360  lev =    9 (0.66)  levB =   33  mem = 0.03 MB
ABC: LUT = 448 : 2=135 30.1 %  3=162 36.2 %  4=151 33.7 %  Ave = 3.04
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.08 seconds, total: 0.08 seconds

2.41.16.6. Executing AIGER frontend.
<suppressed ~2382 debug messages>
Removed 1474 unused cells and 4889 unused wires.

2.41.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:      467
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:      122
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:      749
Removing temp directory.

2.41.17. Executing TECHMAP pass (map to technology primitives).

2.41.17.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

2.41.17.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod$f99246623db89700451daf7d443842de27e23616\SB_RAM40_4K for cells of type $paramod$f99246623db89700451daf7d443842de27e23616\SB_RAM40_4K.
No more expansions possible.
<suppressed ~131 debug messages>

2.42. Executing ICE40_WRAPCARRY pass (wrap carries).

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 102 unused cells and 8423 unused wires.

2.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      582
  1-LUT               19
  2-LUT              147
  3-LUT              264
  4-LUT              152
  with \SB_CARRY    (#0)  101
  with \SB_CARRY    (#1)  103

Eliminating LUTs.
Number of LUTs:      582
  1-LUT               19
  2-LUT              147
  3-LUT              264
  4-LUT              152
  with \SB_CARRY    (#0)  101
  with \SB_CARRY    (#1)  103

Combining LUTs.
Number of LUTs:      543
  1-LUT               19
  2-LUT              103
  3-LUT              235
  4-LUT              186
  with \SB_CARRY    (#0)  101
  with \SB_CARRY    (#1)  103

Eliminated 0 LUTs.
Combined 39 LUTs.
<suppressed ~3166 debug messages>

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$101238f3d8d49ab12a9b49a2f01cd503b26e9c61\$lut for cells of type $lut.
Using template $paramod$a5516fc31d1e552de2435200bb732b4d4ad63a9c\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$b93d1ea7a612a32c185108f67a153d44ffb9aac2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111101 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$09deb89cf77b6e37f6ed7fef8d797dc05c0b2eee\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000110 for cells of type $lut.
Using template $paramod$845091abb5b78f3b6b0c1c1931ad510371446f3b\$lut for cells of type $lut.
Using template $paramod$4658fedcd7ebe2858c93f54b88221dcf68c6bb6c\$lut for cells of type $lut.
Using template $paramod$eaea85d27cc0950ed001348e061727a194f5cf9c\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$89f931611b66d827751f4a175a88569d5ab95376\$lut for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$0331e023d83b8009e60defb446ce9fa640b122c7\$lut for cells of type $lut.
Using template $paramod$4972722c284f07fee673f7cb99e6a36ce4a244f0\$lut for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000010 for cells of type $lut.
Using template $paramod$b89c522b7f70adaee1a35d80e932f38159b6a445\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11011111 for cells of type $lut.
Using template $paramod$4cab3b31c601551ff65536bf4f533afa0b2094ee\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$364c9ffbffac467d60dfec81bba4e18476c15602\$lut for cells of type $lut.
Using template $paramod$5e9374f44a27c3f8a1c38af244ec43ceb4fb8d4f\$lut for cells of type $lut.
Using template $paramod$ab2e45f7a350a5d7d54d88d8019d5256ae32568f\$lut for cells of type $lut.
Using template $paramod$a59507d273cd827eb6c46c37820d50a1b717efdf\$lut for cells of type $lut.
Using template $paramod$32abbd1d449a67fb913b4733374e345d4c17175b\$lut for cells of type $lut.
Using template $paramod$c8f16510db975553c8b0be1064e8f5234175f8a8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$05ac1639ab7543654a2476d11c1711de01f760e6\$lut for cells of type $lut.
Using template $paramod$16894c241be5ea1f024e9339dea788b4dbe184ae\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010101 for cells of type $lut.
Using template $paramod$fe7077462a386258cea7b409718bda7873cfae08\$lut for cells of type $lut.
Using template $paramod$ce57c8604805f80ab07a0434d106bb987e82ae6c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001011 for cells of type $lut.
Using template $paramod$07620d52cb536ce2865a3d1bba2ad2f7a88140f9\$lut for cells of type $lut.
Using template $paramod$85b779ce5ab505dbf25e5e046fb43ca2b76b878b\$lut for cells of type $lut.
Using template $paramod$dc8f0be42379c903926eb5c45306997db4c0a27c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$b2e8d279775d333b39e310bd45fd5952acdde290\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00101110 for cells of type $lut.
Using template $paramod$a7c07944e10969b2e1fd563a5b72f89493cb3705\$lut for cells of type $lut.
Using template $paramod$af0c0e3aea5daa768aac0697b02a2a49301800b1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010001 for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod$e9ae0dbccfb677c6123a492e37335d61f42e19d7\$lut for cells of type $lut.
Using template $paramod$b199427913ecba49d7426ad376614113d06b8e17\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111110 for cells of type $lut.
Using template $paramod$53ce561f80f32d4298a3beadc88b6c5c78293221\$lut for cells of type $lut.
Using template $paramod$47a8214374025465e226fa66bee690ff33268a25\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011111 for cells of type $lut.
Using template $paramod$23ba03b3f106a8b0f20f18bfebd862b419996ddc\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010110 for cells of type $lut.
Using template $paramod$70dcc34b3190ff5541006bab0f38ffad9d439d5a\$lut for cells of type $lut.
Using template $paramod$b600d182ae966d09f33a746441e104587fe7a58f\$lut for cells of type $lut.
Using template $paramod$4c944ee59be61ab6aac137182a8de1bda4d56a57\$lut for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$88dd7d1836cdd0778b512cb5e1a02bcecac22c09\$lut for cells of type $lut.
Using template $paramod$6eaa285474ca0c16a33be004e48a6a32f35674a1\$lut for cells of type $lut.
Using template $paramod$5c32c59025c0b98f20e63f249d83e7ebb4b085e3\$lut for cells of type $lut.
Using template $paramod$fe9a0158d0352193457c4f5b6282ac86d35fb3ee\$lut for cells of type $lut.
Using template $paramod$5b4b4ed558983d9f3ab4c896a7a011d129b0db9a\$lut for cells of type $lut.
Using template $paramod$756861dd4dfe0a5b9de37af2241117b1958e2ffe\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$721f18bb47e58985ba0c963ff75d5aa7fae43d18\$lut for cells of type $lut.
Using template $paramod$8a98d1c91d920b5f0ab2d9972c6d6a50d9b3c6a0\$lut for cells of type $lut.
Using template $paramod$b7f8da54f9290d8e9ca848e8ae45b6fd6733efee\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod$b2077130d89736f5191d0d24f7f6ffd3bddb0a2d\$lut for cells of type $lut.
Using template $paramod$2f5933953e311dffe5861a53a77e08849a1c7767\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100010 for cells of type $lut.
Using template $paramod$310dc7912bb5756ab08137f6868c0abbecf66466\$lut for cells of type $lut.
Using template $paramod$e56ed438824ef045f2f10081792331cde7187198\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001100 for cells of type $lut.
Using template $paramod$fbed19fb84ee7c8a884778d28a96daea96245184\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00111011 for cells of type $lut.
Using template $paramod$176a6ceafa512d807921d7dfc76320dfbbfb5fe4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110011 for cells of type $lut.
Using template $paramod$7c10da2741b95c679da643f74e8aa9472416631e\$lut for cells of type $lut.
Using template $paramod$be48d952fcad8a16b8d84daa4c48a3065f343e5e\$lut for cells of type $lut.
Using template $paramod$d76df6204e5e08a70e04785415e78377888545e3\$lut for cells of type $lut.
Using template $paramod$ea01c267d60de3df2a073e256dd58614b0b52c59\$lut for cells of type $lut.
Using template $paramod$849d013d096d73269ca4beb768f8e399745d37f2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101000 for cells of type $lut.
Using template $paramod$ba7c22fadfbf9ee7abcb895a21403114111dd201\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$df196ed0a1da5c4a58c5e08a1dac304fd3fccaab\$lut for cells of type $lut.
Using template $paramod$8d7a8d6e3356de09670738ba85f2c6b874f6b06d\$lut for cells of type $lut.
Using template $paramod$5c7d886f3b88971ac55fed4bca034a87bf180f7d\$lut for cells of type $lut.
Using template $paramod$255b0049df4cb49b23955e4a3117758a889578dd\$lut for cells of type $lut.
Using template $paramod$2953feb5e102bcccc236b4c0e38de7253e9dd640\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001100 for cells of type $lut.
Using template $paramod$e277a522d8a930c8c8c8cdb56d33d42914aefec4\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~2067 debug messages>
Removed 0 unused cells and 1207 unused wires.

2.46. Executing AUTONAME pass.
Renamed 9576 objects in module top (41 iterations).
<suppressed ~1585 debug messages>

2.47. Executing HIERARCHY pass (managing design hierarchy).

2.47.1. Analyzing design hierarchy..
Top module:  \top

2.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.48. Printing statistics.

=== top ===

   Number of wires:               1034
   Number of wire bits:           2129
   Number of public wires:        1034
   Number of public wire bits:    2129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1033
     SB_CARRY                      110
     SB_DFF                         52
     SB_DFFE                        53
     SB_DFFESR                     197
     SB_DFFSR                       21
     SB_GB_IO                        1
     SB_IO                          54
     SB_LUT4                       543
     SB_RAM40_4K                     2

2.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3. Executing JSON backend.

End of script. Logfile hash: 64f1326909, CPU: user 2.43s system 0.04s
Yosys 0.30 (git sha1 f7a8284c7b0, clang 14.0.3 -fPIC -Os)
Time spent: 23% 11x techmap (0 sec), 18% 19x read_verilog (0 sec), ...
