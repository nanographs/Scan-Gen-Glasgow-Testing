# Automatically generated by Amaranth 0.4.1. Do not edit.
attribute \generator "Amaranth"
module \top.i2c_target.bus.U$$0
  wire width 1 output 0 \scl_i
  wire width 1 input 1 \rst
  wire width 1 input 2 \clk
  wire width 1 input 3 \i2c_0__scl__i
  attribute \init 1'1
  wire width 1 \stage0
  wire width 1 \stage0$next
  process $group_0
    assign \stage0$next \stage0
    assign \stage0$next \i2c_0__scl__i
  end
  attribute \init 1'1
  wire width 1 \stage1
  wire width 1 \stage1$next
  process $group_1
    assign \stage1$next \stage1
    assign \stage1$next \stage0
  end
  process $group_2
    assign \scl_i 1'0
    assign \scl_i \stage1
  end
  cell $dff $1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \stage0$next
    connect \Q \stage0
  end
  cell $dff $2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \stage1$next
    connect \Q \stage1
  end
end
attribute \generator "Amaranth"
module \top.i2c_target.bus.U$$1
  wire width 1 output 0 \sda_i
  wire width 1 input 1 \rst
  wire width 1 input 2 \clk
  wire width 1 input 3 \i2c_0__sda__i
  attribute \init 1'1
  wire width 1 \stage0
  wire width 1 \stage0$next
  process $group_0
    assign \stage0$next \stage0
    assign \stage0$next \i2c_0__sda__i
  end
  attribute \init 1'1
  wire width 1 \stage1
  wire width 1 \stage1$next
  process $group_1
    assign \stage1$next \stage1
    assign \stage1$next \stage0
  end
  process $group_2
    assign \sda_i 1'0
    assign \sda_i \stage1
  end
  cell $dff $1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \stage0$next
    connect \Q \stage0
  end
  cell $dff $2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \stage1$next
    connect \Q \stage1
  end
end
attribute \generator "Amaranth"
module \top.i2c_target.bus
  wire width 1 output 0 \bus_start
  wire width 1 output 1 \bus_stop
  wire width 1 output 2 \bus_setup
  wire width 1 output 3 \bus_sample
  wire width 1 output 4 \sda_i
  wire width 1 input 5 \sda_o
  wire width 1 output 6 \scl_i
  wire width 1 input 7 \scl_o
  wire width 1 input 8 \rst
  wire width 1 input 9 \clk
  wire width 1 output 10 \i2c_0__scl__o
  wire width 1 output 11 \i2c_0__scl__oe
  wire width 1 output 12 \i2c_0__sda__o
  wire width 1 output 13 \i2c_0__sda__oe
  wire width 1 input 14 \i2c_0__scl__i
  wire width 1 input 15 \i2c_0__sda__i
  cell \top.i2c_target.bus.U$$0 \U$$0
    connect \scl_i \scl_i
    connect \rst \rst
    connect \clk \clk
    connect \i2c_0__scl__i \i2c_0__scl__i
  end
  cell \top.i2c_target.bus.U$$1 \U$$1
    connect \sda_i \sda_i
    connect \rst \rst
    connect \clk \clk
    connect \i2c_0__sda__i \i2c_0__sda__i
  end
  process $group_0
    assign \i2c_0__scl__o 1'0
    assign \i2c_0__scl__o 1'0
  end
  wire width 1 $1
  cell $not $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \scl_o
    connect \Y $1
  end
  process $group_1
    assign \i2c_0__scl__oe 1'0
    assign \i2c_0__scl__oe $1
  end
  process $group_2
    assign \i2c_0__sda__o 1'0
    assign \i2c_0__sda__o 1'0
  end
  wire width 1 $3
  cell $not $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \sda_o
    connect \Y $3
  end
  process $group_3
    assign \i2c_0__sda__oe 1'0
    assign \i2c_0__sda__oe $3
  end
  wire width 1 $5
  attribute \init 1'1
  wire width 1 \scl_r
  wire width 1 \scl_r$next
  cell $not $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \scl_r
    connect \Y $5
  end
  wire width 1 $7
  cell $and $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $5
    connect \B \scl_i
    connect \Y $7
  end
  process $group_4
    assign \bus_sample 1'0
    assign \bus_sample $7
  end
  wire width 1 $9
  cell $not $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \scl_i
    connect \Y $9
  end
  wire width 1 $11
  cell $and $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \scl_r
    connect \B $9
    connect \Y $11
  end
  process $group_5
    assign \bus_setup 1'0
    assign \bus_setup $11
  end
  attribute \init 1'1
  wire width 1 \sda_r
  wire width 1 \sda_r$next
  wire width 1 $13
  cell $and $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \scl_i
    connect \B \sda_r
    connect \Y $13
  end
  wire width 1 $15
  cell $not $16
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \sda_i
    connect \Y $15
  end
  wire width 1 $17
  cell $and $18
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $13
    connect \B $15
    connect \Y $17
  end
  process $group_6
    assign \bus_start 1'0
    assign \bus_start $17
  end
  wire width 1 $19
  cell $not $20
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \sda_r
    connect \Y $19
  end
  wire width 1 $21
  cell $and $22
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \scl_i
    connect \B $19
    connect \Y $21
  end
  wire width 1 $23
  cell $and $24
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $21
    connect \B \sda_i
    connect \Y $23
  end
  process $group_7
    assign \bus_stop 1'0
    assign \bus_stop $23
  end
  process $group_8
    assign \scl_r$next \scl_r
    assign \scl_r$next \scl_i
    switch \rst
      case 1'1
        assign \scl_r$next 1'1
    end
  end
  process $group_9
    assign \sda_r$next \sda_r
    assign \sda_r$next \sda_i
    switch \rst
      case 1'1
        assign \sda_r$next 1'1
    end
  end
  cell $dff $25
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \scl_r$next
    connect \Q \scl_r
  end
  cell $dff $26
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \sda_r$next
    connect \Q \sda_r
  end
end
attribute \generator "Amaranth"
module \top.i2c_target
  wire width 7 input 0 \address
  wire width 1 output 1 \start
  wire width 8 input 2 \data_o
  wire width 1 output 3 \read
  attribute \init 8'00000000
  wire width 8 output 4 \data_i
  wire width 8 \data_i$next
  attribute \init 1'0
  wire width 1 output 5 \write
  wire width 1 \write$next
  wire width 1 input 6 \ack_o
  wire width 1 input 7 \rst
  wire width 1 input 8 \clk
  wire width 1 output 9 \i2c_0__scl__o
  wire width 1 output 10 \i2c_0__scl__oe
  wire width 1 output 11 \i2c_0__sda__o
  wire width 1 output 12 \i2c_0__sda__oe
  wire width 1 input 13 \i2c_0__scl__i
  wire width 1 input 14 \i2c_0__sda__i
  wire width 1 \bus_bus_start
  wire width 1 \bus_bus_stop
  wire width 1 \bus_bus_setup
  wire width 1 \bus_bus_sample
  wire width 1 \bus_sda_i
  attribute \init 1'1
  wire width 1 \bus_sda_o
  wire width 1 \bus_sda_o$next
  wire width 1 \bus_scl_i
  attribute \init 1'1
  wire width 1 \bus_scl_o
  wire width 1 \bus_scl_o$next
  cell \top.i2c_target.bus \bus
    connect \bus_start \bus_bus_start
    connect \bus_stop \bus_bus_stop
    connect \bus_setup \bus_bus_setup
    connect \bus_sample \bus_bus_sample
    connect \sda_i \bus_sda_i
    connect \sda_o \bus_sda_o
    connect \scl_i \bus_scl_i
    connect \scl_o \bus_scl_o
    connect \rst \rst
    connect \clk \clk
    connect \i2c_0__scl__o \i2c_0__scl__o
    connect \i2c_0__scl__oe \i2c_0__scl__oe
    connect \i2c_0__sda__o \i2c_0__sda__o
    connect \i2c_0__sda__oe \i2c_0__sda__oe
    connect \i2c_0__scl__i \i2c_0__scl__i
    connect \i2c_0__sda__i \i2c_0__sda__i
  end
  attribute \init 4'0000
  wire width 4 \fsm_state
  wire width 4 \fsm_state$next
  attribute \init 3'000
  wire width 3 \bitno
  wire width 3 \bitno$next
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A \bitno
    connect \B 3'111
    connect \Y $1
  end
  attribute \init 8'00000000
  wire width 8 \shreg_i
  wire width 8 \shreg_i$next
  wire width 1 $3
  cell $eq $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 7
    parameter \B_SIGNED 0
    parameter \B_WIDTH 7
    parameter \Y_WIDTH 1
    connect \A \shreg_i [7:1]
    connect \B \address
    connect \Y $3
  end
  wire width 1 $5
  cell $not $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \shreg_i [0]
    connect \Y $5
  end
  wire width 1 $7
  cell $eq $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A \bitno
    connect \B 3'111
    connect \Y $7
  end
  wire width 1 $9
  cell $not $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_scl_i
    connect \Y $9
  end
  wire width 1 \busy
  wire width 1 $11
  cell $eq $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A \bitno
    connect \B 3'111
    connect \Y $11
  end
  wire width 1 $13
  cell $not $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_sda_i
    connect \Y $13
  end
  process $group_0
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
        switch { \bus_bus_start }
          case 1'1
            assign \fsm_state$next 4'0001
        end
      attribute \amaranth.decoding "START/1"
      case 4'0001
        switch { \bus_bus_setup \bus_bus_stop }
          case 2'-1
            assign \fsm_state$next 4'0000
          case 2'1-
            assign \fsm_state$next 4'0010
        end
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \fsm_state$next 4'0000
          case 4'--1-
            assign \fsm_state$next 4'0001
          case 4'-1--
          case 4'1---
            switch { $1 }
              case 1'1
                switch { $3 }
                  case 1'1
                    assign \fsm_state$next 4'0011
                  case
                    assign \fsm_state$next 4'0000
                end
            end
        end
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \fsm_state$next 4'0000
          case 4'--1-
            assign \fsm_state$next 4'0001
          case 4'-1--
            switch { $5 }
              case 1'1
                assign \fsm_state$next 4'0100
            end
          case 4'1---
            switch { \shreg_i [0] }
              case 1'1
                assign \fsm_state$next 4'0101
            end
        end
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \fsm_state$next 4'0000
          case 4'--1-
            assign \fsm_state$next 4'0001
          case 4'-1--
          case 4'1---
            switch { $7 }
              case 1'1
                assign \fsm_state$next 4'0110
            end
        end
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
        switch { $9 \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \fsm_state$next 4'0000
          case 4'--1-
            assign \fsm_state$next 4'0001
          case 4'-1--
            assign \fsm_state$next 4'0100
          case 4'1---
        end
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
        switch { \busy \bus_bus_start \bus_bus_stop }
          case 3'--1
            assign \fsm_state$next 4'0000
          case 3'-1-
            assign \fsm_state$next 4'0001
          case 3'1--
          case
            assign \fsm_state$next 4'0111
        end
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \fsm_state$next 4'0000
          case 4'--1-
            assign \fsm_state$next 4'0001
          case 4'-1--
          case 4'1---
            switch { $11 }
              case 1'1
                assign \fsm_state$next 4'1000
            end
        end
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \fsm_state$next 4'0000
          case 4'--1-
            assign \fsm_state$next 4'0001
          case 4'-1--
          case 4'1---
            switch { $13 }
              case 1'1
                assign \fsm_state$next 4'0101
              case
                assign \fsm_state$next 4'0000
            end
        end
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 4'0000
    end
  end
  wire width 4 $15
  wire width 4 $16
  cell $add $17
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 4
    connect \A \bitno
    connect \B 1'1
    connect \Y $16
  end
  connect $15 $16
  wire width 4 $18
  wire width 4 $19
  cell $add $20
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 4
    connect \A \bitno
    connect \B 1'1
    connect \Y $19
  end
  connect $18 $19
  wire width 4 $21
  wire width 4 $22
  cell $add $23
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 4
    connect \A \bitno
    connect \B 1'1
    connect \Y $22
  end
  connect $21 $22
  process $group_1
    assign \bitno$next \bitno
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
        switch { \bus_bus_setup \bus_bus_stop }
          case 2'-1
          case 2'1-
            assign \bitno$next 3'000
        end
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            assign \bitno$next $15 [2:0]
        end
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            assign \bitno$next $18 [2:0]
        end
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            assign \bitno$next $21 [2:0]
        end
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
    end
    switch \rst
      case 1'1
        assign \bitno$next 3'000
    end
  end
  wire width 9 $24
  wire width 9 $25
  cell $sshl $26
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 9
    connect \A \shreg_i
    connect \B 1'1
    connect \Y $25
  end
  wire width 9 $27
  cell $or $28
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 9
    connect \A $25
    connect \B \bus_sda_i
    connect \Y $27
  end
  connect $24 $27
  wire width 9 $29
  wire width 9 $30
  cell $sshl $31
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 9
    connect \A \shreg_i
    connect \B 1'1
    connect \Y $30
  end
  wire width 9 $32
  cell $or $33
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 9
    connect \A $30
    connect \B \bus_sda_i
    connect \Y $32
  end
  connect $29 $32
  process $group_2
    assign \shreg_i$next \shreg_i
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
            assign \shreg_i$next $24 [7:0]
          case 4'1---
        end
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
            assign \shreg_i$next $29 [7:0]
          case 4'1---
        end
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
    end
    switch \rst
      case 1'1
        assign \shreg_i$next 8'00000000
    end
  end
  wire width 1 $34
  cell $eq $35
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A \bitno
    connect \B 3'111
    connect \Y $34
  end
  wire width 1 $36
  cell $eq $37
    parameter \A_SIGNED 0
    parameter \A_WIDTH 7
    parameter \B_SIGNED 0
    parameter \B_WIDTH 7
    parameter \Y_WIDTH 1
    connect \A \shreg_i [7:1]
    connect \B \address
    connect \Y $36
  end
  process $group_3
    assign \start 1'0
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { $34 }
              case 1'1
                switch { $36 }
                  case 1'1
                    assign \start 1'1
                  case
                end
            end
        end
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
    end
  end
  wire width 1 $38
  cell $eq $39
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A \bitno
    connect \B 3'111
    connect \Y $38
  end
  wire width 1 $40
  cell $eq $41
    parameter \A_SIGNED 0
    parameter \A_WIDTH 7
    parameter \B_SIGNED 0
    parameter \B_WIDTH 7
    parameter \Y_WIDTH 1
    connect \A \shreg_i [7:1]
    connect \B \address
    connect \Y $40
  end
  wire width 1 $42
  cell $not $43
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \shreg_i [0]
    connect \Y $42
  end
  wire width 1 $44
  cell $not $45
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_scl_i
    connect \Y $44
  end
  wire width 1 $46
  cell $not $47
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_scl_i
    connect \Y $46
  end
  attribute \init 8'00000000
  wire width 8 \shreg_o
  wire width 8 \shreg_o$next
  process $group_4
    assign \bus_sda_o$next \bus_sda_o
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { $38 }
              case 1'1
                switch { $40 }
                  case 1'1
                    assign \bus_sda_o$next 1'0
                  case
                end
            end
        end
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
            switch { $42 }
              case 1'1
                assign \bus_sda_o$next 1'1
            end
          case 4'1---
        end
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
        switch { $44 \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
            assign \bus_sda_o$next 1'1
          case 4'1---
            switch { \ack_o }
              case 1'1
                assign \bus_sda_o$next 1'0
            end
        end
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
        switch { \busy \bus_bus_start \bus_bus_stop }
          case 3'--1
          case 3'-1-
          case 3'1--
          case
            switch { $46 }
              case 1'1
                assign \bus_sda_o$next \shreg_o [7]
            end
        end
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
            assign \bus_sda_o$next \shreg_o [7]
          case 4'1---
        end
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
            assign \bus_sda_o$next 1'1
          case 4'1---
        end
    end
    switch \rst
      case 1'1
        assign \bus_sda_o$next 1'1
    end
  end
  wire width 1 \stop
  wire width 1 $48
  cell $not $49
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_scl_i
    connect \Y $48
  end
  wire width 1 $50
  cell $not $51
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_sda_i
    connect \Y $50
  end
  process $group_5
    assign \stop 1'0
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \stop 1'1
          case 4'--1-
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \stop 1'1
          case 4'--1-
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
        switch { $48 \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \stop 1'1
          case 4'--1-
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
        switch { \busy \bus_bus_start \bus_bus_stop }
          case 3'--1
            assign \stop 1'1
          case 3'-1-
          case 3'1--
          case
        end
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \stop 1'1
          case 4'--1-
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
            assign \stop 1'1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { $50 }
              case 1'1
              case
                assign \stop 1'1
            end
        end
    end
  end
  wire width 1 \restart
  wire width 1 $52
  cell $not $53
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_scl_i
    connect \Y $52
  end
  process $group_6
    assign \restart 1'0
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
            assign \restart 1'1
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
            assign \restart 1'1
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
        switch { $52 \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
            assign \restart 1'1
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
            assign \restart 1'1
          case 4'-1--
          case 4'1---
        end
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
            assign \restart 1'1
          case 4'-1--
          case 4'1---
        end
    end
  end
  wire width 9 $54
  wire width 9 $55
  cell $sshl $56
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 9
    connect \A \shreg_o
    connect \B 1'1
    connect \Y $55
  end
  connect $54 $55
  wire width 1 $57
  cell $not $58
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_sda_i
    connect \Y $57
  end
  process $group_7
    assign \shreg_o$next \shreg_o
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { \shreg_i [0] }
              case 1'1
                assign \shreg_o$next \data_o
            end
        end
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
        switch { \busy }
          case 1'1
            assign \shreg_o$next \data_o
        end
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            assign \shreg_o$next $54 [7:0]
        end
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { $57 }
              case 1'1
                assign \shreg_o$next \data_o
              case
            end
        end
    end
    switch \rst
      case 1'1
        assign \shreg_o$next 8'00000000
    end
  end
  wire width 1 $59
  cell $not $60
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_sda_i
    connect \Y $59
  end
  process $group_8
    assign \read 1'0
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { \shreg_i [0] }
              case 1'1
                assign \read 1'1
            end
        end
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
        switch { \bus_bus_sample \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { $59 }
              case 1'1
                assign \read 1'1
              case
            end
        end
    end
  end
  wire width 1 $61
  cell $eq $62
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A \bitno
    connect \B 3'111
    connect \Y $61
  end
  process $group_9
    assign \data_i$next \data_i
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { $61 }
              case 1'1
                assign \data_i$next \shreg_i
            end
        end
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
    end
    switch \rst
      case 1'1
        assign \data_i$next 8'00000000
    end
  end
  wire width 1 $63
  cell $eq $64
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 3
    parameter \Y_WIDTH 1
    connect \A \bitno
    connect \B 3'111
    connect \Y $63
  end
  process $group_10
    assign \write$next \write
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
        switch { \bus_bus_setup \bus_bus_sample \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            switch { $63 }
              case 1'1
                assign \write$next 1'1
            end
        end
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
        assign \write$next 1'0
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
    end
    switch \rst
      case 1'1
        assign \write$next 1'0
    end
  end
  wire width 1 $65
  cell $not $66
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_scl_i
    connect \Y $65
  end
  wire width 1 $67
  cell $not $68
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \busy
    connect \Y $67
  end
  wire width 1 $69
  cell $not $70
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_scl_i
    connect \Y $69
  end
  process $group_11
    assign \bus_scl_o$next \bus_scl_o
    switch \fsm_state
      attribute \amaranth.decoding "IDLE/0"
      case 4'0000
      attribute \amaranth.decoding "START/1"
      case 4'0001
      attribute \amaranth.decoding "ADDR-SHIFT/2"
      case 4'0010
      attribute \amaranth.decoding "ADDR-ACK/3"
      case 4'0011
      attribute \amaranth.decoding "WRITE-SHIFT/4"
      case 4'0100
      attribute \amaranth.decoding "WRITE-ACK/6"
      case 4'0110
        switch { $65 \bus_bus_setup \bus_bus_start \bus_bus_stop }
          case 4'---1
          case 4'--1-
          case 4'-1--
          case 4'1---
            assign \bus_scl_o$next $67
        end
      attribute \amaranth.decoding "READ-STRETCH/5"
      case 4'0101
        switch { \busy \bus_bus_start \bus_bus_stop }
          case 3'--1
          case 3'-1-
          case 3'1--
            switch { $69 }
              case 1'1
                assign \bus_scl_o$next 1'0
            end
          case
            assign \bus_scl_o$next 1'1
        end
      attribute \amaranth.decoding "READ-SHIFT/7"
      case 4'0111
      attribute \amaranth.decoding "READ-ACK/8"
      case 4'1000
    end
    switch \rst
      case 1'1
        assign \bus_scl_o$next 1'1
    end
  end
  cell $dff $71
    parameter \CLK_POLARITY 1
    parameter \WIDTH 4
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
  cell $dff $72
    parameter \CLK_POLARITY 1
    parameter \WIDTH 3
    connect \CLK \clk
    connect \D \bitno$next
    connect \Q \bitno
  end
  cell $dff $73
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D \shreg_i$next
    connect \Q \shreg_i
  end
  cell $dff $74
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \bus_sda_o$next
    connect \Q \bus_sda_o
  end
  cell $dff $75
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D \shreg_o$next
    connect \Q \shreg_o
  end
  cell $dff $76
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D \data_i$next
    connect \Q \data_i
  end
  cell $dff $77
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \write$next
    connect \Q \write
  end
  cell $dff $78
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \bus_scl_o$next
    connect \Q \bus_scl_o
  end
  connect \busy 1'0
end
attribute \generator "Amaranth"
module \top.registers
  wire width 1 input 0 \start
  wire width 8 output 1 \data_o
  wire width 1 input 2 \read
  wire width 8 input 3 \data_i
  wire width 1 input 4 \write
  wire width 1 output 5 \ack_o
  wire width 1 input 6 \rst
  wire width 1 input 7 \clk
  attribute \init 1'1
  wire width 1 output 8 $signal
  wire width 1 $signal$next
  attribute \init 2'00
  wire width 2 output 9 $signal$1
  wire width 2 $signal$1$next
  attribute \init 8'00000000
  wire width 8 output 10 $signal$2
  wire width 8 $signal$2$next
  attribute \init 8'00000000
  wire width 8 output 11 $signal$3
  wire width 8 $signal$3$next
  attribute \init 8'00000000
  wire width 8 output 12 $signal$4
  wire width 8 $signal$4$next
  attribute \init 8'00000000
  wire width 8 output 13 $signal$5
  wire width 8 $signal$5$next
  attribute \init 8'00000000
  wire width 8 output 14 $signal$6
  wire width 8 $signal$6$next
  attribute \init 8'00000000
  wire width 8 output 15 $signal$7
  wire width 8 $signal$7$next
  attribute \init 8'00000000
  wire width 8 output 16 $signal$8
  wire width 8 $signal$8$next
  attribute \init 8'00000000
  wire width 8 output 17 $signal$9
  wire width 8 $signal$9$next
  attribute \init 8'00000000
  wire width 8 output 18 $signal$10
  wire width 8 $signal$10$next
  attribute \init 8'00000000
  wire width 8 output 19 $signal$11
  wire width 8 $signal$11$next
  attribute \init 1'0
  wire width 1 output 20 $signal$12
  wire width 1 $signal$12$next
  attribute \init 8'00000000
  wire width 8 output 21 $signal$13
  wire width 8 $signal$13$next
  attribute \init 1'0
  wire width 1 output 22 $signal$14
  wire width 1 $signal$14$next
  attribute \init 1'0
  wire width 1 output 23 $signal$15
  wire width 1 $signal$15$next
  attribute \init 8'00000001
  wire width 8 output 24 $signal$16
  wire width 8 $signal$16$next
  attribute \init 8'00000000
  wire width 8 \reg_data
  wire width 8 \reg_data$next
  process $group_0
    assign \data_o 8'00000000
    assign \data_o \reg_data
  end
  attribute \init 1'0
  wire width 1 \latch_addr
  wire width 1 \latch_addr$next
  process $group_1
    assign \latch_addr$next \latch_addr
    switch { \start }
      case 1'1
        assign \latch_addr$next 1'1
    end
    switch { \write }
      case 1'1
        assign \latch_addr$next 1'0
    end
    switch \rst
      case 1'1
        assign \latch_addr$next 1'0
    end
  end
  wire width 1 $17
  cell $lt $18
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 5
    parameter \Y_WIDTH 1
    connect \A \data_i
    connect \B 5'10101
    connect \Y $17
  end
  process $group_2
    assign \ack_o 1'0
    switch { \write }
      case 1'1
        switch { \latch_addr }
          case 1'1
            switch { $17 }
              case 1'1
                assign \ack_o 1'1
            end
          case
            assign \ack_o 1'1
        end
    end
  end
  attribute \init 5'00000
  wire width 5 \reg_addr
  wire width 5 \reg_addr$next
  process $group_3
    assign \reg_addr$next \reg_addr
    switch { \write }
      case 1'1
        switch { \latch_addr }
          case 1'1
            assign \reg_addr$next \data_i [4:0]
          case
        end
    end
    switch \rst
      case 1'1
        assign \reg_addr$next 5'00000
    end
  end
  wire width 8 $19
  cell $pos $20
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 8
    connect \A $signal
    connect \Y $19
  end
  wire width 8 $21
  cell $pos $22
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 8
    connect \A $signal$1
    connect \Y $21
  end
  attribute \init 8'00000000
  wire width 8 $signal$23
  wire width 8 $signal$23$next
  attribute \init 8'00000000
  wire width 8 $signal$24
  wire width 8 $signal$24$next
  wire width 8 $25
  cell $pos $26
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 8
    connect \A $signal$12
    connect \Y $25
  end
  wire width 8 $27
  attribute \init 1'0
  wire width 1 $signal$28
  wire width 1 $signal$28$next
  cell $pos $29
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 8
    connect \A $signal$28
    connect \Y $27
  end
  wire width 8 $30
  attribute \init 1'0
  wire width 1 $signal$31
  wire width 1 $signal$31$next
  cell $pos $32
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 8
    connect \A $signal$31
    connect \Y $30
  end
  wire width 8 $33
  cell $pos $34
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 8
    connect \A $signal$14
    connect \Y $33
  end
  wire width 8 $35
  cell $pos $36
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 8
    connect \A $signal$15
    connect \Y $35
  end
  wire width 8 $37
  cell $sshr $38
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 4
    parameter \Y_WIDTH 8
    connect \A \reg_data
    connect \B 4'1000
    connect \Y $37
  end
  process $group_4
    assign \reg_data$next \reg_data
    switch { \write }
      case 1'1
        switch { \latch_addr }
          case 1'1
            switch \data_i
              case 8'00000000
                assign \reg_data$next $19
              case 8'00000001
                assign \reg_data$next $21
              case 8'00000010
                assign \reg_data$next $signal$2
              case 8'00000011
                assign \reg_data$next $signal$3
              case 8'00000100
                assign \reg_data$next $signal$4
              case 8'00000101
                assign \reg_data$next $signal$5
              case 8'00000110
                assign \reg_data$next $signal$6
              case 8'00000111
                assign \reg_data$next $signal$7
              case 8'00001000
                assign \reg_data$next $signal$23
              case 8'00001001
                assign \reg_data$next $signal$8
              case 8'00001010
                assign \reg_data$next $signal$9
              case 8'00001011
                assign \reg_data$next $signal$10
              case 8'00001100
                assign \reg_data$next $signal$24
              case 8'00001101
                assign \reg_data$next $signal$11
              case 8'00001110
                assign \reg_data$next $25
              case 8'00001111
                assign \reg_data$next $27
              case 8'00010000
                assign \reg_data$next $30
              case 8'00010001
                assign \reg_data$next $signal$13
              case 8'00010010
                assign \reg_data$next $33
              case 8'00010011
                assign \reg_data$next $35
              case 8'--------
                assign \reg_data$next $signal$16
            end
          case
            assign \reg_data$next { \reg_data \data_i } [7:0]
        end
    end
    switch { \read }
      case 1'1
        assign \reg_data$next $37
    end
    switch \rst
      case 1'1
        assign \reg_data$next 8'00000000
    end
  end
  wire width 7 $39
  wire width 6 $40
  wire width 7 $41
  wire width 7 $42
  wire width 7 $43
  wire width 7 $44
  wire width 7 $45
  process $group_5
    assign $signal$next $signal
    assign $signal$1$next $signal$1
    assign $signal$2$next $signal$2
    assign $signal$3$next $signal$3
    assign $signal$4$next $signal$4
    assign $signal$5$next $signal$5
    assign $signal$6$next $signal$6
    assign $signal$7$next $signal$7
    assign $signal$23$next $signal$23
    assign $signal$8$next $signal$8
    assign $signal$9$next $signal$9
    assign $signal$10$next $signal$10
    assign $signal$24$next $signal$24
    assign $signal$11$next $signal$11
    assign $signal$12$next $signal$12
    assign $signal$28$next $signal$28
    assign $signal$31$next $signal$31
    assign $signal$13$next $signal$13
    assign $signal$14$next $signal$14
    assign $signal$15$next $signal$15
    assign $signal$16$next $signal$16
    switch { \write }
      case 1'1
        switch { \latch_addr }
          case 1'1
          case
            switch \reg_addr
              case 5'00000
                assign { $39 $signal$next } { \reg_data \data_i } [7:0]
              case 5'00001
                assign { $40 $signal$1$next } { \reg_data \data_i } [7:0]
              case 5'00010
                assign $signal$2$next { \reg_data \data_i } [7:0]
              case 5'00011
                assign $signal$3$next { \reg_data \data_i } [7:0]
              case 5'00100
                assign $signal$4$next { \reg_data \data_i } [7:0]
              case 5'00101
                assign $signal$5$next { \reg_data \data_i } [7:0]
              case 5'00110
                assign $signal$6$next { \reg_data \data_i } [7:0]
              case 5'00111
                assign $signal$7$next { \reg_data \data_i } [7:0]
              case 5'01000
                assign $signal$23$next { \reg_data \data_i } [7:0]
              case 5'01001
                assign $signal$8$next { \reg_data \data_i } [7:0]
              case 5'01010
                assign $signal$9$next { \reg_data \data_i } [7:0]
              case 5'01011
                assign $signal$10$next { \reg_data \data_i } [7:0]
              case 5'01100
                assign $signal$24$next { \reg_data \data_i } [7:0]
              case 5'01101
                assign $signal$11$next { \reg_data \data_i } [7:0]
              case 5'01110
                assign { $41 $signal$12$next } { \reg_data \data_i } [7:0]
              case 5'01111
                assign { $42 $signal$28$next } { \reg_data \data_i } [7:0]
              case 5'10000
                assign { $43 $signal$31$next } { \reg_data \data_i } [7:0]
              case 5'10001
                assign $signal$13$next { \reg_data \data_i } [7:0]
              case 5'10010
                assign { $44 $signal$14$next } { \reg_data \data_i } [7:0]
              case 5'10011
                assign { $45 $signal$15$next } { \reg_data \data_i } [7:0]
              case 5'-----
                assign $signal$16$next { \reg_data \data_i } [7:0]
            end
        end
    end
    switch \rst
      case 1'1
        assign $signal$next 1'1
        assign $signal$1$next 2'00
        assign $signal$2$next 8'00000000
        assign $signal$3$next 8'00000000
        assign $signal$4$next 8'00000000
        assign $signal$5$next 8'00000000
        assign $signal$6$next 8'00000000
        assign $signal$7$next 8'00000000
        assign $signal$23$next 8'00000000
        assign $signal$8$next 8'00000000
        assign $signal$9$next 8'00000000
        assign $signal$10$next 8'00000000
        assign $signal$24$next 8'00000000
        assign $signal$11$next 8'00000000
        assign $signal$12$next 1'0
        assign $signal$28$next 1'0
        assign $signal$31$next 1'0
        assign $signal$13$next 8'00000000
        assign $signal$14$next 1'0
        assign $signal$15$next 1'0
        assign $signal$16$next 8'00000001
    end
  end
  cell $dff $46
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \latch_addr$next
    connect \Q \latch_addr
  end
  cell $dff $47
    parameter \CLK_POLARITY 1
    parameter \WIDTH 5
    connect \CLK \clk
    connect \D \reg_addr$next
    connect \Q \reg_addr
  end
  cell $dff $48
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D \reg_data$next
    connect \Q \reg_data
  end
  cell $dff $49
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D $signal$next
    connect \Q $signal
  end
  cell $dff $50
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D $signal$1$next
    connect \Q $signal$1
  end
  cell $dff $51
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$2$next
    connect \Q $signal$2
  end
  cell $dff $52
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$3$next
    connect \Q $signal$3
  end
  cell $dff $53
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$4$next
    connect \Q $signal$4
  end
  cell $dff $54
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$5$next
    connect \Q $signal$5
  end
  cell $dff $55
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$6$next
    connect \Q $signal$6
  end
  cell $dff $56
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$7$next
    connect \Q $signal$7
  end
  cell $dff $57
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$23$next
    connect \Q $signal$23
  end
  cell $dff $58
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$8$next
    connect \Q $signal$8
  end
  cell $dff $59
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$9$next
    connect \Q $signal$9
  end
  cell $dff $60
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$10$next
    connect \Q $signal$10
  end
  cell $dff $61
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$24$next
    connect \Q $signal$24
  end
  cell $dff $62
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$11$next
    connect \Q $signal$11
  end
  cell $dff $63
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D $signal$12$next
    connect \Q $signal$12
  end
  cell $dff $64
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D $signal$28$next
    connect \Q $signal$28
  end
  cell $dff $65
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D $signal$31$next
    connect \Q $signal$31
  end
  cell $dff $66
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$13$next
    connect \Q $signal$13
  end
  cell $dff $67
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D $signal$14$next
    connect \Q $signal$14
  end
  cell $dff $68
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D $signal$15$next
    connect \Q $signal$15
  end
  cell $dff $69
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D $signal$16$next
    connect \Q $signal$16
  end
end
attribute \generator "Amaranth"
module \top.fx2_crossbar.bus
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 4 output 2 \flag
  attribute \init 4'0000
  wire width 4 output 3 \nrdy_o
  wire width 4 \nrdy_o$next
  wire width 8 input 4 \data__o
  wire width 2 input 5 \addr
  attribute \init 2'00
  wire width 2 output 6 \addr_p
  wire width 2 \addr_p$next
  wire width 8 output 7 \data__i
  wire width 1 input 8 \slwr
  wire width 1 input 9 \pend
  wire width 4 input 10 \nrdy_i
  attribute \init 1'0
  wire width 1 output 11 \slrd_p
  wire width 1 \slrd_p$next
  wire width 1 input 12 \sloe
  wire width 1 input 13 \data__oe
  wire width 1 input 14 \slrd
  wire width 1 output 15 \fx2_0__flag__i_clk
  wire width 4 input 16 \fx2_0__flag__i1
  wire width 1 output 17 \fx2_0__fifoadr__o_clk
  wire width 2 output 18 \fx2_0__fifoadr__o
  wire width 1 output 19 \fx2_0__fd__o_clk
  wire width 1 output 20 \fx2_0__fd__oe
  wire width 8 output 21 \fx2_0__fd__o0
  wire width 8 output 22 \fx2_0__fd__o1
  wire width 1 output 23 \fx2_0__fd__i_clk
  wire width 8 input 24 \fx2_0__fd__i1
  wire width 1 output 25 \fx2_0__sloe__o_clk
  wire width 1 output 26 \fx2_0__sloe__o
  wire width 1 output 27 \fx2_0__slrd__o_clk
  wire width 1 output 28 \fx2_0__slrd__o
  wire width 1 output 29 \fx2_0__slwr__o_clk
  wire width 1 output 30 \fx2_0__slwr__o
  wire width 1 output 31 \fx2_0__pktend__o_clk
  wire width 1 output 32 \fx2_0__pktend__o
  process $group_0
    assign \fx2_0__flag__i_clk 1'0
    assign \fx2_0__flag__i_clk \clk
  end
  process $group_1
    assign \flag 4'0000
    assign \flag \fx2_0__flag__i1
  end
  process $group_2
    assign \fx2_0__fifoadr__o_clk 1'0
    assign \fx2_0__fifoadr__o_clk \clk
  end
  process $group_3
    assign \fx2_0__fifoadr__o 2'00
    assign \fx2_0__fifoadr__o \addr
  end
  process $group_4
    assign \fx2_0__fd__o_clk 1'0
    assign \fx2_0__fd__o_clk \clk
  end
  process $group_5
    assign \fx2_0__fd__oe 1'0
    assign \fx2_0__fd__oe \data__oe
  end
  process $group_6
    assign \fx2_0__fd__o0 8'00000000
    assign \fx2_0__fd__o0 \data__o
  end
  process $group_7
    assign \fx2_0__fd__o1 8'00000000
    assign \fx2_0__fd__o1 \data__o
  end
  process $group_8
    assign \fx2_0__fd__i_clk 1'0
    assign \fx2_0__fd__i_clk \clk
  end
  process $group_9
    assign \data__i 8'00000000
    assign \data__i \fx2_0__fd__i1
  end
  process $group_10
    assign \fx2_0__sloe__o_clk 1'0
    assign \fx2_0__sloe__o_clk \clk
  end
  wire width 1 $1
  cell $not $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \sloe
    connect \Y $1
  end
  process $group_11
    assign \fx2_0__sloe__o 1'0
    assign \fx2_0__sloe__o $1
  end
  process $group_12
    assign \fx2_0__slrd__o_clk 1'0
    assign \fx2_0__slrd__o_clk \clk
  end
  wire width 1 $3
  cell $not $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \slrd
    connect \Y $3
  end
  process $group_13
    assign \fx2_0__slrd__o 1'0
    assign \fx2_0__slrd__o $3
  end
  process $group_14
    assign \fx2_0__slwr__o_clk 1'0
    assign \fx2_0__slwr__o_clk \clk
  end
  wire width 1 $5
  cell $not $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \slwr
    connect \Y $5
  end
  process $group_15
    assign \fx2_0__slwr__o 1'0
    assign \fx2_0__slwr__o $5
  end
  process $group_16
    assign \fx2_0__pktend__o_clk 1'0
    assign \fx2_0__pktend__o_clk \clk
  end
  wire width 1 $7
  cell $not $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \pend
    connect \Y $7
  end
  process $group_17
    assign \fx2_0__pktend__o 1'0
    assign \fx2_0__pktend__o $7
  end
  attribute \init 2'00
  wire width 2 \addr_r
  wire width 2 \addr_r$next
  process $group_18
    assign \addr_r$next \addr_r
    assign \addr_r$next \addr
    switch \rst
      case 1'1
        assign \addr_r$next 2'00
    end
  end
  process $group_19
    assign \addr_p$next \addr_p
    assign \addr_p$next \addr_r
    switch \rst
      case 1'1
        assign \addr_p$next 2'00
    end
  end
  attribute \init 1'0
  wire width 1 \slrd_r
  wire width 1 \slrd_r$next
  process $group_20
    assign \slrd_r$next \slrd_r
    assign \slrd_r$next \slrd
    switch \rst
      case 1'1
        assign \slrd_r$next 1'0
    end
  end
  process $group_21
    assign \slrd_p$next \slrd_p
    assign \slrd_p$next \slrd_r
    switch \rst
      case 1'1
        assign \slrd_p$next 1'0
    end
  end
  attribute \init 4'0000
  wire width 4 \nrdy_r
  wire width 4 \nrdy_r$next
  process $group_22
    assign \nrdy_r$next \nrdy_r
    assign \nrdy_r$next \nrdy_i
    switch \rst
      case 1'1
        assign \nrdy_r$next 4'0000
    end
  end
  wire width 4 $9
  cell $or $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 4
    parameter \Y_WIDTH 4
    connect \A \nrdy_r
    connect \B \nrdy_i
    connect \Y $9
  end
  process $group_23
    assign \nrdy_o$next \nrdy_o
    assign \nrdy_o$next $9
    switch \rst
      case 1'1
        assign \nrdy_o$next 4'0000
    end
  end
  cell $dff $11
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \addr_r$next
    connect \Q \addr_r
  end
  cell $dff $12
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \addr_p$next
    connect \Q \addr_p
  end
  cell $dff $13
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \slrd_r$next
    connect \Q \slrd_r
  end
  cell $dff $14
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \slrd_p$next
    connect \Q \slrd_p
  end
  cell $dff $15
    parameter \CLK_POLARITY 1
    parameter \WIDTH 4
    connect \CLK \clk
    connect \D \nrdy_r$next
    connect \Q \nrdy_r
  end
  cell $dff $16
    parameter \CLK_POLARITY 1
    parameter \WIDTH 4
    connect \CLK \clk
    connect \D \nrdy_o$next
    connect \Q \nrdy_o
  end
end
attribute \generator "Amaranth"
module \top.fx2_crossbar.in_fifo_0.inner
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  attribute \init 1'0
  wire width 1 output 3 \r_rdy
  wire width 1 \r_rdy$next
  wire width 8 output 4 \r_data
  wire width 1 input 5 \r_en
  wire width 1 output 6 \w_rdy
  wire width 8 input 7 \w_data
  wire width 1 input 8 \w_en
  wire width 1 \storage_r_en
  wire width 9 \storage_r_addr
  wire width 8 \storage_r_data
  wire width 1 \storage_w_en
  wire width 9 \storage_w_addr
  wire width 8 \storage_w_data
  cell $mem_v2 \storage
    parameter \SIZE 511
    parameter \OFFSET 0
    parameter \ABITS 9
    parameter \WIDTH 8
    parameter
    parameter \RD_PORTS 1
    parameter \RD_CLK_ENABLE 1'1
    parameter \RD_CLK_POLARITY 1'1
    parameter \RD_TRANSPARENCY_MASK 1'0
    parameter \RD_COLLISION_X_MASK 1'0
    parameter \RD_WIDE_CONTINUATION 1'0
    parameter \RD_CE_OVER_SRST 1'0
    parameter \RD_ARST_VALUE 8'00000000
    parameter \RD_SRST_VALUE 8'00000000
    parameter \RD_INIT_VALUE 8'00000000
    parameter \WR_PORTS 1
    parameter \WR_CLK_ENABLE 1'1
    parameter \WR_CLK_POLARITY 1'1
    parameter \WR_PRIORITY_MASK 1'0
    parameter \WR_WIDE_CONTINUATION 1'0
    parameter \MEMID "\\storage"
    connect \RD_CLK { \clk }
    connect \RD_EN { \storage_r_en }
    connect \RD_ARST 1'0
    connect \RD_SRST 1'0
    connect \RD_ADDR { \storage_r_addr }
    connect \RD_DATA { \storage_r_data }
    connect \WR_CLK { \clk }
    connect \WR_EN { { { \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en } } }
    connect \WR_ADDR { \storage_w_addr }
    connect \WR_DATA { \storage_w_data }
  end
  wire width 10 \w_level
  wire width 10 \level
  process $group_0
    assign \w_level 10'0000000000
    assign \w_level \level
  end
  wire width 10 \r_level
  process $group_1
    assign \r_level 10'0000000000
    assign \r_level \level
  end
  attribute \init 9'000000000
  wire width 9 \inner_level
  wire width 9 \inner_level$next
  wire width 1 $1
  cell $ne $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 9
    parameter \Y_WIDTH 1
    connect \A \inner_level
    connect \B 9'111111111
    connect \Y $1
  end
  process $group_2
    assign \w_rdy 1'0
    assign \w_rdy $1
  end
  wire width 1 \inner_r_rdy
  wire width 1 $3
  cell $ne $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_level
    connect \B 1'0
    connect \Y $3
  end
  process $group_3
    assign \inner_r_rdy 1'0
    assign \inner_r_rdy $3
  end
  attribute \init 9'000000000
  wire width 9 \produce
  wire width 9 \produce$next
  process $group_4
    assign \storage_w_addr 9'000000000
    assign \storage_w_addr \produce
  end
  process $group_5
    assign \storage_w_data 8'00000000
    assign \storage_w_data \w_data
  end
  wire width 1 $5
  cell $and $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $5
  end
  process $group_6
    assign \storage_w_en 1'0
    assign \storage_w_en $5
  end
  wire width 1 $7
  cell $and $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $7
  end
  wire width 10 $9
  wire width 10 $10
  cell $add $11
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \produce
    connect \B 1'1
    connect \Y $10
  end
  wire width 10 $12
  wire width 1 $13
  cell $eq $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 9
    parameter \Y_WIDTH 1
    connect \A \produce
    connect \B 9'111111110
    connect \Y $13
  end
  cell $mux $15
    parameter \WIDTH 10
    connect \A $10
    connect \B 10'0000000000
    connect \S $13
    connect \Y $12
  end
  connect $9 $12
  process $group_7
    assign \produce$next \produce
    switch { $7 }
      case 1'1
        assign \produce$next $9 [8:0]
    end
    switch $signal
      case 1'1
        assign \produce$next 9'000000000
    end
    switch \rst
      case 1'1
        assign \produce$next 9'000000000
    end
  end
  attribute \init 9'000000000
  wire width 9 \consume
  wire width 9 \consume$next
  process $group_8
    assign \storage_r_addr 9'000000000
    assign \storage_r_addr \consume
  end
  process $group_9
    assign \r_data 8'00000000
    assign \r_data \storage_r_data
  end
  wire width 1 $16
  cell $not $17
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $16
  end
  wire width 1 $18
  cell $or $19
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $16
    connect \B \r_en
    connect \Y $18
  end
  wire width 1 $20
  cell $and $21
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $18
    connect \Y $20
  end
  process $group_10
    assign \storage_r_en 1'1
    assign \storage_r_en $20
  end
  wire width 1 $22
  cell $not $23
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $22
  end
  wire width 1 $24
  cell $or $25
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $22
    connect \B \r_en
    connect \Y $24
  end
  wire width 1 $26
  cell $and $27
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $24
    connect \Y $26
  end
  wire width 10 $28
  wire width 10 $29
  cell $add $30
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \consume
    connect \B 1'1
    connect \Y $29
  end
  wire width 10 $31
  wire width 1 $32
  cell $eq $33
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 9
    parameter \Y_WIDTH 1
    connect \A \consume
    connect \B 9'111111110
    connect \Y $32
  end
  cell $mux $34
    parameter \WIDTH 10
    connect \A $29
    connect \B 10'0000000000
    connect \S $32
    connect \Y $31
  end
  connect $28 $31
  process $group_11
    assign \consume$next \consume
    switch { $26 }
      case 1'1
        assign \consume$next $28 [8:0]
    end
    switch $signal
      case 1'1
        assign \consume$next 9'000000000
    end
    switch \rst
      case 1'1
        assign \consume$next 9'000000000
    end
  end
  wire width 1 $35
  cell $and $36
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $35
  end
  wire width 1 $37
  wire width 1 $38
  cell $not $39
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $38
  end
  wire width 1 $40
  cell $or $41
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $38
    connect \B \r_en
    connect \Y $40
  end
  wire width 1 $42
  cell $and $43
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $40
    connect \Y $42
  end
  cell $not $44
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $42
    connect \Y $37
  end
  wire width 1 $45
  cell $and $46
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $35
    connect \B $37
    connect \Y $45
  end
  wire width 10 $47
  wire width 10 $48
  cell $add $49
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \inner_level
    connect \B 1'1
    connect \Y $48
  end
  connect $47 $48
  wire width 1 $50
  cell $not $51
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $50
  end
  wire width 1 $52
  cell $or $53
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $50
    connect \B \r_en
    connect \Y $52
  end
  wire width 1 $54
  cell $and $55
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $52
    connect \Y $54
  end
  wire width 1 $56
  wire width 1 $57
  cell $and $58
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $57
  end
  cell $not $59
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $57
    connect \Y $56
  end
  wire width 1 $60
  cell $and $61
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $54
    connect \B $56
    connect \Y $60
  end
  wire width 10 $62
  wire width 10 $63
  cell $sub $64
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \inner_level
    connect \B 1'1
    connect \Y $63
  end
  connect $62 $63
  process $group_12
    assign \inner_level$next \inner_level
    switch { $45 }
      case 1'1
        assign \inner_level$next $47 [8:0]
    end
    switch { $60 }
      case 1'1
        assign \inner_level$next $62 [8:0]
    end
    switch $signal
      case 1'1
        assign \inner_level$next 9'000000000
    end
    switch \rst
      case 1'1
        assign \inner_level$next 9'000000000
    end
  end
  wire width 1 $65
  cell $not $66
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $65
  end
  wire width 1 $67
  cell $or $68
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $65
    connect \B \r_en
    connect \Y $67
  end
  wire width 1 $69
  cell $and $70
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $67
    connect \Y $69
  end
  process $group_13
    assign \r_rdy$next \r_rdy
    switch { \r_en $69 }
      case 2'-1
        assign \r_rdy$next 1'1
      case 2'1-
        assign \r_rdy$next 1'0
    end
    switch $signal
      case 1'1
        assign \r_rdy$next 1'0
    end
    switch \rst
      case 1'1
        assign \r_rdy$next 1'0
    end
  end
  wire width 10 $71
  cell $add $72
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \inner_level
    connect \B \r_rdy
    connect \Y $71
  end
  process $group_14
    assign \level 10'0000000000
    assign \level $71
  end
  cell $dff $73
    parameter \CLK_POLARITY 1
    parameter \WIDTH 9
    connect \CLK \clk
    connect \D \produce$next
    connect \Q \produce
  end
  cell $dff $74
    parameter \CLK_POLARITY 1
    parameter \WIDTH 9
    connect \CLK \clk
    connect \D \consume$next
    connect \Q \consume
  end
  cell $dff $75
    parameter \CLK_POLARITY 1
    parameter \WIDTH 9
    connect \CLK \clk
    connect \D \inner_level$next
    connect \Q \inner_level
  end
  cell $dff $76
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \r_rdy$next
    connect \Q \r_rdy
  end
end
attribute \generator "Amaranth"
module \top.fx2_crossbar.in_fifo_0
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \r_rdy
  wire width 1 output 4 \pending
  wire width 8 output 5 \r_data
  wire width 1 input 6 \r_en
  wire width 1 input 7 \flushed
  wire width 1 output 8 \complete
  wire width 1 output 9 \w_rdy
  wire width 8 input 10 \w_data
  wire width 1 input 11 \w_en
  cell \top.fx2_crossbar.in_fifo_0.inner \inner
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \r_rdy \r_rdy
    connect \r_data \r_data
    connect \r_en \r_en
    connect \w_rdy \w_rdy
    connect \w_data \w_data
    connect \w_en \w_en
  end
  attribute \init 10'0000000000
  wire width 10 \queued
  wire width 10 \queued$next
  wire width 1 $1
  cell $and $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \B \r_en
    connect \Y $1
  end
  wire width 11 $3
  wire width 11 $4
  cell $add $5
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 11
    connect \A \queued
    connect \B 1'1
    connect \Y $4
  end
  connect $3 $4
  process $group_0
    assign \queued$next \queued
    switch { $1 \flushed }
      case 2'-1
        assign \queued$next 10'0000000000
      case 2'1-
        assign \queued$next $3 [9:0]
    end
    switch $signal
      case 1'1
        assign \queued$next 10'0000000000
    end
    switch \rst
      case 1'1
        assign \queued$next 10'0000000000
    end
  end
  attribute \init 1'0
  wire width 1 \_pending
  wire width 1 \_pending$next
  wire width 1 $6
  cell $and $7
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \B \r_en
    connect \Y $6
  end
  wire width 1 $8
  cell $lt $9
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 10
    parameter \Y_WIDTH 1
    connect \A \queued
    connect \B 10'1000000000
    connect \Y $8
  end
  process $group_1
    assign \_pending$next \_pending
    switch { $6 \flushed }
      case 2'-1
        switch { $8 }
          case 1'1
            assign \_pending$next 1'0
        end
      case 2'1-
        assign \_pending$next 1'1
    end
    switch $signal
      case 1'1
        assign \_pending$next 1'0
    end
    switch \rst
      case 1'1
        assign \_pending$next 1'0
    end
  end
  wire width 1 $10
  cell $ge $11
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 10
    parameter \Y_WIDTH 1
    connect \A \queued
    connect \B 10'1000000000
    connect \Y $10
  end
  process $group_2
    assign \complete 1'0
    assign \complete $10
  end
  wire width 1 \flush
  wire width 1 $12
  cell $and $13
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_pending
    connect \B \flush
    connect \Y $12
  end
  process $group_3
    assign \pending 1'0
    assign \pending $12
  end
  cell $dff $14
    parameter \CLK_POLARITY 1
    parameter \WIDTH 10
    connect \CLK \clk
    connect \D \queued$next
    connect \Q \queued
  end
  cell $dff $15
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \_pending$next
    connect \Q \_pending
  end
  connect \flush 1'0
end
attribute \generator "Amaranth"
module \top.fx2_crossbar.out_fifo_0.inner
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \w_rdy
  wire width 8 input 4 \w_data
  wire width 1 input 5 \w_en
  wire width 8 output 6 \r_data
  attribute \init 1'0
  wire width 1 output 7 \r_rdy
  wire width 1 \r_rdy$next
  wire width 1 input 8 \r_en
  wire width 1 \storage_r_en
  wire width 9 \storage_r_addr
  wire width 8 \storage_r_data
  wire width 1 \storage_w_en
  wire width 9 \storage_w_addr
  wire width 8 \storage_w_data
  cell $mem_v2 \storage
    parameter \SIZE 511
    parameter \OFFSET 0
    parameter \ABITS 9
    parameter \WIDTH 8
    parameter
    parameter \RD_PORTS 1
    parameter \RD_CLK_ENABLE 1'1
    parameter \RD_CLK_POLARITY 1'1
    parameter \RD_TRANSPARENCY_MASK 1'0
    parameter \RD_COLLISION_X_MASK 1'0
    parameter \RD_WIDE_CONTINUATION 1'0
    parameter \RD_CE_OVER_SRST 1'0
    parameter \RD_ARST_VALUE 8'00000000
    parameter \RD_SRST_VALUE 8'00000000
    parameter \RD_INIT_VALUE 8'00000000
    parameter \WR_PORTS 1
    parameter \WR_CLK_ENABLE 1'1
    parameter \WR_CLK_POLARITY 1'1
    parameter \WR_PRIORITY_MASK 1'0
    parameter \WR_WIDE_CONTINUATION 1'0
    parameter \MEMID "\\storage$1"
    connect \RD_CLK { \clk }
    connect \RD_EN { \storage_r_en }
    connect \RD_ARST 1'0
    connect \RD_SRST 1'0
    connect \RD_ADDR { \storage_r_addr }
    connect \RD_DATA { \storage_r_data }
    connect \WR_CLK { \clk }
    connect \WR_EN { { { \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en } } }
    connect \WR_ADDR { \storage_w_addr }
    connect \WR_DATA { \storage_w_data }
  end
  wire width 10 \w_level
  wire width 10 \level
  process $group_0
    assign \w_level 10'0000000000
    assign \w_level \level
  end
  wire width 10 \r_level
  process $group_1
    assign \r_level 10'0000000000
    assign \r_level \level
  end
  attribute \init 9'000000000
  wire width 9 \inner_level
  wire width 9 \inner_level$next
  wire width 1 $1
  cell $ne $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 9
    parameter \Y_WIDTH 1
    connect \A \inner_level
    connect \B 9'111111111
    connect \Y $1
  end
  process $group_2
    assign \w_rdy 1'0
    assign \w_rdy $1
  end
  wire width 1 \inner_r_rdy
  wire width 1 $3
  cell $ne $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_level
    connect \B 1'0
    connect \Y $3
  end
  process $group_3
    assign \inner_r_rdy 1'0
    assign \inner_r_rdy $3
  end
  attribute \init 9'000000000
  wire width 9 \produce
  wire width 9 \produce$next
  process $group_4
    assign \storage_w_addr 9'000000000
    assign \storage_w_addr \produce
  end
  process $group_5
    assign \storage_w_data 8'00000000
    assign \storage_w_data \w_data
  end
  wire width 1 $5
  cell $and $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $5
  end
  process $group_6
    assign \storage_w_en 1'0
    assign \storage_w_en $5
  end
  wire width 1 $7
  cell $and $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $7
  end
  wire width 10 $9
  wire width 10 $10
  cell $add $11
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \produce
    connect \B 1'1
    connect \Y $10
  end
  wire width 10 $12
  wire width 1 $13
  cell $eq $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 9
    parameter \Y_WIDTH 1
    connect \A \produce
    connect \B 9'111111110
    connect \Y $13
  end
  cell $mux $15
    parameter \WIDTH 10
    connect \A $10
    connect \B 10'0000000000
    connect \S $13
    connect \Y $12
  end
  connect $9 $12
  process $group_7
    assign \produce$next \produce
    switch { $7 }
      case 1'1
        assign \produce$next $9 [8:0]
    end
    switch $signal
      case 1'1
        assign \produce$next 9'000000000
    end
    switch \rst
      case 1'1
        assign \produce$next 9'000000000
    end
  end
  attribute \init 9'000000000
  wire width 9 \consume
  wire width 9 \consume$next
  process $group_8
    assign \storage_r_addr 9'000000000
    assign \storage_r_addr \consume
  end
  process $group_9
    assign \r_data 8'00000000
    assign \r_data \storage_r_data
  end
  wire width 1 $16
  cell $not $17
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $16
  end
  wire width 1 $18
  cell $or $19
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $16
    connect \B \r_en
    connect \Y $18
  end
  wire width 1 $20
  cell $and $21
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $18
    connect \Y $20
  end
  process $group_10
    assign \storage_r_en 1'1
    assign \storage_r_en $20
  end
  wire width 1 $22
  cell $not $23
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $22
  end
  wire width 1 $24
  cell $or $25
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $22
    connect \B \r_en
    connect \Y $24
  end
  wire width 1 $26
  cell $and $27
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $24
    connect \Y $26
  end
  wire width 10 $28
  wire width 10 $29
  cell $add $30
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \consume
    connect \B 1'1
    connect \Y $29
  end
  wire width 10 $31
  wire width 1 $32
  cell $eq $33
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 9
    parameter \Y_WIDTH 1
    connect \A \consume
    connect \B 9'111111110
    connect \Y $32
  end
  cell $mux $34
    parameter \WIDTH 10
    connect \A $29
    connect \B 10'0000000000
    connect \S $32
    connect \Y $31
  end
  connect $28 $31
  process $group_11
    assign \consume$next \consume
    switch { $26 }
      case 1'1
        assign \consume$next $28 [8:0]
    end
    switch $signal
      case 1'1
        assign \consume$next 9'000000000
    end
    switch \rst
      case 1'1
        assign \consume$next 9'000000000
    end
  end
  wire width 1 $35
  cell $and $36
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $35
  end
  wire width 1 $37
  wire width 1 $38
  cell $not $39
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $38
  end
  wire width 1 $40
  cell $or $41
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $38
    connect \B \r_en
    connect \Y $40
  end
  wire width 1 $42
  cell $and $43
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $40
    connect \Y $42
  end
  cell $not $44
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $42
    connect \Y $37
  end
  wire width 1 $45
  cell $and $46
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $35
    connect \B $37
    connect \Y $45
  end
  wire width 10 $47
  wire width 10 $48
  cell $add $49
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \inner_level
    connect \B 1'1
    connect \Y $48
  end
  connect $47 $48
  wire width 1 $50
  cell $not $51
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $50
  end
  wire width 1 $52
  cell $or $53
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $50
    connect \B \r_en
    connect \Y $52
  end
  wire width 1 $54
  cell $and $55
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $52
    connect \Y $54
  end
  wire width 1 $56
  wire width 1 $57
  cell $and $58
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $57
  end
  cell $not $59
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $57
    connect \Y $56
  end
  wire width 1 $60
  cell $and $61
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $54
    connect \B $56
    connect \Y $60
  end
  wire width 10 $62
  wire width 10 $63
  cell $sub $64
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \inner_level
    connect \B 1'1
    connect \Y $63
  end
  connect $62 $63
  process $group_12
    assign \inner_level$next \inner_level
    switch { $45 }
      case 1'1
        assign \inner_level$next $47 [8:0]
    end
    switch { $60 }
      case 1'1
        assign \inner_level$next $62 [8:0]
    end
    switch $signal
      case 1'1
        assign \inner_level$next 9'000000000
    end
    switch \rst
      case 1'1
        assign \inner_level$next 9'000000000
    end
  end
  wire width 1 $65
  cell $not $66
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \Y $65
  end
  wire width 1 $67
  cell $or $68
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $65
    connect \B \r_en
    connect \Y $67
  end
  wire width 1 $69
  cell $and $70
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_r_rdy
    connect \B $67
    connect \Y $69
  end
  process $group_13
    assign \r_rdy$next \r_rdy
    switch { \r_en $69 }
      case 2'-1
        assign \r_rdy$next 1'1
      case 2'1-
        assign \r_rdy$next 1'0
    end
    switch $signal
      case 1'1
        assign \r_rdy$next 1'0
    end
    switch \rst
      case 1'1
        assign \r_rdy$next 1'0
    end
  end
  wire width 10 $71
  cell $add $72
    parameter \A_SIGNED 0
    parameter \A_WIDTH 9
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 10
    connect \A \inner_level
    connect \B \r_rdy
    connect \Y $71
  end
  process $group_14
    assign \level 10'0000000000
    assign \level $71
  end
  cell $dff $73
    parameter \CLK_POLARITY 1
    parameter \WIDTH 9
    connect \CLK \clk
    connect \D \produce$next
    connect \Q \produce
  end
  cell $dff $74
    parameter \CLK_POLARITY 1
    parameter \WIDTH 9
    connect \CLK \clk
    connect \D \consume$next
    connect \Q \consume
  end
  cell $dff $75
    parameter \CLK_POLARITY 1
    parameter \WIDTH 9
    connect \CLK \clk
    connect \D \inner_level$next
    connect \Q \inner_level
  end
  cell $dff $76
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \r_rdy$next
    connect \Q \r_rdy
  end
end
attribute \generator "Amaranth"
module \top.fx2_crossbar.out_fifo_0.skid
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \r_rdy
  wire width 8 output 4 \r_data
  wire width 1 input 5 \r_en
  wire width 8 input 6 \w_data
  wire width 1 input 7 \w_en
  wire width 1 output 8 \w_rdy
  wire width 2 \storage_r_addr
  wire width 8 \storage_r_data
  wire width 1 \storage_w_en
  wire width 2 \storage_w_addr
  wire width 8 \storage_w_data
  cell $mem_v2 \r_port
    parameter \SIZE 3
    parameter \OFFSET 0
    parameter \ABITS 2
    parameter \WIDTH 8
    parameter \INIT 24'000000000000000000000000
    parameter \RD_PORTS 1
    parameter \RD_CLK_ENABLE 1'0
    parameter \RD_CLK_POLARITY 1'1
    parameter \RD_TRANSPARENCY_MASK 1'0
    parameter \RD_COLLISION_X_MASK 1'0
    parameter \RD_WIDE_CONTINUATION 1'0
    parameter \RD_CE_OVER_SRST 1'0
    parameter \RD_ARST_VALUE 8'00000000
    parameter \RD_SRST_VALUE 8'00000000
    parameter \RD_INIT_VALUE 8'00000000
    parameter \WR_PORTS 1
    parameter \WR_CLK_ENABLE 1'1
    parameter \WR_CLK_POLARITY 1'1
    parameter \WR_PRIORITY_MASK 1'0
    parameter \WR_WIDE_CONTINUATION 1'0
    parameter \MEMID "\\r_port"
    connect \RD_CLK { 1'0 }
    connect \RD_EN { 1'1 }
    connect \RD_ARST 1'0
    connect \RD_SRST 1'0
    connect \RD_ADDR { \storage_r_addr }
    connect \RD_DATA { \storage_r_data }
    connect \WR_CLK { \clk }
    connect \WR_EN { { { \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en \storage_w_en } } }
    connect \WR_ADDR { \storage_w_addr }
    connect \WR_DATA { \storage_w_data }
  end
  attribute \init 2'00
  wire width 2 \level
  wire width 2 \level$next
  wire width 1 $1
  cell $ne $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \level
    connect \B 2'11
    connect \Y $1
  end
  process $group_0
    assign \w_rdy 1'0
    assign \w_rdy $1
  end
  wire width 1 $3
  cell $ne $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \level
    connect \B 1'0
    connect \Y $3
  end
  process $group_1
    assign \r_rdy 1'0
    assign \r_rdy $3
  end
  wire width 2 \w_level
  process $group_2
    assign \w_level 2'00
    assign \w_level \level
  end
  wire width 2 \r_level
  process $group_3
    assign \r_level 2'00
    assign \r_level \level
  end
  attribute \init 2'00
  wire width 2 \produce
  wire width 2 \produce$next
  process $group_4
    assign \storage_w_addr 2'00
    assign \storage_w_addr \produce
  end
  process $group_5
    assign \storage_w_data 8'00000000
    assign \storage_w_data \w_data
  end
  wire width 1 $5
  cell $and $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_en
    connect \B \w_rdy
    connect \Y $5
  end
  process $group_6
    assign \storage_w_en 1'0
    assign \storage_w_en $5
  end
  wire width 1 $7
  cell $and $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $7
  end
  wire width 3 $9
  wire width 3 $10
  cell $add $11
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 3
    connect \A \produce
    connect \B 1'1
    connect \Y $10
  end
  wire width 3 $12
  wire width 1 $13
  cell $eq $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \produce
    connect \B 2'10
    connect \Y $13
  end
  cell $mux $15
    parameter \WIDTH 3
    connect \A $10
    connect \B 3'000
    connect \S $13
    connect \Y $12
  end
  connect $9 $12
  process $group_7
    assign \produce$next \produce
    switch { $7 }
      case 1'1
        assign \produce$next $9 [1:0]
    end
    switch $signal
      case 1'1
        assign \produce$next 2'00
    end
    switch \rst
      case 1'1
        assign \produce$next 2'00
    end
  end
  attribute \init 2'00
  wire width 2 \consume
  wire width 2 \consume$next
  process $group_8
    assign \storage_r_addr 2'00
    assign \storage_r_addr \consume
  end
  process $group_9
    assign \r_data 8'00000000
    assign \r_data \storage_r_data
  end
  wire width 1 $16
  cell $and $17
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \B \r_en
    connect \Y $16
  end
  wire width 3 $18
  wire width 3 $19
  cell $add $20
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 3
    connect \A \consume
    connect \B 1'1
    connect \Y $19
  end
  wire width 3 $21
  wire width 1 $22
  cell $eq $23
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \consume
    connect \B 2'10
    connect \Y $22
  end
  cell $mux $24
    parameter \WIDTH 3
    connect \A $19
    connect \B 3'000
    connect \S $22
    connect \Y $21
  end
  connect $18 $21
  process $group_10
    assign \consume$next \consume
    switch { $16 }
      case 1'1
        assign \consume$next $18 [1:0]
    end
    switch $signal
      case 1'1
        assign \consume$next 2'00
    end
    switch \rst
      case 1'1
        assign \consume$next 2'00
    end
  end
  wire width 1 $25
  cell $and $26
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $25
  end
  wire width 1 $27
  wire width 1 $28
  cell $and $29
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \B \r_en
    connect \Y $28
  end
  cell $not $30
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $28
    connect \Y $27
  end
  wire width 1 $31
  cell $and $32
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $25
    connect \B $27
    connect \Y $31
  end
  wire width 3 $33
  wire width 3 $34
  cell $add $35
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 3
    connect \A \level
    connect \B 1'1
    connect \Y $34
  end
  connect $33 $34
  wire width 1 $36
  cell $and $37
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy
    connect \B \r_en
    connect \Y $36
  end
  wire width 1 $38
  wire width 1 $39
  cell $and $40
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B \w_en
    connect \Y $39
  end
  cell $not $41
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $39
    connect \Y $38
  end
  wire width 1 $42
  cell $and $43
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $36
    connect \B $38
    connect \Y $42
  end
  wire width 3 $44
  wire width 3 $45
  cell $sub $46
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 3
    connect \A \level
    connect \B 1'1
    connect \Y $45
  end
  connect $44 $45
  process $group_11
    assign \level$next \level
    switch { $31 }
      case 1'1
        assign \level$next $33 [1:0]
    end
    switch { $42 }
      case 1'1
        assign \level$next $44 [1:0]
    end
    switch $signal
      case 1'1
        assign \level$next 2'00
    end
    switch \rst
      case 1'1
        assign \level$next 2'00
    end
  end
  cell $dff $47
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \produce$next
    connect \Q \produce
  end
  cell $dff $48
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \consume$next
    connect \Q \consume
  end
  cell $dff $49
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \level$next
    connect \Q \level
  end
end
attribute \generator "Amaranth"
module \top.fx2_crossbar.out_fifo_0
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \w_rdy
  wire width 8 input 4 \w_data
  wire width 1 input 5 \w_en
  wire width 8 output 6 \r_data
  wire width 1 output 7 \r_rdy
  wire width 1 input 8 \r_en
  wire width 8 \inner_w_data
  wire width 1 \inner_w_en
  cell \top.fx2_crossbar.out_fifo_0.inner \inner
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \w_rdy \w_rdy
    connect \w_data \inner_w_data
    connect \w_en \inner_w_en
    connect \r_data \r_data
    connect \r_rdy \r_rdy
    connect \r_en \r_en
  end
  wire width 1 \skid_r_rdy
  wire width 8 \skid_r_data
  wire width 1 \skid_r_en
  wire width 8 \skid_w_data
  wire width 1 \skid_w_en
  wire width 1 \skid_w_rdy
  cell \top.fx2_crossbar.out_fifo_0.skid \skid
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \r_rdy \skid_r_rdy
    connect \r_data \skid_r_data
    connect \r_en \skid_r_en
    connect \w_data \skid_w_data
    connect \w_en \skid_w_en
    connect \w_rdy \skid_w_rdy
  end
  wire width 1 $1
  cell $not $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \skid_r_rdy
    connect \Y $1
  end
  wire width 1 $3
  cell $and $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B $1
    connect \Y $3
  end
  process $group_0
    assign \inner_w_data 8'00000000
    switch { \skid_r_rdy }
      case 1'1
        assign \inner_w_data \skid_r_data
    end
    switch { $3 }
      case 1'1
        assign \inner_w_data \w_data
      case
    end
  end
  wire width 1 $5
  cell $not $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \skid_r_rdy
    connect \Y $5
  end
  wire width 1 $7
  cell $and $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B $5
    connect \Y $7
  end
  process $group_1
    assign \inner_w_en 1'0
    switch { \skid_r_rdy }
      case 1'1
        assign \inner_w_en 1'1
    end
    switch { $7 }
      case 1'1
        assign \inner_w_en \w_en
      case
    end
  end
  process $group_2
    assign \skid_r_en 1'0
    switch { \skid_r_rdy }
      case 1'1
        assign \skid_r_en \w_rdy
    end
  end
  wire width 1 \w_rdy$9
  wire width 1 $10
  cell $not $11
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \skid_r_rdy
    connect \Y $10
  end
  wire width 1 $12
  cell $and $13
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B $10
    connect \Y $12
  end
  process $group_3
    assign \w_rdy$9 1'0
    switch { $12 }
      case 1'1
        assign \w_rdy$9 \w_rdy
      case
        assign \w_rdy$9 \skid_w_rdy
    end
  end
  wire width 1 $14
  cell $not $15
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \skid_r_rdy
    connect \Y $14
  end
  wire width 1 $16
  cell $and $17
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B $14
    connect \Y $16
  end
  process $group_4
    assign \skid_w_data 8'00000000
    switch { $16 }
      case 1'1
      case
        assign \skid_w_data \w_data
    end
  end
  wire width 1 $18
  cell $not $19
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \skid_r_rdy
    connect \Y $18
  end
  wire width 1 $20
  cell $and $21
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy
    connect \B $18
    connect \Y $20
  end
  process $group_5
    assign \skid_w_en 1'0
    switch { $20 }
      case 1'1
      case
        assign \skid_w_en \w_en
    end
  end
end
attribute \generator "Amaranth"
module \top.fx2_crossbar
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \fx2_0__flag__i_clk
  wire width 4 input 4 \fx2_0__flag__i1
  wire width 1 output 5 \fx2_0__fifoadr__o_clk
  wire width 2 output 6 \fx2_0__fifoadr__o
  wire width 1 output 7 \fx2_0__fd__o_clk
  wire width 1 output 8 \fx2_0__fd__oe
  wire width 8 output 9 \fx2_0__fd__o0
  wire width 8 output 10 \fx2_0__fd__o1
  wire width 1 output 11 \fx2_0__fd__i_clk
  wire width 8 input 12 \fx2_0__fd__i1
  wire width 1 output 13 \fx2_0__sloe__o_clk
  wire width 1 output 14 \fx2_0__sloe__o
  wire width 1 output 15 \fx2_0__slrd__o_clk
  wire width 1 output 16 \fx2_0__slrd__o
  wire width 1 output 17 \fx2_0__slwr__o_clk
  wire width 1 output 18 \fx2_0__slwr__o
  wire width 1 output 19 \fx2_0__pktend__o_clk
  wire width 1 output 20 \fx2_0__pktend__o
  wire width 1 output 21 \w_rdy
  wire width 8 input 22 \w_data
  wire width 1 input 23 \w_en
  wire width 8 output 24 \r_data
  wire width 1 output 25 \r_rdy
  wire width 1 input 26 \r_en
  wire width 4 \bus_flag
  wire width 4 \bus_nrdy_o
  wire width 8 \bus_data__o
  attribute \init 2'00
  wire width 2 \bus_addr
  wire width 2 \bus_addr$next
  wire width 2 \bus_addr_p
  wire width 8 \bus_data__i
  wire width 1 \bus_slwr
  wire width 1 \bus_pend
  wire width 4 \bus_nrdy_i
  wire width 1 \bus_slrd_p
  attribute \init 1'0
  wire width 1 \bus_sloe
  wire width 1 \bus_sloe$next
  attribute \init 1'0
  wire width 1 \bus_data__oe
  wire width 1 \bus_data__oe$next
  wire width 1 \bus_slrd
  cell \top.fx2_crossbar.bus \bus
    connect \rst \rst
    connect \clk \clk
    connect \flag \bus_flag
    connect \nrdy_o \bus_nrdy_o
    connect \data__o \bus_data__o
    connect \addr \bus_addr
    connect \addr_p \bus_addr_p
    connect \data__i \bus_data__i
    connect \slwr \bus_slwr
    connect \pend \bus_pend
    connect \nrdy_i \bus_nrdy_i
    connect \slrd_p \bus_slrd_p
    connect \sloe \bus_sloe
    connect \data__oe \bus_data__oe
    connect \slrd \bus_slrd
    connect \fx2_0__flag__i_clk \fx2_0__flag__i_clk
    connect \fx2_0__flag__i1 \fx2_0__flag__i1
    connect \fx2_0__fifoadr__o_clk \fx2_0__fifoadr__o_clk
    connect \fx2_0__fifoadr__o \fx2_0__fifoadr__o
    connect \fx2_0__fd__o_clk \fx2_0__fd__o_clk
    connect \fx2_0__fd__oe \fx2_0__fd__oe
    connect \fx2_0__fd__o0 \fx2_0__fd__o0
    connect \fx2_0__fd__o1 \fx2_0__fd__o1
    connect \fx2_0__fd__i_clk \fx2_0__fd__i_clk
    connect \fx2_0__fd__i1 \fx2_0__fd__i1
    connect \fx2_0__sloe__o_clk \fx2_0__sloe__o_clk
    connect \fx2_0__sloe__o \fx2_0__sloe__o
    connect \fx2_0__slrd__o_clk \fx2_0__slrd__o_clk
    connect \fx2_0__slrd__o \fx2_0__slrd__o
    connect \fx2_0__slwr__o_clk \fx2_0__slwr__o_clk
    connect \fx2_0__slwr__o \fx2_0__slwr__o
    connect \fx2_0__pktend__o_clk \fx2_0__pktend__o_clk
    connect \fx2_0__pktend__o \fx2_0__pktend__o
  end
  wire width 1 \in_fifo_0_r_rdy
  wire width 1 \in_fifo_0_pending
  wire width 8 \in_fifo_0_r_data
  wire width 1 \in_fifo_0_r_en
  wire width 1 \in_fifo_0_flushed
  wire width 1 \in_fifo_0_complete
  cell \top.fx2_crossbar.in_fifo_0 \in_fifo_0
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \r_rdy \in_fifo_0_r_rdy
    connect \pending \in_fifo_0_pending
    connect \r_data \in_fifo_0_r_data
    connect \r_en \in_fifo_0_r_en
    connect \flushed \in_fifo_0_flushed
    connect \complete \in_fifo_0_complete
    connect \w_rdy \w_rdy
    connect \w_data \w_data
    connect \w_en \w_en
  end
  wire width 1 \out_fifo_0_w_rdy
  wire width 8 \out_fifo_0_w_data
  wire width 1 \out_fifo_0_w_en
  cell \top.fx2_crossbar.out_fifo_0 \out_fifo_0
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \w_rdy \out_fifo_0_w_rdy
    connect \w_data \out_fifo_0_w_data
    connect \w_en \out_fifo_0_w_en
    connect \r_data \r_data
    connect \r_rdy \r_rdy
    connect \r_en \r_en
  end
  wire width 4 \rdy
  wire width 1 \w_rdy$1
  wire width 1 $2
  cell $or $3
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \in_fifo_0_r_rdy
    connect \B \in_fifo_0_pending
    connect \Y $2
  end
  wire width 1 \r_rdy$4
  wire width 1 \pending
  wire width 1 $5
  cell $or $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \r_rdy$4
    connect \B \pending
    connect \Y $5
  end
  wire width 4 $7
  cell $and $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 4
    parameter \Y_WIDTH 4
    connect \A { $5 $2 \w_rdy$1 \out_fifo_0_w_rdy }
    connect \B \bus_flag
    connect \Y $7
  end
  wire width 4 $9
  cell $not $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \Y_WIDTH 4
    connect \A \bus_nrdy_o
    connect \Y $9
  end
  wire width 4 $11
  cell $and $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 4
    parameter \Y_WIDTH 4
    connect \A $7
    connect \B $9
    connect \Y $11
  end
  process $group_0
    assign \rdy 4'0000
    assign \rdy $11
  end
  wire width 8 \r_data$13
  process $group_1
    assign \bus_data__o 8'00000000
    switch \bus_addr [0]
      case 1'0
        assign \bus_data__o \in_fifo_0_r_data
      case 1'-
        assign \bus_data__o \r_data$13
    end
  end
  wire width 8 \w_data$14
  process $group_2
    assign \out_fifo_0_w_data 8'00000000
    assign \w_data$14 8'00000000
    switch \bus_addr_p [0]
      case 1'0
        assign \out_fifo_0_w_data \bus_data__i
      case 1'-
        assign \w_data$14 \bus_data__i
    end
  end
  wire width 1 \r_en$15
  process $group_4
    assign \in_fifo_0_r_en 1'0
    assign \r_en$15 1'0
    switch { \bus_addr [1] }
      case 1'1
        switch \bus_addr [0]
          case 1'0
            assign \in_fifo_0_r_en \bus_slwr
          case 1'-
            assign \r_en$15 \bus_slwr
        end
      case
    end
  end
  wire width 1 \flushed
  process $group_6
    assign \in_fifo_0_flushed 1'0
    assign \flushed 1'0
    switch { \bus_addr [1] }
      case 1'1
        switch \bus_addr [0]
          case 1'0
            assign \in_fifo_0_flushed \bus_pend
          case 1'-
            assign \flushed \bus_pend
        end
      case
    end
  end
  wire width 1 $16
  cell $or $17
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_slwr
    connect \B \bus_pend
    connect \Y $16
  end
  wire width 2 $18
  cell $sshl $19
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 2
    connect \A $16
    connect \B \bus_addr [0]
    connect \Y $18
  end
  process $group_8
    assign \bus_nrdy_i 4'0000
    switch { \bus_addr [1] }
      case 1'1
        assign \bus_nrdy_i { $18 2'00 }
      case
    end
  end
  wire width 1 \w_en$20
  wire width 1 $21
  cell $shift $22
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $21
  end
  wire width 1 $23
  cell $and $24
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_slrd_p
    connect \B $21
    connect \Y $23
  end
  wire width 1 $25
  cell $shift $26
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $25
  end
  wire width 1 $27
  cell $and $28
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_slrd_p
    connect \B $25
    connect \Y $27
  end
  wire width 1 $29
  cell $shift $30
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $29
  end
  wire width 1 $31
  cell $and $32
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \bus_slrd_p
    connect \B $29
    connect \Y $31
  end
  process $group_9
    assign \out_fifo_0_w_en 1'0
    assign \w_en$20 1'0
    switch { \bus_addr [1] }
      case 1'1
      case
        switch \bus_addr_p [0]
          case 1'0
            assign \out_fifo_0_w_en $27
          case 1'-
            assign \w_en$20 $31
        end
    end
  end
  attribute \init 3'000
  wire width 3 \fsm_state
  wire width 3 \fsm_state$next
  process $group_11
    assign \bus_sloe$next \bus_sloe
    switch \fsm_state
      attribute \amaranth.decoding "SWITCH/0"
      case 3'000
        assign \bus_sloe$next 1'0
      attribute \amaranth.decoding "DRIVE/1"
      case 3'001
        switch { \bus_addr [1] }
          case 1'1
          case
            assign \bus_sloe$next 1'1
        end
      attribute \amaranth.decoding "SETUP/2"
      case 3'010
      attribute \amaranth.decoding "IN-XFER/3"
      case 3'011
      attribute \amaranth.decoding "OUT-XFER/4"
      case 3'100
    end
    switch \rst
      case 1'1
        assign \bus_sloe$next 1'0
    end
  end
  process $group_12
    assign \bus_data__oe$next \bus_data__oe
    switch \fsm_state
      attribute \amaranth.decoding "SWITCH/0"
      case 3'000
        assign \bus_data__oe$next 1'0
      attribute \amaranth.decoding "DRIVE/1"
      case 3'001
        switch { \bus_addr [1] }
          case 1'1
            assign \bus_data__oe$next 1'1
          case
        end
      attribute \amaranth.decoding "SETUP/2"
      case 3'010
      attribute \amaranth.decoding "IN-XFER/3"
      case 3'011
      attribute \amaranth.decoding "OUT-XFER/4"
      case 3'100
    end
    switch \rst
      case 1'1
        assign \bus_data__oe$next 1'0
    end
  end
  process $group_13
    assign \bus_addr$next \bus_addr
    switch \fsm_state
      attribute \amaranth.decoding "SWITCH/0"
      case 3'000
        switch { \bus_addr \rdy }
          case 6'000000
            assign \bus_addr$next 2'01
          case 6'000001
            assign \bus_addr$next 2'00
          case 6'000010
            assign \bus_addr$next 2'01
          case 6'000011
            assign \bus_addr$next 2'00
          case 6'000100
            assign \bus_addr$next 2'10
          case 6'000101
            assign \bus_addr$next 2'00
          case 6'000110
            assign \bus_addr$next 2'01
          case 6'000111
            assign \bus_addr$next 2'00
          case 6'001000
            assign \bus_addr$next 2'11
          case 6'001001
            assign \bus_addr$next 2'00
          case 6'001010
            assign \bus_addr$next 2'01
          case 6'001011
            assign \bus_addr$next 2'00
          case 6'001100
            assign \bus_addr$next 2'10
          case 6'001101
            assign \bus_addr$next 2'00
          case 6'001110
            assign \bus_addr$next 2'01
          case 6'001111
            assign \bus_addr$next 2'00
          case 6'010000
            assign \bus_addr$next 2'10
          case 6'010001
            assign \bus_addr$next 2'00
          case 6'010010
            assign \bus_addr$next 2'01
          case 6'010011
            assign \bus_addr$next 2'01
          case 6'010100
            assign \bus_addr$next 2'10
          case 6'010101
            assign \bus_addr$next 2'10
          case 6'010110
            assign \bus_addr$next 2'01
          case 6'010111
            assign \bus_addr$next 2'01
          case 6'011000
            assign \bus_addr$next 2'11
          case 6'011001
            assign \bus_addr$next 2'11
          case 6'011010
            assign \bus_addr$next 2'01
          case 6'011011
            assign \bus_addr$next 2'01
          case 6'011100
            assign \bus_addr$next 2'10
          case 6'011101
            assign \bus_addr$next 2'10
          case 6'011110
            assign \bus_addr$next 2'01
          case 6'011111
            assign \bus_addr$next 2'01
          case 6'100000
            assign \bus_addr$next 2'11
          case 6'100001
            assign \bus_addr$next 2'00
          case 6'100010
            assign \bus_addr$next 2'01
          case 6'100011
            assign \bus_addr$next 2'00
          case 6'100100
            assign \bus_addr$next 2'10
          case 6'100101
            assign \bus_addr$next 2'10
          case 6'100110
            assign \bus_addr$next 2'10
          case 6'100111
            assign \bus_addr$next 2'10
          case 6'101000
            assign \bus_addr$next 2'11
          case 6'101001
            assign \bus_addr$next 2'11
          case 6'101010
            assign \bus_addr$next 2'11
          case 6'101011
            assign \bus_addr$next 2'11
          case 6'101100
            assign \bus_addr$next 2'10
          case 6'101101
            assign \bus_addr$next 2'10
          case 6'101110
            assign \bus_addr$next 2'10
          case 6'101111
            assign \bus_addr$next 2'10
          case 6'110000
            assign \bus_addr$next 2'00
          case 6'110001
            assign \bus_addr$next 2'00
          case 6'110010
            assign \bus_addr$next 2'01
          case 6'110011
            assign \bus_addr$next 2'00
          case 6'110100
            assign \bus_addr$next 2'10
          case 6'110101
            assign \bus_addr$next 2'00
          case 6'110110
            assign \bus_addr$next 2'01
          case 6'110111
            assign \bus_addr$next 2'00
          case 6'111000
            assign \bus_addr$next 2'11
          case 6'111001
            assign \bus_addr$next 2'11
          case 6'111010
            assign \bus_addr$next 2'11
          case 6'111011
            assign \bus_addr$next 2'11
          case 6'111100
            assign \bus_addr$next 2'11
          case 6'111101
            assign \bus_addr$next 2'11
          case 6'111110
            assign \bus_addr$next 2'11
          case 6'111111
            assign \bus_addr$next 2'11
        end
      attribute \amaranth.decoding "DRIVE/1"
      case 3'001
      attribute \amaranth.decoding "SETUP/2"
      case 3'010
      attribute \amaranth.decoding "IN-XFER/3"
      case 3'011
      attribute \amaranth.decoding "OUT-XFER/4"
      case 3'100
    end
    switch \rst
      case 1'1
        assign \bus_addr$next 2'00
    end
  end
  wire width 1 $33
  cell $reduce_bool $34
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \Y_WIDTH 1
    connect \A \rdy
    connect \Y $33
  end
  wire width 1 $35
  wire width 1 $36
  cell $not $37
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \in_fifo_0_complete
    connect \Y $36
  end
  wire width 1 $38
  cell $and $39
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $36
    connect \B \in_fifo_0_r_rdy
    connect \Y $38
  end
  wire width 1 $40
  cell $or $41
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \in_fifo_0_complete
    connect \B \in_fifo_0_pending
    connect \Y $40
  end
  wire width 1 $42
  wire width 1 \complete
  cell $not $43
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \complete
    connect \Y $42
  end
  wire width 1 $44
  cell $and $45
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $42
    connect \B \r_rdy$4
    connect \Y $44
  end
  wire width 1 $46
  cell $or $47
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \complete
    connect \B \pending
    connect \Y $46
  end
  wire width 1 $48
  cell $shift $49
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $48
  end
  wire width 1 $50
  cell $shift $51
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $50
  end
  wire width 1 $52
  cell $and $53
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $50
    connect \B \out_fifo_0_w_rdy
    connect \Y $52
  end
  wire width 1 $54
  cell $shift $55
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $54
  end
  wire width 1 $56
  cell $and $57
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $54
    connect \B \w_rdy$1
    connect \Y $56
  end
  process $group_14
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "SWITCH/0"
      case 3'000
        switch { $33 }
          case 1'1
            assign \fsm_state$next 3'001
        end
      attribute \amaranth.decoding "DRIVE/1"
      case 3'001
        assign \fsm_state$next 3'010
      attribute \amaranth.decoding "SETUP/2"
      case 3'010
        switch { \bus_addr [1] }
          case 1'1
            assign \fsm_state$next 3'011
          case
            assign \fsm_state$next 3'100
        end
      attribute \amaranth.decoding "IN-XFER/3"
      case 3'011
        switch \bus_addr [0]
          case 1'0
            switch { $40 $38 }
              case 2'-1
              case 2'1-
                assign \fsm_state$next 3'000
              case
                assign \fsm_state$next 3'000
            end
          case 1'-
            switch { $46 $44 }
              case 2'-1
              case 2'1-
                assign \fsm_state$next 3'000
              case
                assign \fsm_state$next 3'000
            end
        end
      attribute \amaranth.decoding "OUT-XFER/4"
      case 3'100
        switch \bus_addr_p [0]
          case 1'0
            switch { $52 }
              case 1'1
              case
                assign \fsm_state$next 3'000
            end
          case 1'-
            switch { $56 }
              case 1'1
              case
                assign \fsm_state$next 3'000
            end
        end
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 3'000
    end
  end
  wire width 1 $58
  wire width 1 $59
  cell $not $60
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \in_fifo_0_complete
    connect \Y $59
  end
  wire width 1 $61
  cell $and $62
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $59
    connect \B \in_fifo_0_r_rdy
    connect \Y $61
  end
  wire width 1 $63
  cell $or $64
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \in_fifo_0_complete
    connect \B \in_fifo_0_pending
    connect \Y $63
  end
  wire width 1 $65
  cell $not $66
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \complete
    connect \Y $65
  end
  wire width 1 $67
  cell $and $68
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $65
    connect \B \r_rdy$4
    connect \Y $67
  end
  wire width 1 $69
  cell $or $70
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \complete
    connect \B \pending
    connect \Y $69
  end
  process $group_15
    assign \bus_slwr 1'0
    switch \fsm_state
      attribute \amaranth.decoding "SWITCH/0"
      case 3'000
      attribute \amaranth.decoding "DRIVE/1"
      case 3'001
      attribute \amaranth.decoding "SETUP/2"
      case 3'010
      attribute \amaranth.decoding "IN-XFER/3"
      case 3'011
        switch \bus_addr [0]
          case 1'0
            switch { $63 $61 }
              case 2'-1
                assign \bus_slwr 1'1
              case 2'1-
              case
            end
          case 1'-
            switch { $69 $67 }
              case 2'-1
                assign \bus_slwr 1'1
              case 2'1-
              case
            end
        end
      attribute \amaranth.decoding "OUT-XFER/4"
      case 3'100
    end
  end
  wire width 1 $71
  wire width 1 $72
  cell $not $73
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \in_fifo_0_complete
    connect \Y $72
  end
  wire width 1 $74
  cell $and $75
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $72
    connect \B \in_fifo_0_r_rdy
    connect \Y $74
  end
  wire width 1 $76
  cell $or $77
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \in_fifo_0_complete
    connect \B \in_fifo_0_pending
    connect \Y $76
  end
  wire width 1 $78
  cell $not $79
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \complete
    connect \Y $78
  end
  wire width 1 $80
  cell $and $81
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $78
    connect \B \r_rdy$4
    connect \Y $80
  end
  wire width 1 $82
  cell $or $83
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \complete
    connect \B \pending
    connect \Y $82
  end
  process $group_16
    assign \bus_pend 1'0
    switch \fsm_state
      attribute \amaranth.decoding "SWITCH/0"
      case 3'000
      attribute \amaranth.decoding "DRIVE/1"
      case 3'001
      attribute \amaranth.decoding "SETUP/2"
      case 3'010
      attribute \amaranth.decoding "IN-XFER/3"
      case 3'011
        switch \bus_addr [0]
          case 1'0
            switch { $76 $74 }
              case 2'-1
              case 2'1-
                assign \bus_pend 1'1
              case
            end
          case 1'-
            switch { $82 $80 }
              case 2'-1
              case 2'1-
                assign \bus_pend 1'1
              case
            end
        end
      attribute \amaranth.decoding "OUT-XFER/4"
      case 3'100
    end
  end
  wire width 1 $84
  cell $shift $85
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $84
  end
  wire width 1 $86
  cell $shift $87
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $86
  end
  wire width 1 $88
  cell $and $89
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $86
    connect \B \out_fifo_0_w_rdy
    connect \Y $88
  end
  wire width 1 $90
  cell $shift $91
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \bus_flag
    connect \B \bus_addr
    connect \Y $90
  end
  wire width 1 $92
  cell $and $93
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $90
    connect \B \w_rdy$1
    connect \Y $92
  end
  process $group_17
    assign \bus_slrd 1'0
    switch \fsm_state
      attribute \amaranth.decoding "SWITCH/0"
      case 3'000
      attribute \amaranth.decoding "DRIVE/1"
      case 3'001
      attribute \amaranth.decoding "SETUP/2"
      case 3'010
      attribute \amaranth.decoding "IN-XFER/3"
      case 3'011
      attribute \amaranth.decoding "OUT-XFER/4"
      case 3'100
        switch \bus_addr_p [0]
          case 1'0
            switch { $88 }
              case 1'1
                assign \bus_slrd 1'1
              case
            end
          case 1'-
            switch { $92 }
              case 1'1
                assign \bus_slrd 1'1
              case
            end
        end
    end
  end
  cell $dff $94
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \bus_sloe$next
    connect \Q \bus_sloe
  end
  cell $dff $95
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \bus_data__oe$next
    connect \Q \bus_data__oe
  end
  cell $dff $96
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \bus_addr$next
    connect \Q \bus_addr
  end
  cell $dff $97
    parameter \CLK_POLARITY 1
    parameter \WIDTH 3
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
  connect \w_rdy$1 1'0
  connect \r_rdy$4 1'0
  connect \pending 1'0
  connect \r_data$13 8'00000000
  connect \complete 1'0
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.BeamController
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 input 3 \dwelling
  wire width 1 input 4 \count_enable
  attribute \init 14'00000000000000
  wire width 14 output 5 \x_position
  wire width 14 \x_position$next
  attribute \init 14'00000000000000
  wire width 14 output 6 \y_position
  wire width 14 \y_position$next
  wire width 14 input 7 \next_x_position
  wire width 14 input 8 \next_y_position
  wire width 1 input 9 \reset
  wire width 1 input 10 \lock_new_point
  wire width 1 output 11 \end_of_dwell
  wire width 1 output 12 \at_dwell
  wire width 16 input 13 \next_dwell
  attribute \init 16'0000000000000000
  wire width 16 \counter
  wire width 16 \counter$next
  attribute \init 14'00000000000000
  wire width 14 \dwell_time
  wire width 14 \dwell_time$next
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 14
    parameter \Y_WIDTH 1
    connect \A \counter
    connect \B \dwell_time
    connect \Y $1
  end
  process $group_0
    assign \at_dwell 1'0
    switch { \count_enable }
      case 1'1
        assign \at_dwell $1
    end
  end
  wire width 1 $3
  wire width 1 \dwelling_changed
  cell $not $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \dwelling_changed
    connect \Y $3
  end
  wire width 1 $5
  cell $and $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \at_dwell
    connect \B $3
    connect \Y $5
  end
  process $group_1
    assign \end_of_dwell 1'0
    assign \end_of_dwell $5
  end
  attribute \init 1'0
  wire width 1 \prev_dwelling
  wire width 1 \prev_dwelling$next
  process $group_2
    assign \prev_dwelling$next \prev_dwelling
    assign \prev_dwelling$next \dwelling
    switch $signal
      case 1'1
        assign \prev_dwelling$next 1'0
    end
    switch \rst
      case 1'1
        assign \prev_dwelling$next 1'0
    end
  end
  wire width 1 $7
  cell $ne $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \dwelling
    connect \B \prev_dwelling
    connect \Y $7
  end
  process $group_3
    assign \dwelling_changed 1'0
    assign \dwelling_changed $7
  end
  attribute \init 1'0
  wire width 1 \prev_dwelling_changed
  wire width 1 \prev_dwelling_changed$next
  process $group_4
    assign \prev_dwelling_changed$next \prev_dwelling_changed
    assign \prev_dwelling_changed$next \dwelling_changed
    switch $signal
      case 1'1
        assign \prev_dwelling_changed$next 1'0
    end
    switch \rst
      case 1'1
        assign \prev_dwelling_changed$next 1'0
    end
  end
  wire width 1 $9
  wire width 1 \freeze
  cell $not $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \freeze
    connect \Y $9
  end
  wire width 1 $11
  cell $and $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \dwelling
    connect \B $9
    connect \Y $11
  end
  wire width 17 $13
  wire width 17 $14
  cell $add $15
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 17
    connect \A \counter
    connect \B 1'1
    connect \Y $14
  end
  connect $13 $14
  process $group_5
    assign \counter$next \counter
    switch { $11 }
      case 1'1
        switch { \count_enable }
          case 1'1
            switch { \at_dwell }
              case 1'1
                assign \counter$next 16'0000000000000000
              case
                assign \counter$next $13 [15:0]
            end
        end
      case
        assign \counter$next 16'0000000000000000
    end
    switch $signal
      case 1'1
        assign \counter$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \counter$next 16'0000000000000000
    end
  end
  process $group_6
    assign \x_position$next \x_position
    switch { \reset }
      case 1'1
        assign \x_position$next 14'00000000000000
      case
        switch { \lock_new_point }
          case 1'1
            assign \x_position$next \next_x_position
        end
    end
    switch $signal
      case 1'1
        assign \x_position$next 14'00000000000000
    end
    switch \rst
      case 1'1
        assign \x_position$next 14'00000000000000
    end
  end
  process $group_7
    assign \y_position$next \y_position
    switch { \reset }
      case 1'1
        assign \y_position$next 14'00000000000000
      case
        switch { \lock_new_point }
          case 1'1
            assign \y_position$next \next_y_position
        end
    end
    switch $signal
      case 1'1
        assign \y_position$next 14'00000000000000
    end
    switch \rst
      case 1'1
        assign \y_position$next 14'00000000000000
    end
  end
  process $group_8
    assign \dwell_time$next \dwell_time
    switch { \reset }
      case 1'1
        assign \dwell_time$next 14'00000000000000
      case
        switch { \lock_new_point }
          case 1'1
            assign \dwell_time$next \next_dwell [13:0]
        end
    end
    switch $signal
      case 1'1
        assign \dwell_time$next 14'00000000000000
    end
    switch \rst
      case 1'1
        assign \dwell_time$next 14'00000000000000
    end
  end
  attribute \init 16'0000000000000000
  wire width 16 \true_counter
  wire width 16 \true_counter$next
  wire width 17 $16
  wire width 17 $17
  cell $add $18
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 17
    connect \A \true_counter
    connect \B 1'1
    connect \Y $17
  end
  connect $16 $17
  process $group_9
    assign \true_counter$next \true_counter
    assign \true_counter$next $16 [15:0]
    switch { \lock_new_point }
      case 1'1
        assign \true_counter$next 16'0000000000000000
    end
    switch $signal
      case 1'1
        assign \true_counter$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \true_counter$next 16'0000000000000000
    end
  end
  cell $dff $19
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \prev_dwelling$next
    connect \Q \prev_dwelling
  end
  cell $dff $20
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \prev_dwelling_changed$next
    connect \Q \prev_dwelling_changed
  end
  cell $dff $21
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \counter$next
    connect \Q \counter
  end
  cell $dff $22
    parameter \CLK_POLARITY 1
    parameter \WIDTH 14
    connect \CLK \clk
    connect \D \x_position$next
    connect \Q \x_position
  end
  cell $dff $23
    parameter \CLK_POLARITY 1
    parameter \WIDTH 14
    connect \CLK \clk
    connect \D \y_position$next
    connect \Q \y_position
  end
  cell $dff $24
    parameter \CLK_POLARITY 1
    parameter \WIDTH 14
    connect \CLK \clk
    connect \D \dwell_time$next
    connect \Q \dwell_time
  end
  cell $dff $25
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \true_counter$next
    connect \Q \true_counter
  end
  connect \freeze 1'0
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.Raster1byteWriter
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 8 output 3 \in_fifo_w_data
  wire width 1 input 4 \write_happened
  wire width 1 output 5 \data_valid
  wire width 1 output 6 \data_complete
  wire width 8 input 7 \data_c
  wire width 1 input 8 \strobe_in
  wire width 1 \w
  attribute \init 1'0
  wire width 1 \fsm_state
  wire width 1 \fsm_state$next
  process $group_0
    assign \w 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 1'0
        assign \w 1'1
      attribute \amaranth.decoding "D1/1"
      case 1'1
    end
  end
  process $group_1
    assign \data_valid 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 1'0
        switch { \strobe_in }
          case 1'1
            assign \data_valid 1'1
        end
      attribute \amaranth.decoding "D1/1"
      case 1'1
        assign \data_valid 1'1
    end
  end
  process $group_2
    assign \in_fifo_w_data 8'00000000
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 1'0
        switch { \strobe_in }
          case 1'1
            assign \in_fifo_w_data \data_c
        end
      attribute \amaranth.decoding "D1/1"
      case 1'1
        assign \in_fifo_w_data \data_c
    end
  end
  attribute \init 8'00000000
  wire width 8 \data
  wire width 8 \data$next
  process $group_3
    assign \data$next \data
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 1'0
        switch { \strobe_in }
          case 1'1
            assign \data$next \data_c
        end
      attribute \amaranth.decoding "D1/1"
      case 1'1
    end
    switch $signal
      case 1'1
        assign \data$next 8'00000000
    end
    switch \rst
      case 1'1
        assign \data$next 8'00000000
    end
  end
  process $group_4
    assign \data_complete 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 1'0
        switch { \strobe_in }
          case 1'1
            assign \data_complete 1'1
        end
      attribute \amaranth.decoding "D1/1"
      case 1'1
        assign \data_complete 1'1
    end
  end
  process $group_5
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 1'0
        switch { \strobe_in }
          case 1'1
            switch { \write_happened }
              case 1'1
                assign \fsm_state$next 1'0
              case
                assign \fsm_state$next 1'1
            end
        end
      attribute \amaranth.decoding "D1/1"
      case 1'1
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 1'0
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 1'0
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 1'0
    end
  end
  wire width 1 \lf
  process $group_6
    assign \lf 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 1'0
      attribute \amaranth.decoding "D1/1"
      case 1'1
        assign \lf 1'1
    end
  end
  cell $dff $1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D \data$next
    connect \Q \data
  end
  cell $dff $2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.RasterWriter
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 8 output 3 \in_fifo_w_data
  wire width 1 input 4 \write_happened
  wire width 1 output 5 \data_valid
  wire width 1 output 6 \data_complete
  wire width 16 input 7 \data_c
  wire width 1 input 8 \strobe_in
  wire width 1 \w
  attribute \init 2'00
  wire width 2 \fsm_state
  wire width 2 \fsm_state$next
  process $group_0
    assign \w 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        assign \w 1'1
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
    end
  end
  process $group_1
    assign \data_valid 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            assign \data_valid 1'1
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
        assign \data_valid 1'1
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \data_valid 1'1
    end
  end
  process $group_2
    assign \in_fifo_w_data 8'00000000
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            assign \in_fifo_w_data \data_c [7:0]
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
        assign \in_fifo_w_data \data_c [7:0]
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \in_fifo_w_data \data_c [15:8]
    end
  end
  attribute \init 16'0000000000000000
  wire width 16 \data
  wire width 16 \data$next
  process $group_3
    assign \data$next \data
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            assign \data$next \data_c
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
    end
    switch $signal
      case 1'1
        assign \data$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \data$next 16'0000000000000000
    end
  end
  process $group_4
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            switch { \write_happened }
              case 1'1
                assign \fsm_state$next 2'01
              case
                assign \fsm_state$next 2'10
            end
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 2'01
        end
      attribute \amaranth.decoding "D2/1"
      case 2'01
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 2'00
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 2'00
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 2'00
    end
  end
  wire width 3 \f
  process $group_5
    assign \f 3'000
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
      attribute \amaranth.decoding "D1/2"
      case 2'10
        assign \f 3'001
      attribute \amaranth.decoding "D2/1"
      case 2'01
    end
  end
  process $group_6
    assign \data_complete 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \data_complete 1'1
    end
  end
  wire width 1 \lf
  process $group_7
    assign \lf 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \lf 1'1
    end
  end
  cell $dff $1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \data$next
    connect \Q \data
  end
  cell $dff $2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.RasterReader
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \data_complete
  wire width 1 output 4 \data_fresh
  wire width 8 input 5 \out_fifo_r_data
  wire width 1 input 6 \read_happened
  wire width 1 input 7 \data_used
  wire width 16 output 8 \data_c
  attribute \init 16'0000000000000000
  wire width 16 \data
  wire width 16 \data$next
  attribute \init 2'00
  wire width 2 \fsm_state
  wire width 2 \fsm_state$next
  process $group_0
    assign \data$next \data
    switch \fsm_state
      attribute \amaranth.decoding "D1/0"
      case 2'00
        switch { \read_happened }
          case 1'1
            assign \data$next [7:0] \out_fifo_r_data
        end
      attribute \amaranth.decoding "D2/1"
      case 2'01
        switch { \read_happened }
          case 1'1
            switch { \data_used }
              case 1'1
                assign \data$next 16'0000000000000000
              case
                assign \data$next \data_c
            end
        end
      attribute \amaranth.decoding "Hold/2"
      case 2'10
        switch { \data_used }
          case 1'1
            assign \data$next 16'0000000000000000
        end
    end
    switch $signal
      case 1'1
        assign \data$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \data$next 16'0000000000000000
    end
  end
  process $group_1
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "D1/0"
      case 2'00
        switch { \read_happened }
          case 1'1
            assign \fsm_state$next 2'01
        end
      attribute \amaranth.decoding "D2/1"
      case 2'01
        switch { \read_happened }
          case 1'1
            switch { \data_used }
              case 1'1
                assign \fsm_state$next 2'00
              case
                assign \fsm_state$next 2'10
            end
        end
      attribute \amaranth.decoding "Hold/2"
      case 2'10
        switch { \data_used }
          case 1'1
            assign \fsm_state$next 2'00
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 2'00
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 2'00
    end
  end
  process $group_2
    assign \data_c 16'0000000000000000
    switch \fsm_state
      attribute \amaranth.decoding "D1/0"
      case 2'00
      attribute \amaranth.decoding "D2/1"
      case 2'01
        switch { \read_happened }
          case 1'1
            assign \data_c [7:0] \data [7:0]
            assign \data_c [15:8] \out_fifo_r_data
        end
      attribute \amaranth.decoding "Hold/2"
      case 2'10
        assign \data_c \data
    end
  end
  process $group_3
    assign \data_fresh 1'0
    switch \fsm_state
      attribute \amaranth.decoding "D1/0"
      case 2'00
      attribute \amaranth.decoding "D2/1"
      case 2'01
        switch { \read_happened }
          case 1'1
            assign \data_fresh 1'1
        end
      attribute \amaranth.decoding "Hold/2"
      case 2'10
        assign \data_fresh 1'1
    end
  end
  wire width 1 \s
  process $group_4
    assign \s 1'0
    switch \fsm_state
      attribute \amaranth.decoding "D1/0"
      case 2'00
      attribute \amaranth.decoding "D2/1"
      case 2'01
      attribute \amaranth.decoding "Hold/2"
      case 2'10
        assign \s 1'1
    end
  end
  process $group_5
    assign \data_complete 1'0
    switch \fsm_state
      attribute \amaranth.decoding "D1/0"
      case 2'00
      attribute \amaranth.decoding "D2/1"
      case 2'01
      attribute \amaranth.decoding "Hold/2"
      case 2'10
        assign \data_complete 1'1
    end
  end
  cell $dff $1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \data$next
    connect \Q \data
  end
  cell $dff $2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.XYScanGen.x_counter
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 input 3 \increment
  wire width 1 output 4 \ovf
  wire width 1 input 5 \reset
  wire width 16 input 6 \upper_limit
  wire width 16 input 7 \lower_limit
  attribute \init 16'0000000000000000
  wire width 16 output 8 \current_count
  wire width 16 \current_count$next
  wire width 1 $1
  cell $ge $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \current_count
    connect \B \upper_limit
    connect \Y $1
  end
  process $group_0
    assign \ovf 1'0
    assign \ovf $1
  end
  wire width 1 \unf
  wire width 1 $3
  cell $lt $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \current_count
    connect \B \lower_limit
    connect \Y $3
  end
  process $group_1
    assign \unf 1'0
    assign \unf $3
  end
  wire width 16 \next_count
  process $group_2
    assign \current_count$next \current_count
    switch { \reset }
      case 1'1
        assign \current_count$next \lower_limit
      case
        switch { \increment }
          case 1'1
            switch { \ovf \unf }
              case 2'-1
                assign \current_count$next \lower_limit
              case 2'1-
                assign \current_count$next \lower_limit
              case
                assign \current_count$next \next_count
            end
        end
    end
    switch $signal
      case 1'1
        assign \current_count$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \current_count$next 16'0000000000000000
    end
  end
  wire width 17 $5
  wire width 17 $6
  cell $add $7
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 17
    connect \A \current_count
    connect \B 1'1
    connect \Y $6
  end
  connect $5 $6
  process $group_3
    assign \next_count 16'0000000000000000
    switch { \reset }
      case 1'1
      case
        switch { \increment }
          case 1'1
            switch { \ovf \unf }
              case 2'-1
              case 2'1-
              case
                assign \next_count $5 [15:0]
            end
        end
    end
  end
  cell $dff $8
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \current_count$next
    connect \Q \current_count
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.XYScanGen.y_counter
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 input 3 \increment
  wire width 1 input 4 \reset
  wire width 16 input 5 \upper_limit
  wire width 16 input 6 \lower_limit
  wire width 1 output 7 \ovf
  attribute \init 16'0000000000000000
  wire width 16 output 8 \current_count
  wire width 16 \current_count$next
  wire width 1 $1
  cell $ge $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \current_count
    connect \B \upper_limit
    connect \Y $1
  end
  process $group_0
    assign \ovf 1'0
    assign \ovf $1
  end
  wire width 1 \unf
  wire width 1 $3
  cell $lt $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \current_count
    connect \B \lower_limit
    connect \Y $3
  end
  process $group_1
    assign \unf 1'0
    assign \unf $3
  end
  wire width 16 \next_count
  process $group_2
    assign \current_count$next \current_count
    switch { \reset }
      case 1'1
        assign \current_count$next \lower_limit
      case
        switch { \increment }
          case 1'1
            switch { \ovf \unf }
              case 2'-1
                assign \current_count$next \lower_limit
              case 2'1-
                assign \current_count$next \lower_limit
              case
                assign \current_count$next \next_count
            end
        end
    end
    switch $signal
      case 1'1
        assign \current_count$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \current_count$next 16'0000000000000000
    end
  end
  wire width 17 $5
  wire width 17 $6
  cell $add $7
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 17
    connect \A \current_count
    connect \B 1'1
    connect \Y $6
  end
  connect $5 $6
  process $group_3
    assign \next_count 16'0000000000000000
    switch { \reset }
      case 1'1
      case
        switch { \increment }
          case 1'1
            switch { \ovf \unf }
              case 2'-1
              case 2'1-
              case
                assign \next_count $5 [15:0]
            end
        end
    end
  end
  cell $dff $8
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \current_count$next
    connect \Q \current_count
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.XYScanGen
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 16 input 3 \x_upper_limit
  wire width 16 input 4 \x_lower_limit
  wire width 16 input 5 \y_upper_limit
  wire width 16 input 6 \y_lower_limit
  wire width 1 input 7 \reset
  wire width 16 input 8 \x_full_frame_resolution
  wire width 16 input 9 \y_full_frame_resolution
  wire width 1 input 10 \increment
  wire width 16 output 11 \current_x
  wire width 1 \x_counter_increment
  wire width 1 \x_counter_ovf
  wire width 1 \x_counter_reset
  wire width 16 \x_counter_upper_limit
  wire width 16 \x_counter_lower_limit
  wire width 16 \x_counter_current_count
  cell \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.XYScanGen.x_counter \x_counter
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \increment \x_counter_increment
    connect \ovf \x_counter_ovf
    connect \reset \x_counter_reset
    connect \upper_limit \x_counter_upper_limit
    connect \lower_limit \x_counter_lower_limit
    connect \current_count \x_counter_current_count
  end
  wire width 1 \y_counter_increment
  wire width 1 \y_counter_reset
  wire width 16 \y_counter_upper_limit
  wire width 16 \y_counter_lower_limit
  wire width 1 \y_counter_ovf
  wire width 16 \y_counter_current_count
  cell \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.XYScanGen.y_counter \y_counter
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \increment \y_counter_increment
    connect \reset \y_counter_reset
    connect \upper_limit \y_counter_upper_limit
    connect \lower_limit \y_counter_lower_limit
    connect \ovf \y_counter_ovf
    connect \current_count \y_counter_current_count
  end
  process $group_0
    assign \x_counter_increment 1'0
    switch { \increment }
      case 1'1
        assign \x_counter_increment \increment
    end
  end
  process $group_1
    assign \y_counter_increment 1'0
    switch { \increment }
      case 1'1
        assign \y_counter_increment \x_counter_ovf
    end
  end
  process $group_2
    assign \x_counter_reset 1'0
    switch { \reset }
      case 1'1
        assign \x_counter_reset 1'1
    end
  end
  process $group_3
    assign \y_counter_reset 1'0
    switch { \reset }
      case 1'1
        assign \y_counter_reset 1'1
    end
  end
  wire width 16 \full_frame_size
  wire width 1 $1
  cell $ge $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \x_full_frame_resolution
    connect \B \y_full_frame_resolution
    connect \Y $1
  end
  wire width 1 $3
  cell $lt $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \x_full_frame_resolution
    connect \B \y_full_frame_resolution
    connect \Y $3
  end
  process $group_4
    assign \full_frame_size 16'0000000000000000
    switch { $1 }
      case 1'1
        assign \full_frame_size \x_full_frame_resolution
    end
    switch { $3 }
      case 1'1
        assign \full_frame_size \y_full_frame_resolution
    end
  end
  wire width 1 \x_bigger
  wire width 1 $5
  cell $ge $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \x_full_frame_resolution
    connect \B \y_full_frame_resolution
    connect \Y $5
  end
  process $group_5
    assign \x_bigger 1'0
    switch { $5 }
      case 1'1
        assign \x_bigger 1'1
    end
  end
  wire width 1 \y_bigger
  wire width 1 $7
  cell $lt $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \x_full_frame_resolution
    connect \B \y_full_frame_resolution
    connect \Y $7
  end
  process $group_6
    assign \y_bigger 1'0
    switch { $7 }
      case 1'1
        assign \y_bigger 1'1
    end
  end
  wire width 1 $9
  cell $le $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \x_upper_limit
    connect \B \x_lower_limit
    connect \Y $9
  end
  wire width 1 $11
  cell $eq $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \x_upper_limit
    connect \B 1'0
    connect \Y $11
  end
  process $group_7
    assign \x_counter_upper_limit 16'0000000000000001
    switch { $9 }
      case 1'1
        assign \x_counter_upper_limit \x_full_frame_resolution
      case
        assign \x_counter_upper_limit \x_upper_limit
    end
    switch { $11 }
      case 1'1
        assign \x_counter_upper_limit \x_full_frame_resolution
    end
  end
  wire width 1 $13
  cell $le $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \y_upper_limit
    connect \B \y_lower_limit
    connect \Y $13
  end
  wire width 1 $15
  cell $eq $16
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \y_upper_limit
    connect \B 1'0
    connect \Y $15
  end
  process $group_8
    assign \y_counter_upper_limit 16'0000000000000001
    switch { $13 }
      case 1'1
        assign \y_counter_upper_limit \y_full_frame_resolution
      case
        assign \y_counter_upper_limit \y_upper_limit
    end
    switch { $15 }
      case 1'1
        assign \y_counter_upper_limit \y_full_frame_resolution
    end
  end
  process $group_9
    assign \x_counter_lower_limit 16'0000000000000000
    assign \x_counter_lower_limit \x_lower_limit
  end
  process $group_10
    assign \y_counter_lower_limit 16'0000000000000000
    assign \y_counter_lower_limit \y_lower_limit
  end
  wire width 1 \frame_sync
  wire width 1 $17
  cell $and $18
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \x_counter_ovf
    connect \B \y_counter_ovf
    connect \Y $17
  end
  process $group_11
    assign \frame_sync 1'0
    assign \frame_sync $17
  end
  wire width 1 \line_sync
  wire width 1 $19
  cell $not $20
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \y_counter_ovf
    connect \Y $19
  end
  wire width 1 $21
  cell $and $22
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \x_counter_ovf
    connect \B $19
    connect \Y $21
  end
  process $group_12
    assign \line_sync 1'0
    assign \line_sync $21
  end
  process $group_13
    assign \current_x 16'0000000000000000
    assign \current_x \x_counter_current_count
  end
  wire width 16 \current_y
  process $group_14
    assign \current_y 16'0000000000000000
    assign \current_y \y_counter_current_count
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 16 input 3 \x_upper_limit
  wire width 16 input 4 \x_lower_limit
  wire width 16 input 5 \y_upper_limit
  wire width 16 input 6 \y_lower_limit
  wire width 1 input 7 \reset
  wire width 1 input 8 \xy_scan_gen_increment
  wire width 1 input 9 \eight_bit_output
  wire width 16 input 10 \x_full_frame_resolution
  wire width 16 input 11 \y_full_frame_resolution
  wire width 48 output 12 \beam_controller_next
  wire width 16 input 13 \adc_data_avgd
  wire width 8 output 14 \in_fifo_w_data
  wire width 1 input 15 \write_happened
  wire width 1 output 16 \data_valid
  wire width 1 output 17 \data_complete
  wire width 8 output 18 \in_fifo_w_data$1
  wire width 1 input 19 \write_happened$2
  wire width 1 output 20 \data_valid$3
  wire width 1 output 21 \data_complete$4
  wire width 1 input 22 \load_next_point
  wire width 1 input 23 \write_this_point
  wire width 1 output 24 \data_complete$5
  wire width 1 output 25 \data_fresh
  wire width 8 input 26 \out_fifo_r_data
  wire width 1 input 27 \read_happened
  wire width 8 \Raster1byteWriter_data_c
  wire width 1 \Raster1byteWriter_strobe_in
  cell \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.Raster1byteWriter \Raster1byteWriter
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \in_fifo_w_data \in_fifo_w_data
    connect \write_happened \write_happened
    connect \data_valid \data_valid
    connect \data_complete \data_complete
    connect \data_c \Raster1byteWriter_data_c
    connect \strobe_in \Raster1byteWriter_strobe_in
  end
  wire width 16 \RasterWriter_data_c
  wire width 1 \RasterWriter_strobe_in
  cell \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.RasterWriter \RasterWriter
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \in_fifo_w_data \in_fifo_w_data$1
    connect \write_happened \write_happened$2
    connect \data_valid \data_valid$3
    connect \data_complete \data_complete$4
    connect \data_c \RasterWriter_data_c
    connect \strobe_in \RasterWriter_strobe_in
  end
  wire width 1 \RasterReader_data_used
  wire width 16 \RasterReader_data_c
  cell \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.RasterReader \RasterReader
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \data_complete \data_complete$5
    connect \data_fresh \data_fresh
    connect \out_fifo_r_data \out_fifo_r_data
    connect \read_happened \read_happened
    connect \data_used \RasterReader_data_used
    connect \data_c \RasterReader_data_c
  end
  wire width 1 \XYScanGen_increment
  wire width 16 \XYScanGen_current_x
  cell \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl.XYScanGen \XYScanGen
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \x_upper_limit \x_upper_limit
    connect \x_lower_limit \x_lower_limit
    connect \y_upper_limit \y_upper_limit
    connect \y_lower_limit \y_lower_limit
    connect \reset \reset
    connect \x_full_frame_resolution \x_full_frame_resolution
    connect \y_full_frame_resolution \y_full_frame_resolution
    connect \increment \XYScanGen_increment
    connect \current_x \XYScanGen_current_x
  end
  wire width 1 \inner_xy_scan_gen_increment
  wire width 1 $6
  cell $or $7
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \inner_xy_scan_gen_increment
    connect \B \xy_scan_gen_increment
    connect \Y $6
  end
  process $group_0
    assign \XYScanGen_increment 1'0
    switch { $6 }
      case 1'1
        assign \XYScanGen_increment 1'1
    end
  end
  process $group_1
    assign \Raster1byteWriter_data_c 8'00000000
    switch { \eight_bit_output }
      case 1'1
        assign \Raster1byteWriter_data_c \adc_data_avgd [7:0]
      case
    end
  end
  process $group_2
    assign \RasterWriter_data_c 16'0000000000000000
    switch { \eight_bit_output }
      case 1'1
      case
        assign \RasterWriter_data_c \adc_data_avgd
    end
  end
  process $group_3
    assign \Raster1byteWriter_strobe_in 1'0
    switch { \write_this_point }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
            assign \Raster1byteWriter_strobe_in 1'1
          case
        end
    end
  end
  process $group_4
    assign \RasterWriter_strobe_in 1'0
    switch { \write_this_point }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
          case
            assign \RasterWriter_strobe_in 1'1
        end
    end
  end
  process $group_5
    assign \inner_xy_scan_gen_increment 1'0
    switch { \load_next_point }
      case 1'1
        assign \inner_xy_scan_gen_increment 1'1
    end
  end
  process $group_6
    assign \beam_controller_next 48'000000000000000000000000000000000000000000000000
    switch { \load_next_point }
      case 1'1
        assign \beam_controller_next [15:0] \XYScanGen_current_x
        assign \beam_controller_next [31:16] \XYScanGen_current_x
        assign \beam_controller_next [47:32] \RasterReader_data_c
    end
  end
  process $group_7
    assign \RasterReader_data_used 1'0
    switch { \load_next_point }
      case 1'1
        assign \RasterReader_data_used 1'1
    end
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.VectorModeCtrl.VectorReader
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \data_complete
  wire width 1 input 4 \read_happened
  wire width 1 output 5 \data_fresh
  wire width 8 input 6 \out_fifo_r_data
  wire width 1 input 7 \data_used
  attribute \init 48'000000000000000000000000000000000000000000000000
  wire width 48 output 8 \data
  wire width 48 \data$next
  attribute \init 3'000
  wire width 3 \fsm_state
  wire width 3 \fsm_state$next
  wire width 48 \data_c
  process $group_0
    assign \data$next \data
    switch \fsm_state
      attribute \amaranth.decoding "X1/0"
      case 3'000
        switch { \read_happened }
          case 1'1
            assign \data$next [7:0] \out_fifo_r_data
        end
      attribute \amaranth.decoding "X2/1"
      case 3'001
        switch { \read_happened }
          case 1'1
            assign \data$next [15:8] \out_fifo_r_data
        end
      attribute \amaranth.decoding "Y1/2"
      case 3'010
        switch { \read_happened }
          case 1'1
            assign \data$next [23:16] \out_fifo_r_data
        end
      attribute \amaranth.decoding "Y2/3"
      case 3'011
        switch { \read_happened }
          case 1'1
            assign \data$next [31:24] \out_fifo_r_data
        end
      attribute \amaranth.decoding "D1/4"
      case 3'100
        switch { \read_happened }
          case 1'1
            assign \data$next [39:32] \out_fifo_r_data
        end
      attribute \amaranth.decoding "D2/5"
      case 3'101
        switch { \read_happened }
          case 1'1
            switch { \data_used }
              case 1'1
                assign \data$next 48'000000000000000000000000000000000000000000000000
              case
                assign \data$next \data_c
            end
        end
      attribute \amaranth.decoding "Hold/6"
      case 3'110
        switch { \data_used }
          case 1'1
            assign \data$next 48'000000000000000000000000000000000000000000000000
        end
    end
    switch $signal
      case 1'1
        assign \data$next 48'000000000000000000000000000000000000000000000000
    end
    switch \rst
      case 1'1
        assign \data$next 48'000000000000000000000000000000000000000000000000
    end
  end
  process $group_1
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "X1/0"
      case 3'000
        switch { \read_happened }
          case 1'1
            assign \fsm_state$next 3'001
        end
      attribute \amaranth.decoding "X2/1"
      case 3'001
        switch { \read_happened }
          case 1'1
            assign \fsm_state$next 3'010
        end
      attribute \amaranth.decoding "Y1/2"
      case 3'010
        switch { \read_happened }
          case 1'1
            assign \fsm_state$next 3'011
        end
      attribute \amaranth.decoding "Y2/3"
      case 3'011
        switch { \read_happened }
          case 1'1
            assign \fsm_state$next 3'100
        end
      attribute \amaranth.decoding "D1/4"
      case 3'100
        switch { \read_happened }
          case 1'1
            assign \fsm_state$next 3'101
        end
      attribute \amaranth.decoding "D2/5"
      case 3'101
        switch { \read_happened }
          case 1'1
            switch { \data_used }
              case 1'1
                assign \fsm_state$next 3'000
              case
                assign \fsm_state$next 3'110
            end
        end
      attribute \amaranth.decoding "Hold/6"
      case 3'110
        switch { \data_used }
          case 1'1
            assign \fsm_state$next 3'000
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 3'000
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 3'000
    end
  end
  process $group_2
    assign \data_c 48'000000000000000000000000000000000000000000000000
    switch \fsm_state
      attribute \amaranth.decoding "X1/0"
      case 3'000
      attribute \amaranth.decoding "X2/1"
      case 3'001
      attribute \amaranth.decoding "Y1/2"
      case 3'010
      attribute \amaranth.decoding "Y2/3"
      case 3'011
      attribute \amaranth.decoding "D1/4"
      case 3'100
      attribute \amaranth.decoding "D2/5"
      case 3'101
        switch { \read_happened }
          case 1'1
            assign \data_c [7:0] \data [7:0]
            assign \data_c [15:8] \data [15:8]
            assign \data_c [23:16] \data [23:16]
            assign \data_c [31:24] \data [31:24]
            assign \data_c [39:32] \data [39:32]
            assign \data_c [47:40] \out_fifo_r_data
        end
      attribute \amaranth.decoding "Hold/6"
      case 3'110
        assign \data_c \data
    end
  end
  process $group_3
    assign \data_fresh 1'0
    switch \fsm_state
      attribute \amaranth.decoding "X1/0"
      case 3'000
      attribute \amaranth.decoding "X2/1"
      case 3'001
      attribute \amaranth.decoding "Y1/2"
      case 3'010
      attribute \amaranth.decoding "Y2/3"
      case 3'011
      attribute \amaranth.decoding "D1/4"
      case 3'100
      attribute \amaranth.decoding "D2/5"
      case 3'101
        switch { \read_happened }
          case 1'1
            assign \data_fresh 1'1
        end
      attribute \amaranth.decoding "Hold/6"
      case 3'110
        assign \data_fresh 1'1
    end
  end
  wire width 1 \s
  process $group_4
    assign \s 1'0
    switch \fsm_state
      attribute \amaranth.decoding "X1/0"
      case 3'000
      attribute \amaranth.decoding "X2/1"
      case 3'001
      attribute \amaranth.decoding "Y1/2"
      case 3'010
      attribute \amaranth.decoding "Y2/3"
      case 3'011
      attribute \amaranth.decoding "D1/4"
      case 3'100
      attribute \amaranth.decoding "D2/5"
      case 3'101
      attribute \amaranth.decoding "Hold/6"
      case 3'110
        assign \s 1'1
    end
  end
  process $group_5
    assign \data_complete 1'0
    switch \fsm_state
      attribute \amaranth.decoding "X1/0"
      case 3'000
      attribute \amaranth.decoding "X2/1"
      case 3'001
      attribute \amaranth.decoding "Y1/2"
      case 3'010
      attribute \amaranth.decoding "Y2/3"
      case 3'011
      attribute \amaranth.decoding "D1/4"
      case 3'100
      attribute \amaranth.decoding "D2/5"
      case 3'101
      attribute \amaranth.decoding "Hold/6"
      case 3'110
        assign \data_complete 1'1
    end
  end
  cell $dff $1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 48
    connect \CLK \clk
    connect \D \data$next
    connect \Q \data
  end
  cell $dff $2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 3
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.VectorModeCtrl.VectorWriter
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \data_complete
  wire width 8 output 4 \in_fifo_w_data
  wire width 1 input 5 \write_happened
  wire width 1 output 6 \data_valid
  wire width 1 input 7 \strobe_in
  wire width 16 input 8 \data_c
  wire width 1 \w
  attribute \init 2'00
  wire width 2 \fsm_state
  wire width 2 \fsm_state$next
  process $group_0
    assign \w 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        assign \w 1'1
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
    end
  end
  process $group_1
    assign \data_valid 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            assign \data_valid 1'1
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
        assign \data_valid 1'1
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \data_valid 1'1
    end
  end
  process $group_2
    assign \in_fifo_w_data 8'00000000
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            assign \in_fifo_w_data \data_c [7:0]
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
        assign \in_fifo_w_data \data_c [7:0]
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \in_fifo_w_data \data_c [15:8]
    end
  end
  attribute \init 16'0000000000000000
  wire width 16 \data
  wire width 16 \data$next
  process $group_3
    assign \data$next \data
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            assign \data$next \data_c
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
    end
    switch $signal
      case 1'1
        assign \data$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \data$next 16'0000000000000000
    end
  end
  process $group_4
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
        switch { \strobe_in }
          case 1'1
            switch { \write_happened }
              case 1'1
                assign \fsm_state$next 2'01
              case
                assign \fsm_state$next 2'10
            end
        end
      attribute \amaranth.decoding "D1/2"
      case 2'10
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 2'01
        end
      attribute \amaranth.decoding "D2/1"
      case 2'01
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 2'00
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 2'00
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 2'00
    end
  end
  wire width 3 \f
  process $group_5
    assign \f 3'000
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
      attribute \amaranth.decoding "D1/2"
      case 2'10
        assign \f 3'001
      attribute \amaranth.decoding "D2/1"
      case 2'01
    end
  end
  process $group_6
    assign \data_complete 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \data_complete 1'1
    end
  end
  wire width 1 \lf
  process $group_7
    assign \lf 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Waiting/0"
      case 2'00
      attribute \amaranth.decoding "D1/2"
      case 2'10
      attribute \amaranth.decoding "D2/1"
      case 2'01
        assign \lf 1'1
    end
  end
  cell $dff $1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \data$next
    connect \Q \data
  end
  cell $dff $2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.VectorModeCtrl
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \data_complete
  wire width 1 output 4 \data_complete$1
  wire width 1 input 5 \read_happened
  wire width 1 input 6 \load_next_point
  wire width 1 input 7 \write_this_point
  wire width 1 output 8 \data_fresh
  wire width 16 input 9 \adc_data_avgd
  wire width 48 output 10 \beam_controller_next
  wire width 8 output 11 \in_fifo_w_data
  wire width 1 input 12 \write_happened
  wire width 1 output 13 \data_valid
  wire width 8 input 14 \out_fifo_r_data
  wire width 1 \VectorReader_data_used
  wire width 48 \VectorReader_data
  cell \top.multiplexer.U$$0.ModeCtrl.VectorModeCtrl.VectorReader \VectorReader
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \data_complete \data_complete$1
    connect \read_happened \read_happened
    connect \data_fresh \data_fresh
    connect \out_fifo_r_data \out_fifo_r_data
    connect \data_used \VectorReader_data_used
    connect \data \VectorReader_data
  end
  wire width 1 \VectorWriter_strobe_in
  wire width 16 \VectorWriter_data_c
  cell \top.multiplexer.U$$0.ModeCtrl.VectorModeCtrl.VectorWriter \VectorWriter
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \data_complete \data_complete
    connect \in_fifo_w_data \in_fifo_w_data
    connect \write_happened \write_happened
    connect \data_valid \data_valid
    connect \strobe_in \VectorWriter_strobe_in
    connect \data_c \VectorWriter_data_c
  end
  process $group_0
    assign \VectorWriter_strobe_in 1'0
    switch { \write_this_point }
      case 1'1
        assign \VectorWriter_strobe_in 1'1
    end
  end
  process $group_1
    assign \VectorWriter_data_c 16'0000000000000000
    assign \VectorWriter_data_c \adc_data_avgd
  end
  process $group_2
    assign \VectorReader_data_used 1'0
    switch { \load_next_point }
      case 1'1
        assign \VectorReader_data_used 1'1
    end
  end
  process $group_3
    assign \beam_controller_next 48'000000000000000000000000000000000000000000000000
    switch { \load_next_point }
      case 1'1
        assign \beam_controller_next \VectorReader_data
    end
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.XInt
  wire width 8 input 0 \step_size
  wire width 16 output 1 \output
  wire width 16 input 2 \input
  wire width 24 $1
  wire width 24 $2
  cell $mul $3
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 8
    parameter \Y_WIDTH 24
    connect \A \input
    connect \B \step_size
    connect \Y $2
  end
  connect $1 $2
  process $group_0
    assign \output 16'0000000000000000
    assign \output $1 [15:0]
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.YInt
  wire width 8 input 0 \step_size
  wire width 16 output 1 \output
  wire width 16 input 2 \input
  wire width 24 $1
  wire width 24 $2
  cell $mul $3
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 8
    parameter \Y_WIDTH 24
    connect \A \input
    connect \B \step_size
    connect \Y $2
  end
  connect $1 $2
  process $group_0
    assign \output 16'0000000000000000
    assign \output $1 [15:0]
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.DwellAvgr
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 16 input 3 \pixel_in
  wire width 1 input 4 \strobe
  wire width 16 output 5 \running_average
  attribute \init 16'0000000000000000
  wire width 16 \running_average_s
  wire width 16 \running_average_s$next
  wire width 17 $1
  attribute \init 16'0000000000000000
  wire width 16 \prev_pixel
  wire width 16 \prev_pixel$next
  wire width 17 $2
  cell $add $3
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 17
    connect \A \pixel_in
    connect \B \prev_pixel
    connect \Y $2
  end
  wire width 17 $4
  cell $divfloor $5
    parameter \A_SIGNED 0
    parameter \A_WIDTH 17
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 17
    connect \A $2
    connect \B 2'10
    connect \Y $4
  end
  wire width 17 $6
  wire width 1 $7
  cell $eq $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A 2'10
    connect \B 1'0
    connect \Y $7
  end
  cell $mux $9
    parameter \WIDTH 17
    connect \A $4
    connect \B 17'00000000000000000
    connect \S $7
    connect \Y $6
  end
  connect $1 $6
  attribute \init 1'0
  wire width 1 \start_new_average_s
  wire width 1 \start_new_average_s$next
  wire width 1 $10
  cell $and $11
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \strobe
    connect \B \start_new_average_s
    connect \Y $10
  end
  process $group_0
    assign \running_average 16'0000000000000000
    assign \running_average \running_average_s
    switch { \strobe }
      case 1'1
        assign \running_average $1 [15:0]
    end
    switch { $10 }
      case 1'1
        assign \running_average \pixel_in
    end
  end
  attribute \init 16'0000000000000000
  wire width 16 \pixel_in_s
  wire width 16 \pixel_in_s$next
  process $group_1
    assign \pixel_in_s$next \pixel_in_s
    switch { \strobe }
      case 1'1
        assign \pixel_in_s$next \pixel_in
    end
    switch $signal
      case 1'1
        assign \pixel_in_s$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \pixel_in_s$next 16'0000000000000000
    end
  end
  wire width 17 $12
  wire width 17 $13
  cell $add $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 17
    connect \A \pixel_in
    connect \B \prev_pixel
    connect \Y $13
  end
  wire width 17 $15
  cell $divfloor $16
    parameter \A_SIGNED 0
    parameter \A_WIDTH 17
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 17
    connect \A $13
    connect \B 2'10
    connect \Y $15
  end
  wire width 17 $17
  wire width 1 $18
  cell $eq $19
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A 2'10
    connect \B 1'0
    connect \Y $18
  end
  cell $mux $20
    parameter \WIDTH 17
    connect \A $15
    connect \B 17'00000000000000000
    connect \S $18
    connect \Y $17
  end
  connect $12 $17
  wire width 1 $21
  cell $and $22
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \strobe
    connect \B \start_new_average_s
    connect \Y $21
  end
  process $group_2
    assign \running_average_s$next \running_average_s
    switch { \strobe }
      case 1'1
        assign \running_average_s$next $12 [15:0]
    end
    switch { $21 }
      case 1'1
        assign \running_average_s$next \pixel_in
    end
    switch $signal
      case 1'1
        assign \running_average_s$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \running_average_s$next 16'0000000000000000
    end
  end
  wire width 1 $23
  cell $and $24
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \strobe
    connect \B \start_new_average_s
    connect \Y $23
  end
  process $group_3
    assign \prev_pixel$next \prev_pixel
    switch { \strobe }
      case 1'1
        assign \prev_pixel$next \running_average
    end
    switch { $23 }
      case 1'1
        assign \prev_pixel$next \pixel_in
    end
    switch $signal
      case 1'1
        assign \prev_pixel$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \prev_pixel$next 16'0000000000000000
    end
  end
  wire width 1 $25
  cell $and $26
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \strobe
    connect \B \start_new_average_s
    connect \Y $25
  end
  process $group_4
    assign \start_new_average_s$next \start_new_average_s
    switch { $25 }
      case 1'1
        assign \start_new_average_s$next 1'0
    end
    switch { \strobe }
      case 1'1
        assign \start_new_average_s$next 1'1
    end
    switch $signal
      case 1'1
        assign \start_new_average_s$next 1'0
    end
    switch \rst
      case 1'1
        assign \start_new_average_s$next 1'0
    end
  end
  cell $dff $27
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \pixel_in_s$next
    connect \Q \pixel_in_s
  end
  cell $dff $28
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \running_average_s$next
    connect \Q \running_average_s
  end
  cell $dff $29
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \prev_pixel$next
    connect \Q \prev_pixel
  end
  cell $dff $30
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \start_new_average_s$next
    connect \Q \start_new_average_s
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl.ByteReplace
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 16 input 3 \point_data
  wire width 1 input 4 \replace_FF_to_FE
  wire width 16 output 5 \processed_point_data
  wire width 8 \most_significant_8_bits
  process $group_0
    assign \most_significant_8_bits 8'00000000
    assign \most_significant_8_bits \point_data [13:6]
  end
  wire width 1 \eight_bit_output
  wire width 1 \replace_0_to_1
  wire width 16 \zero
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \point_data
    connect \B \zero
    connect \Y $1
  end
  wire width 1 $3
  cell $eq $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \most_significant_8_bits
    connect \B 1'0
    connect \Y $3
  end
  wire width 1 \replace_0_to_2
  wire width 16 \one
  wire width 1 $5
  cell $eq $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \point_data
    connect \B \one
    connect \Y $5
  end
  wire width 1 $7
  cell $eq $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 16
    parameter \B_SIGNED 0
    parameter \B_WIDTH 16
    parameter \Y_WIDTH 1
    connect \A \point_data
    connect \B \zero
    connect \Y $7
  end
  wire width 1 $9
  cell $or $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $5
    connect \B $7
    connect \Y $9
  end
  wire width 1 $11
  cell $eq $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \most_significant_8_bits
    connect \B 1'1
    connect \Y $11
  end
  wire width 1 $13
  cell $eq $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \most_significant_8_bits
    connect \B 1'0
    connect \Y $13
  end
  wire width 1 $15
  cell $or $16
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $11
    connect \B $13
    connect \Y $15
  end
  wire width 1 $17
  cell $eq $18
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \B_SIGNED 0
    parameter \B_WIDTH 8
    parameter \Y_WIDTH 1
    connect \A \most_significant_8_bits
    connect \B 8'11111111
    connect \Y $17
  end
  process $group_1
    assign \processed_point_data 16'0000000000000000
    switch { \eight_bit_output }
      case 1'1
        assign \processed_point_data [7:0] \most_significant_8_bits
        assign \processed_point_data [15:8] 8'00000000
      case
        assign \processed_point_data \point_data
    end
    switch { \replace_0_to_1 }
      case 1'1
        switch { $1 }
          case 1'1
            assign \processed_point_data 16'0000000000000001
        end
        switch { \eight_bit_output }
          case 1'1
            switch { $3 }
              case 1'1
                assign \processed_point_data [7:0] 8'00000001
            end
        end
    end
    switch { \replace_0_to_2 }
      case 1'1
        switch { $9 }
          case 1'1
            assign \processed_point_data 16'0000000000000010
        end
        switch { \eight_bit_output }
          case 1'1
            switch { $15 }
              case 1'1
                assign \processed_point_data [7:0] 8'00000010
            end
        end
    end
    switch { \replace_FF_to_FE }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
            switch { $17 }
              case 1'1
                assign \processed_point_data [7:0] 8'11111110
            end
        end
    end
  end
  process $group_2
    assign \zero 16'0000000000000000
    assign \zero [7:0] 8'00000000
    assign \zero [15:8] 8'00000000
  end
  process $group_3
    assign \one 16'0000000000000000
    assign \one [7:0] 8'00000001
    assign \one [15:8] 8'00000000
  end
  attribute \init 1'0
  wire width 1 \s
  wire width 1 \s$next
  process $group_4
    assign \s$next \s
    assign \s$next 1'1
    switch $signal
      case 1'1
        assign \s$next 1'0
    end
    switch \rst
      case 1'1
        assign \s$next 1'0
    end
  end
  cell $dff $19
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \s$next
    connect \Q \s
  end
  connect \eight_bit_output 1'0
  connect \replace_0_to_1 1'0
  connect \replace_0_to_2 1'0
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ModeCtrl
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 input 3 \replace_FF_to_FE
  wire width 8 input 4 \step_size
  wire width 8 input 5 \step_size$1
  wire width 1 output 6 \writer_data_complete
  wire width 1 input 7 \reset
  wire width 1 input 8 \disable_dwell
  wire width 2 input 9 \mode
  wire width 1 input 10 \external_force_load_new_point
  wire width 8 input 11 \const_dwell_time
  wire width 1 input 12 \eight_bit_output
  wire width 16 input 13 \x_full_frame_resolution
  wire width 16 input 14 \y_full_frame_resolution
  wire width 16 input 15 \x_upper_limit
  wire width 16 input 16 \x_lower_limit
  wire width 16 input 17 \y_upper_limit
  wire width 16 input 18 \y_lower_limit
  wire width 1 output 19 \dwelling
  wire width 1 input 20 \count_enable
  wire width 14 output 21 \x_position
  wire width 14 output 22 \y_position
  wire width 1 input 23 \adc_data_strobe
  wire width 16 input 24 \adc_data
  wire width 1 output 25 \reader_data_complete
  wire width 8 input 26 \out_fifo_r_data
  wire width 1 input 27 \read_happened
  wire width 1 output 28 \writer_data_valid
  wire width 1 input 29 \write_happened
  wire width 1 input 30 \write_ready
  wire width 8 output 31 \in_fifo_w_data
  wire width 14 \BeamController_next_x_position
  wire width 14 \BeamController_next_y_position
  wire width 1 \BeamController_reset
  wire width 1 \BeamController_lock_new_point
  wire width 1 \BeamController_end_of_dwell
  wire width 1 \BeamController_at_dwell
  wire width 16 \BeamController_next_dwell
  cell \top.multiplexer.U$$0.ModeCtrl.BeamController \BeamController
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \dwelling \dwelling
    connect \count_enable \count_enable
    connect \x_position \x_position
    connect \y_position \y_position
    connect \next_x_position \BeamController_next_x_position
    connect \next_y_position \BeamController_next_y_position
    connect \reset \BeamController_reset
    connect \lock_new_point \BeamController_lock_new_point
    connect \end_of_dwell \BeamController_end_of_dwell
    connect \at_dwell \BeamController_at_dwell
    connect \next_dwell \BeamController_next_dwell
  end
  wire width 1 \RasterModeCtrl_reset
  wire width 1 \RasterModeCtrl_xy_scan_gen_increment
  wire width 1 \RasterModeCtrl_eight_bit_output
  wire width 16 \RasterModeCtrl_x_full_frame_resolution
  wire width 16 \RasterModeCtrl_y_full_frame_resolution
  wire width 48 \RasterModeCtrl_beam_controller_next
  wire width 16 \RasterModeCtrl_adc_data_avgd
  wire width 8 \RasterModeCtrl_in_fifo_w_data
  wire width 1 \RasterModeCtrl_write_happened
  wire width 1 \RasterModeCtrl_data_valid
  wire width 1 \RasterModeCtrl_data_complete
  wire width 8 \RasterModeCtrl_in_fifo_w_data$2
  wire width 1 \RasterModeCtrl_write_happened$3
  wire width 1 \RasterModeCtrl_data_valid$4
  wire width 1 \RasterModeCtrl_data_complete$5
  wire width 1 \RasterModeCtrl_load_next_point
  wire width 1 \RasterModeCtrl_write_this_point
  wire width 1 \RasterModeCtrl_data_complete$6
  wire width 1 \RasterModeCtrl_data_fresh
  wire width 8 \RasterModeCtrl_out_fifo_r_data
  wire width 1 \RasterModeCtrl_read_happened
  cell \top.multiplexer.U$$0.ModeCtrl.RasterModeCtrl \RasterModeCtrl
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \x_upper_limit \x_upper_limit
    connect \x_lower_limit \x_lower_limit
    connect \y_upper_limit \y_upper_limit
    connect \y_lower_limit \y_lower_limit
    connect \reset \RasterModeCtrl_reset
    connect \xy_scan_gen_increment \RasterModeCtrl_xy_scan_gen_increment
    connect \eight_bit_output \RasterModeCtrl_eight_bit_output
    connect \x_full_frame_resolution \RasterModeCtrl_x_full_frame_resolution
    connect \y_full_frame_resolution \RasterModeCtrl_y_full_frame_resolution
    connect \beam_controller_next \RasterModeCtrl_beam_controller_next
    connect \adc_data_avgd \RasterModeCtrl_adc_data_avgd
    connect \in_fifo_w_data \RasterModeCtrl_in_fifo_w_data
    connect \write_happened \RasterModeCtrl_write_happened
    connect \data_valid \RasterModeCtrl_data_valid
    connect \data_complete \RasterModeCtrl_data_complete
    connect \in_fifo_w_data$1 \RasterModeCtrl_in_fifo_w_data$2
    connect \write_happened$2 \RasterModeCtrl_write_happened$3
    connect \data_valid$3 \RasterModeCtrl_data_valid$4
    connect \data_complete$4 \RasterModeCtrl_data_complete$5
    connect \load_next_point \RasterModeCtrl_load_next_point
    connect \write_this_point \RasterModeCtrl_write_this_point
    connect \data_complete$5 \RasterModeCtrl_data_complete$6
    connect \data_fresh \RasterModeCtrl_data_fresh
    connect \out_fifo_r_data \RasterModeCtrl_out_fifo_r_data
    connect \read_happened \RasterModeCtrl_read_happened
  end
  wire width 1 \VectorModeCtrl_data_complete
  wire width 1 \VectorModeCtrl_data_complete$7
  wire width 1 \VectorModeCtrl_read_happened
  wire width 1 \VectorModeCtrl_load_next_point
  wire width 1 \VectorModeCtrl_write_this_point
  wire width 1 \VectorModeCtrl_data_fresh
  wire width 16 \VectorModeCtrl_adc_data_avgd
  wire width 48 \VectorModeCtrl_beam_controller_next
  wire width 8 \VectorModeCtrl_in_fifo_w_data
  wire width 1 \VectorModeCtrl_write_happened
  wire width 1 \VectorModeCtrl_data_valid
  wire width 8 \VectorModeCtrl_out_fifo_r_data
  cell \top.multiplexer.U$$0.ModeCtrl.VectorModeCtrl \VectorModeCtrl
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \data_complete \VectorModeCtrl_data_complete
    connect \data_complete$1 \VectorModeCtrl_data_complete$7
    connect \read_happened \VectorModeCtrl_read_happened
    connect \load_next_point \VectorModeCtrl_load_next_point
    connect \write_this_point \VectorModeCtrl_write_this_point
    connect \data_fresh \VectorModeCtrl_data_fresh
    connect \adc_data_avgd \VectorModeCtrl_adc_data_avgd
    connect \beam_controller_next \VectorModeCtrl_beam_controller_next
    connect \in_fifo_w_data \VectorModeCtrl_in_fifo_w_data
    connect \write_happened \VectorModeCtrl_write_happened
    connect \data_valid \VectorModeCtrl_data_valid
    connect \out_fifo_r_data \VectorModeCtrl_out_fifo_r_data
  end
  wire width 16 \XInt_output
  wire width 16 \XInt_input
  cell \top.multiplexer.U$$0.ModeCtrl.XInt \XInt
    connect \step_size \step_size
    connect \output \XInt_output
    connect \input \XInt_input
  end
  wire width 16 \YInt_output
  wire width 16 \YInt_input
  cell \top.multiplexer.U$$0.ModeCtrl.YInt \YInt
    connect \step_size \step_size$1
    connect \output \YInt_output
    connect \input \YInt_input
  end
  wire width 16 \DwellAvgr_pixel_in
  wire width 1 \DwellAvgr_strobe
  wire width 16 \DwellAvgr_running_average
  cell \top.multiplexer.U$$0.ModeCtrl.DwellAvgr \DwellAvgr
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \pixel_in \DwellAvgr_pixel_in
    connect \strobe \DwellAvgr_strobe
    connect \running_average \DwellAvgr_running_average
  end
  wire width 16 \ByteReplace_point_data
  wire width 1 \ByteReplace_replace_FF_to_FE
  wire width 16 \ByteReplace_processed_point_data
  cell \top.multiplexer.U$$0.ModeCtrl.ByteReplace \ByteReplace
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \point_data \ByteReplace_point_data
    connect \replace_FF_to_FE \ByteReplace_replace_FF_to_FE
    connect \processed_point_data \ByteReplace_processed_point_data
  end
  wire width 16 \frame_size
  process $group_0
    assign \frame_size 16'0000000000000000
    assign \frame_size \x_full_frame_resolution
  end
  wire width 16 \frame_size$8
  process $group_1
    assign \frame_size$8 16'0000000000000000
    assign \frame_size$8 \y_full_frame_resolution
  end
  process $group_2
    assign \DwellAvgr_pixel_in 16'0000000000000000
    assign \DwellAvgr_pixel_in \adc_data
  end
  process $group_3
    assign \DwellAvgr_strobe 1'0
    assign \DwellAvgr_strobe \adc_data_strobe
  end
  process $group_4
    assign \ByteReplace_point_data 16'0000000000000000
    assign \ByteReplace_point_data \DwellAvgr_running_average
  end
  process $group_5
    assign \ByteReplace_replace_FF_to_FE 1'0
    assign \ByteReplace_replace_FF_to_FE \replace_FF_to_FE
  end
  process $group_6
    assign \BeamController_next_x_position 14'00000000000000
    assign \BeamController_next_x_position \XInt_output [13:0]
  end
  process $group_7
    assign \BeamController_next_y_position 14'00000000000000
    assign \BeamController_next_y_position \YInt_output [13:0]
  end
  process $group_8
    assign \RasterModeCtrl_reset 1'0
    assign \RasterModeCtrl_reset \reset
  end
  wire width 1 \xy_scan_gen_increment
  wire width 1 $9
  cell $eq $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $9
  end
  wire width 1 $11
  cell $eq $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $11
  end
  wire width 1 $13
  cell $or $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $9
    connect \B $11
    connect \Y $13
  end
  process $group_9
    assign \RasterModeCtrl_xy_scan_gen_increment 1'0
    assign \RasterModeCtrl_xy_scan_gen_increment \xy_scan_gen_increment
    switch { $13 }
      case 1'1
        switch { \external_force_load_new_point }
          case 1'1
            assign \RasterModeCtrl_xy_scan_gen_increment 1'1
        end
    end
  end
  process $group_10
    assign \RasterModeCtrl_eight_bit_output 1'0
    assign \RasterModeCtrl_eight_bit_output \eight_bit_output
  end
  process $group_11
    assign \BeamController_reset 1'0
    assign \BeamController_reset \reset
  end
  wire width 1 \load_next_point
  wire width 1 \force_load_new_point
  wire width 1 $15
  cell $or $16
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \force_load_new_point
    connect \B \external_force_load_new_point
    connect \Y $15
  end
  process $group_12
    assign \BeamController_lock_new_point 1'0
    assign \BeamController_lock_new_point \load_next_point
    switch { $15 }
      case 1'1
        assign \BeamController_lock_new_point 1'1
    end
  end
  wire width 1 \internal_fifo_ready
  process $group_13
    assign \internal_fifo_ready 1'0
    assign \internal_fifo_ready 1'1
  end
  wire width 1 $17
  cell $or $18
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \force_load_new_point
    connect \B \external_force_load_new_point
    connect \Y $17
  end
  wire width 1 $19
  cell $eq $20
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $19
  end
  wire width 1 $21
  cell $eq $22
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $21
  end
  wire width 1 $23
  cell $or $24
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $19
    connect \B $21
    connect \Y $23
  end
  wire width 1 \reader_data_fresh
  wire width 1 $25
  cell $and $26
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \BeamController_end_of_dwell
    connect \B \reader_data_fresh
    connect \Y $25
  end
  attribute \init 1'0
  wire width 1 \fsm_state
  wire width 1 \fsm_state$next
  wire width 1 $27
  cell $eq $28
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $27
  end
  process $group_14
    assign \load_next_point 1'0
    switch { $17 }
      case 1'1
        assign \load_next_point 1'1
    end
    switch { $23 }
      case 1'1
        switch { $25 }
          case 1'1
            assign \load_next_point 1'1
        end
        switch \fsm_state
          attribute \amaranth.decoding "Wait for first USB/0"
          case 1'0
            switch { \reader_data_complete }
              case 1'1
                assign \load_next_point 1'1
            end
          attribute \amaranth.decoding "Patterning/1"
          case 1'1
        end
    end
    switch { $27 }
      case 1'1
        assign \load_next_point \BeamController_end_of_dwell
    end
  end
  wire width 1 \start_new_average
  wire width 1 $29
  cell $or $30
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \force_load_new_point
    connect \B \external_force_load_new_point
    connect \Y $29
  end
  wire width 1 $31
  cell $eq $32
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $31
  end
  wire width 1 $33
  cell $eq $34
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $33
  end
  wire width 1 $35
  cell $or $36
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $31
    connect \B $33
    connect \Y $35
  end
  wire width 1 $37
  cell $and $38
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \BeamController_end_of_dwell
    connect \B \reader_data_fresh
    connect \Y $37
  end
  wire width 1 $39
  cell $eq $40
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $39
  end
  process $group_15
    assign \start_new_average 1'0
    switch { $29 }
      case 1'1
        assign \start_new_average 1'1
    end
    switch { $35 }
      case 1'1
        switch { $37 }
          case 1'1
            assign \start_new_average \BeamController_at_dwell
        end
        switch \fsm_state
          attribute \amaranth.decoding "Wait for first USB/0"
          case 1'0
            switch { \reader_data_complete }
              case 1'1
                assign \start_new_average 1'1
            end
          attribute \amaranth.decoding "Patterning/1"
          case 1'1
        end
    end
    switch { $39 }
      case 1'1
        assign \start_new_average \BeamController_at_dwell
    end
  end
  attribute \init 1'0
  wire width 1 \data_stale
  wire width 1 \data_stale$next
  wire width 1 $41
  cell $eq $42
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $41
  end
  wire width 1 $43
  cell $eq $44
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $43
  end
  wire width 1 $45
  cell $or $46
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $41
    connect \B $43
    connect \Y $45
  end
  wire width 1 $47
  cell $not $48
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \reader_data_fresh
    connect \Y $47
  end
  wire width 1 $49
  cell $and $50
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \BeamController_end_of_dwell
    connect \B $47
    connect \Y $49
  end
  wire width 1 $51
  cell $and $52
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \BeamController_end_of_dwell
    connect \B \reader_data_fresh
    connect \Y $51
  end
  process $group_16
    assign \data_stale$next \data_stale
    switch { $45 }
      case 1'1
        switch { $49 }
          case 1'1
            assign \data_stale$next 1'1
        end
        switch { $51 }
          case 1'1
            assign \data_stale$next 1'0
        end
    end
    switch $signal
      case 1'1
        assign \data_stale$next 1'0
    end
    switch \rst
      case 1'1
        assign \data_stale$next 1'0
    end
  end
  wire width 1 \write_this_point
  wire width 1 $53
  cell $eq $54
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $53
  end
  wire width 1 $55
  cell $eq $56
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $55
  end
  wire width 1 $57
  cell $or $58
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $53
    connect \B $55
    connect \Y $57
  end
  wire width 1 $59
  cell $not $60
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \reader_data_fresh
    connect \Y $59
  end
  wire width 1 $61
  cell $and $62
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \BeamController_end_of_dwell
    connect \B $59
    connect \Y $61
  end
  wire width 1 $63
  cell $not $64
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \data_stale
    connect \Y $63
  end
  wire width 1 $65
  cell $and $66
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \BeamController_end_of_dwell
    connect \B \reader_data_fresh
    connect \Y $65
  end
  wire width 1 $67
  cell $not $68
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \data_stale
    connect \Y $67
  end
  wire width 1 $69
  cell $eq $70
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $69
  end
  process $group_17
    assign \write_this_point 1'0
    switch { $57 }
      case 1'1
        switch { $61 }
          case 1'1
            switch { $63 }
              case 1'1
                assign \write_this_point 1'1
            end
        end
        switch { $65 }
          case 1'1
            switch { $67 }
              case 1'1
                assign \write_this_point 1'1
            end
        end
    end
    switch { $69 }
      case 1'1
        assign \write_this_point \BeamController_end_of_dwell
    end
  end
  wire width 1 $71
  cell $eq $72
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $71
  end
  wire width 1 $73
  cell $eq $74
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $73
  end
  wire width 1 $75
  cell $or $76
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $71
    connect \B $73
    connect \Y $75
  end
  wire width 1 $77
  cell $not $78
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \disable_dwell
    connect \Y $77
  end
  wire width 1 $79
  cell $and $80
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \write_ready
    connect \B $77
    connect \Y $79
  end
  wire width 1 $81
  cell $not $82
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \disable_dwell
    connect \Y $81
  end
  wire width 1 $83
  cell $and $84
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \write_ready
    connect \B $81
    connect \Y $83
  end
  wire width 1 $85
  cell $eq $86
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $85
  end
  wire width 1 $87
  cell $not $88
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \disable_dwell
    connect \Y $87
  end
  wire width 1 $89
  cell $and $90
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \write_ready
    connect \B $87
    connect \Y $89
  end
  process $group_18
    assign \dwelling 1'0
    switch { $75 }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Wait for first USB/0"
          case 1'0
            switch { \reader_data_complete }
              case 1'1
                assign \dwelling $79
            end
          attribute \amaranth.decoding "Patterning/1"
          case 1'1
            assign \dwelling $83
        end
    end
    switch { $85 }
      case 1'1
        assign \dwelling $89
    end
  end
  wire width 1 $91
  cell $eq $92
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $91
  end
  wire width 1 $93
  cell $eq $94
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $93
  end
  wire width 1 $95
  cell $or $96
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $91
    connect \B $93
    connect \Y $95
  end
  process $group_19
    assign \fsm_state$next \fsm_state
    switch { $95 }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Wait for first USB/0"
          case 1'0
            switch { \reader_data_complete }
              case 1'1
                assign \fsm_state$next 1'1
            end
          attribute \amaranth.decoding "Patterning/1"
          case 1'1
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 1'0
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 1'0
    end
  end
  wire width 1 $97
  cell $eq $98
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $97
  end
  wire width 1 $99
  cell $eq $100
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $99
  end
  wire width 1 $101
  cell $or $102
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $97
    connect \B $99
    connect \Y $101
  end
  process $group_20
    assign \RasterModeCtrl_x_full_frame_resolution 16'0000000000000000
    switch { $101 }
      case 1'1
        assign \RasterModeCtrl_x_full_frame_resolution \x_full_frame_resolution
    end
  end
  wire width 1 $103
  cell $eq $104
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $103
  end
  wire width 1 $105
  cell $eq $106
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $105
  end
  wire width 1 $107
  cell $or $108
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $103
    connect \B $105
    connect \Y $107
  end
  process $group_21
    assign \RasterModeCtrl_y_full_frame_resolution 16'0000000000000000
    switch { $107 }
      case 1'1
        assign \RasterModeCtrl_y_full_frame_resolution \y_full_frame_resolution
    end
  end
  wire width 1 $109
  cell $eq $110
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $109
  end
  wire width 1 $111
  cell $eq $112
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $111
  end
  wire width 1 $113
  cell $or $114
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $109
    connect \B $111
    connect \Y $113
  end
  wire width 1 $115
  cell $eq $116
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $115
  end
  process $group_22
    assign \XInt_input 16'0000000000000000
    switch { $113 }
      case 1'1
        assign \XInt_input \RasterModeCtrl_beam_controller_next [15:0]
    end
    switch { $115 }
      case 1'1
        assign \XInt_input \VectorModeCtrl_beam_controller_next [15:0]
    end
  end
  wire width 1 $117
  cell $eq $118
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $117
  end
  wire width 1 $119
  cell $eq $120
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $119
  end
  wire width 1 $121
  cell $or $122
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $117
    connect \B $119
    connect \Y $121
  end
  wire width 1 $123
  cell $eq $124
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $123
  end
  process $group_23
    assign \YInt_input 16'0000000000000000
    switch { $121 }
      case 1'1
        assign \YInt_input \RasterModeCtrl_beam_controller_next [31:16]
    end
    switch { $123 }
      case 1'1
        assign \YInt_input \VectorModeCtrl_beam_controller_next [31:16]
    end
  end
  wire width 1 \beam_controller_end_of_dwell
  wire width 1 $125
  cell $eq $126
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $125
  end
  wire width 1 $127
  cell $eq $128
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $127
  end
  wire width 1 $129
  cell $or $130
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $125
    connect \B $127
    connect \Y $129
  end
  process $group_24
    assign \beam_controller_end_of_dwell 1'0
    switch { $129 }
      case 1'1
        assign \beam_controller_end_of_dwell \BeamController_end_of_dwell
    end
  end
  wire width 1 $131
  cell $eq $132
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $131
  end
  wire width 1 $133
  cell $eq $134
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $133
  end
  wire width 1 $135
  cell $or $136
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $131
    connect \B $133
    connect \Y $135
  end
  process $group_25
    assign \RasterModeCtrl_adc_data_avgd 16'0000000000000000
    switch { $135 }
      case 1'1
        assign \RasterModeCtrl_adc_data_avgd \ByteReplace_processed_point_data
    end
  end
  wire width 1 $137
  cell $eq $138
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $137
  end
  wire width 1 $139
  cell $eq $140
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $139
  end
  wire width 1 $141
  cell $or $142
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $137
    connect \B $139
    connect \Y $141
  end
  wire width 1 $143
  cell $eq $144
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $143
  end
  process $group_26
    assign \in_fifo_w_data 8'00000000
    switch { $141 }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
            assign \in_fifo_w_data \RasterModeCtrl_in_fifo_w_data
          case
            assign \in_fifo_w_data \RasterModeCtrl_in_fifo_w_data$2
        end
    end
    switch { $143 }
      case 1'1
        assign \in_fifo_w_data \VectorModeCtrl_in_fifo_w_data
    end
  end
  wire width 1 $145
  cell $eq $146
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $145
  end
  wire width 1 $147
  cell $eq $148
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $147
  end
  wire width 1 $149
  cell $or $150
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $145
    connect \B $147
    connect \Y $149
  end
  process $group_27
    assign \RasterModeCtrl_write_happened 1'0
    switch { $149 }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
            assign \RasterModeCtrl_write_happened \write_happened
          case
        end
    end
  end
  wire width 1 $151
  cell $eq $152
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $151
  end
  wire width 1 $153
  cell $eq $154
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $153
  end
  wire width 1 $155
  cell $or $156
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $151
    connect \B $153
    connect \Y $155
  end
  wire width 1 $157
  cell $eq $158
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $157
  end
  process $group_28
    assign \writer_data_valid 1'0
    switch { $155 }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
            assign \writer_data_valid \RasterModeCtrl_data_valid
          case
            assign \writer_data_valid \RasterModeCtrl_data_valid$4
        end
    end
    switch { $157 }
      case 1'1
        assign \writer_data_valid \VectorModeCtrl_data_valid
    end
  end
  wire width 1 $159
  cell $eq $160
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $159
  end
  wire width 1 $161
  cell $eq $162
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $161
  end
  wire width 1 $163
  cell $or $164
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $159
    connect \B $161
    connect \Y $163
  end
  wire width 1 $165
  cell $eq $166
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $165
  end
  process $group_29
    assign \writer_data_complete 1'0
    switch { $163 }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
            assign \writer_data_complete \RasterModeCtrl_data_complete
          case
            assign \writer_data_complete \RasterModeCtrl_data_complete$5
        end
    end
    switch { $165 }
      case 1'1
        assign \writer_data_complete \VectorModeCtrl_data_complete
    end
  end
  wire width 1 $167
  cell $eq $168
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $167
  end
  wire width 1 $169
  cell $eq $170
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $169
  end
  wire width 1 $171
  cell $or $172
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $167
    connect \B $169
    connect \Y $171
  end
  process $group_30
    assign \RasterModeCtrl_write_happened$3 1'0
    switch { $171 }
      case 1'1
        switch { \eight_bit_output }
          case 1'1
          case
            assign \RasterModeCtrl_write_happened$3 \write_happened
        end
    end
  end
  wire width 1 $173
  cell $eq $174
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $173
  end
  wire width 1 $175
  cell $eq $176
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $175
  end
  wire width 1 $177
  cell $or $178
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $173
    connect \B $175
    connect \Y $177
  end
  process $group_31
    assign \RasterModeCtrl_load_next_point 1'0
    switch { $177 }
      case 1'1
        assign \RasterModeCtrl_load_next_point \load_next_point
    end
  end
  wire width 1 $179
  cell $eq $180
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $179
  end
  wire width 1 $181
  cell $eq $182
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $181
  end
  wire width 1 $183
  cell $or $184
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $179
    connect \B $181
    connect \Y $183
  end
  process $group_32
    assign \RasterModeCtrl_write_this_point 1'0
    switch { $183 }
      case 1'1
        assign \RasterModeCtrl_write_this_point \write_this_point
    end
  end
  wire width 1 $185
  cell $eq $186
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'01
    connect \Y $185
  end
  wire width 16 $187
  cell $pos $188
    parameter \A_SIGNED 0
    parameter \A_WIDTH 8
    parameter \Y_WIDTH 16
    connect \A \const_dwell_time
    connect \Y $187
  end
  wire width 1 $189
  cell $eq $190
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $189
  end
  wire width 1 $191
  cell $eq $192
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $191
  end
  process $group_33
    assign \BeamController_next_dwell 16'0000000000000000
    switch { $185 }
      case 1'1
        assign \BeamController_next_dwell $187
    end
    switch { $189 }
      case 1'1
        assign \BeamController_next_dwell \RasterModeCtrl_beam_controller_next [47:32]
    end
    switch { $191 }
      case 1'1
        assign \BeamController_next_dwell \VectorModeCtrl_beam_controller_next [47:32]
    end
  end
  wire width 1 $193
  cell $eq $194
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $193
  end
  wire width 1 $195
  cell $eq $196
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $195
  end
  process $group_34
    assign \reader_data_complete 1'0
    switch { $193 }
      case 1'1
        assign \reader_data_complete \RasterModeCtrl_data_complete$6
    end
    switch { $195 }
      case 1'1
        assign \reader_data_complete \VectorModeCtrl_data_complete$7
    end
  end
  wire width 1 $197
  cell $eq $198
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $197
  end
  wire width 1 $199
  cell $eq $200
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $199
  end
  process $group_35
    assign \reader_data_fresh 1'0
    switch { $197 }
      case 1'1
        assign \reader_data_fresh \RasterModeCtrl_data_fresh
    end
    switch { $199 }
      case 1'1
        assign \reader_data_fresh \VectorModeCtrl_data_fresh
    end
  end
  wire width 1 $201
  cell $eq $202
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $201
  end
  process $group_36
    assign \RasterModeCtrl_out_fifo_r_data 8'00000000
    switch { $201 }
      case 1'1
        assign \RasterModeCtrl_out_fifo_r_data \out_fifo_r_data
    end
  end
  wire width 1 $203
  cell $eq $204
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'10
    connect \Y $203
  end
  process $group_37
    assign \RasterModeCtrl_read_happened 1'0
    switch { $203 }
      case 1'1
        assign \RasterModeCtrl_read_happened \read_happened
    end
  end
  wire width 1 $205
  cell $eq $206
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $205
  end
  process $group_38
    assign \VectorModeCtrl_read_happened 1'0
    switch { $205 }
      case 1'1
        assign \VectorModeCtrl_read_happened \read_happened
        assign \VectorModeCtrl_read_happened \read_happened
    end
  end
  wire width 1 $207
  cell $eq $208
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $207
  end
  process $group_39
    assign \VectorModeCtrl_load_next_point 1'0
    switch { $207 }
      case 1'1
        assign \VectorModeCtrl_load_next_point \load_next_point
    end
  end
  wire width 1 $209
  cell $eq $210
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $209
  end
  process $group_40
    assign \VectorModeCtrl_write_this_point 1'0
    switch { $209 }
      case 1'1
        assign \VectorModeCtrl_write_this_point \write_this_point
    end
  end
  wire width 1 \beam_controller_end_of_dwell$211
  wire width 1 $212
  cell $eq $213
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $212
  end
  process $group_41
    assign \beam_controller_end_of_dwell$211 1'0
    switch { $212 }
      case 1'1
        assign \beam_controller_end_of_dwell$211 \BeamController_end_of_dwell
    end
  end
  wire width 1 $214
  cell $eq $215
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $214
  end
  process $group_42
    assign \VectorModeCtrl_adc_data_avgd 16'0000000000000000
    switch { $214 }
      case 1'1
        assign \VectorModeCtrl_adc_data_avgd \ByteReplace_processed_point_data
    end
  end
  wire width 1 $216
  cell $eq $217
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $216
  end
  process $group_43
    assign \VectorModeCtrl_write_happened 1'0
    switch { $216 }
      case 1'1
        assign \VectorModeCtrl_write_happened \write_happened
    end
  end
  wire width 1 $218
  cell $eq $219
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \mode
    connect \B 2'11
    connect \Y $218
  end
  process $group_44
    assign \VectorModeCtrl_out_fifo_r_data 8'00000000
    switch { $218 }
      case 1'1
        assign \VectorModeCtrl_out_fifo_r_data \out_fifo_r_data
    end
  end
  cell $dff $220
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \data_stale$next
    connect \Q \data_stale
  end
  cell $dff $221
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
  connect \xy_scan_gen_increment 1'0
  connect \force_load_new_point 1'0
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.MuxBus.x_dac
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \le
  wire width 1 output 4 \oe
  wire width 1 input 5 \sampling
  wire width 1 output 6 \released
  process $group_0
    assign \oe 1'0
    assign \oe 1'0
  end
  attribute \init 2'01
  wire width 2 \fsm_state
  wire width 2 \fsm_state$next
  process $group_1
    assign \le 1'0
    assign \le 1'0
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Write/1"
          case 2'01
          attribute \amaranth.decoding "Latch/2"
          case 2'10
            assign \le 1'1
          attribute \amaranth.decoding "Release/0"
          case 2'00
        end
    end
  end
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \fsm_state
    connect \B 1'0
    connect \Y $1
  end
  process $group_2
    assign \released 1'0
    switch { \sampling }
      case 1'1
        assign \released $1
    end
  end
  process $group_3
    assign \fsm_state$next \fsm_state
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Write/1"
          case 2'01
            assign \fsm_state$next 2'10
          attribute \amaranth.decoding "Latch/2"
          case 2'10
            assign \fsm_state$next 2'00
          attribute \amaranth.decoding "Release/0"
          case 2'00
            assign \fsm_state$next 2'01
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 2'01
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 2'01
    end
  end
  cell $dff $3
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.MuxBus.y_dac
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \le
  wire width 1 output 4 \oe
  wire width 1 input 5 \sampling
  wire width 1 output 6 \released
  process $group_0
    assign \oe 1'0
    assign \oe 1'0
  end
  attribute \init 2'01
  wire width 2 \fsm_state
  wire width 2 \fsm_state$next
  process $group_1
    assign \le 1'0
    assign \le 1'0
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Write/1"
          case 2'01
          attribute \amaranth.decoding "Latch/2"
          case 2'10
            assign \le 1'1
          attribute \amaranth.decoding "Release/0"
          case 2'00
        end
    end
  end
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \fsm_state
    connect \B 1'0
    connect \Y $1
  end
  process $group_2
    assign \released 1'0
    switch { \sampling }
      case 1'1
        assign \released $1
    end
  end
  process $group_3
    assign \fsm_state$next \fsm_state
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Write/1"
          case 2'01
            assign \fsm_state$next 2'10
          attribute \amaranth.decoding "Latch/2"
          case 2'10
            assign \fsm_state$next 2'00
          attribute \amaranth.decoding "Release/0"
          case 2'00
            assign \fsm_state$next 2'01
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 2'01
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 2'01
    end
  end
  cell $dff $3
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.MuxBus.a_adc
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \le
  wire width 1 output 4 \oe
  wire width 1 output 5 \released
  wire width 1 input 6 \sampling
  attribute \init 2'01
  wire width 2 \fsm_state
  wire width 2 \fsm_state$next
  process $group_0
    assign \oe 1'0
    assign \oe 1'1
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Latch & Enable/1"
          case 2'01
            assign \oe 1'0
          attribute \amaranth.decoding "Read/2"
          case 2'10
          attribute \amaranth.decoding "Release/0"
          case 2'00
        end
    end
  end
  process $group_1
    assign \le 1'0
    assign \le 1'0
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Latch & Enable/1"
          case 2'01
            assign \le 1'1
          attribute \amaranth.decoding "Read/2"
          case 2'10
          attribute \amaranth.decoding "Release/0"
          case 2'00
        end
    end
  end
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \fsm_state
    connect \B 1'0
    connect \Y $1
  end
  process $group_2
    assign \released 1'0
    switch { \sampling }
      case 1'1
        assign \released $1
    end
  end
  process $group_3
    assign \fsm_state$next \fsm_state
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Latch & Enable/1"
          case 2'01
            assign \fsm_state$next 2'10
          attribute \amaranth.decoding "Read/2"
          case 2'10
            assign \fsm_state$next 2'00
          attribute \amaranth.decoding "Release/0"
          case 2'00
            assign \fsm_state$next 2'01
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 2'01
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 2'01
    end
  end
  cell $dff $3
    parameter \CLK_POLARITY 1
    parameter \WIDTH 2
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.MuxBus.sample_clock
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  attribute \init 1'0
  wire width 1 output 3 \clock
  wire width 1 \clock$next
  attribute \init 4'0000
  wire width 4 \timer
  wire width 4 \timer$next
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 4
    parameter \Y_WIDTH 1
    connect \A \timer
    connect \B 4'1011
    connect \Y $1
  end
  wire width 5 $3
  wire width 5 $4
  cell $add $5
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 5
    connect \A \timer
    connect \B 1'1
    connect \Y $4
  end
  connect $3 $4
  process $group_0
    assign \timer$next \timer
    switch { $1 }
      case 1'1
        assign \timer$next 4'0000
      case
        assign \timer$next $3 [3:0]
    end
    switch $signal
      case 1'1
        assign \timer$next 4'0000
    end
    switch \rst
      case 1'1
        assign \timer$next 4'0000
    end
  end
  wire width 1 $6
  cell $eq $7
    parameter \A_SIGNED 0
    parameter \A_WIDTH 4
    parameter \B_SIGNED 0
    parameter \B_WIDTH 4
    parameter \Y_WIDTH 1
    connect \A \timer
    connect \B 4'1011
    connect \Y $6
  end
  wire width 1 $8
  cell $not $9
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \clock
    connect \Y $8
  end
  process $group_1
    assign \clock$next \clock
    switch { $6 }
      case 1'1
        assign \clock$next $8
      case
    end
    switch $signal
      case 1'1
        assign \clock$next 1'0
    end
    switch \rst
      case 1'1
        assign \clock$next 1'0
    end
  end
  cell $dff $10
    parameter \CLK_POLARITY 1
    parameter \WIDTH 4
    connect \CLK \clk
    connect \D \timer$next
    connect \Q \timer
  end
  cell $dff $11
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \clock$next
    connect \Q \clock
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.MuxBus
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 1 output 3 \is_x
  wire width 1 output 4 \is_y
  wire width 1 output 5 \is_a
  wire width 1 output 6 \le
  wire width 1 output 7 \oe
  wire width 1 output 8 \le$1
  wire width 1 output 9 \oe$2
  wire width 1 output 10 \le$3
  wire width 1 output 11 \oe$4
  wire width 1 output 12 \clock
  wire width 1 input 13 \sampling
  wire width 1 output 14 \is_done
  wire width 1 output 15 \released
  wire width 1 \x_dac_sampling
  wire width 1 \x_dac_released
  cell \top.multiplexer.U$$0.MuxBus.x_dac \x_dac
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \le \le
    connect \oe \oe
    connect \sampling \x_dac_sampling
    connect \released \x_dac_released
  end
  wire width 1 \y_dac_sampling
  wire width 1 \y_dac_released
  cell \top.multiplexer.U$$0.MuxBus.y_dac \y_dac
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \le \le$1
    connect \oe \oe$2
    connect \sampling \y_dac_sampling
    connect \released \y_dac_released
  end
  wire width 1 \a_adc_sampling
  cell \top.multiplexer.U$$0.MuxBus.a_adc \a_adc
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \le \le$3
    connect \oe \oe$4
    connect \released \released
    connect \sampling \a_adc_sampling
  end
  cell \top.multiplexer.U$$0.MuxBus.sample_clock \sample_clock
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \clock \clock
  end
  wire width 1 \a_clock
  wire width 1 $5
  cell $not $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \clock
    connect \Y $5
  end
  process $group_0
    assign \a_clock 1'0
    assign \a_clock $5
  end
  wire width 1 \d_clock
  process $group_1
    assign \d_clock 1'0
    assign \d_clock \clock
  end
  attribute \init 3'011
  wire width 3 \fsm_state
  wire width 3 \fsm_state$next
  wire width 1 $7
  cell $eq $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \fsm_state
    connect \B 1'0
    connect \Y $7
  end
  process $group_2
    assign \is_x 1'0
    switch { \sampling }
      case 1'1
        assign \is_x $7
    end
  end
  wire width 1 $9
  cell $eq $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \fsm_state
    connect \B 1'1
    connect \Y $9
  end
  process $group_3
    assign \is_y 1'0
    switch { \sampling }
      case 1'1
        assign \is_y $9
    end
  end
  wire width 1 $11
  cell $eq $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \fsm_state
    connect \B 2'10
    connect \Y $11
  end
  process $group_4
    assign \is_a 1'0
    switch { \sampling }
      case 1'1
        assign \is_a $11
    end
  end
  wire width 1 $13
  cell $eq $14
    parameter \A_SIGNED 0
    parameter \A_WIDTH 3
    parameter \B_SIGNED 0
    parameter \B_WIDTH 2
    parameter \Y_WIDTH 1
    connect \A \fsm_state
    connect \B 2'11
    connect \Y $13
  end
  process $group_5
    assign \is_done 1'0
    switch { \sampling }
      case 1'1
        assign \is_done $13
    end
  end
  process $group_6
    assign \fsm_state$next \fsm_state
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Start/3"
          case 3'011
            assign \fsm_state$next 3'000
          attribute \amaranth.decoding "X/0"
          case 3'000
            switch { \x_dac_released }
              case 1'1
                assign \fsm_state$next 3'001
            end
          attribute \amaranth.decoding "Y/1"
          case 3'001
            switch { \y_dac_released }
              case 1'1
                assign \fsm_state$next 3'100
            end
          attribute \amaranth.decoding "Wait for A/4"
          case 3'100
            switch { \d_clock }
              case 1'1
                assign \fsm_state$next 3'010
            end
          attribute \amaranth.decoding "A/2"
          case 3'010
            switch { \released }
              case 1'1
                assign \fsm_state$next 3'101
            end
          attribute \amaranth.decoding "Wait/5"
          case 3'101
            switch { \a_clock }
              case 1'1
                assign \fsm_state$next 3'011
            end
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 3'011
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 3'011
    end
  end
  process $group_7
    assign \x_dac_sampling 1'0
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Start/3"
          case 3'011
          attribute \amaranth.decoding "X/0"
          case 3'000
            assign \x_dac_sampling 1'1
          attribute \amaranth.decoding "Y/1"
          case 3'001
          attribute \amaranth.decoding "Wait for A/4"
          case 3'100
          attribute \amaranth.decoding "A/2"
          case 3'010
          attribute \amaranth.decoding "Wait/5"
          case 3'101
        end
    end
  end
  process $group_8
    assign \y_dac_sampling 1'0
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Start/3"
          case 3'011
          attribute \amaranth.decoding "X/0"
          case 3'000
          attribute \amaranth.decoding "Y/1"
          case 3'001
            assign \y_dac_sampling 1'1
          attribute \amaranth.decoding "Wait for A/4"
          case 3'100
          attribute \amaranth.decoding "A/2"
          case 3'010
          attribute \amaranth.decoding "Wait/5"
          case 3'101
        end
    end
  end
  process $group_9
    assign \a_adc_sampling 1'0
    switch { \sampling }
      case 1'1
        switch \fsm_state
          attribute \amaranth.decoding "Start/3"
          case 3'011
          attribute \amaranth.decoding "X/0"
          case 3'000
          attribute \amaranth.decoding "Y/1"
          case 3'001
          attribute \amaranth.decoding "Wait for A/4"
          case 3'100
          attribute \amaranth.decoding "A/2"
          case 3'010
            assign \a_adc_sampling 1'1
          attribute \amaranth.decoding "Wait/5"
          case 3'101
        end
    end
  end
  cell $dff $15
    parameter \CLK_POLARITY 1
    parameter \WIDTH 3
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0.ConfigHdlr
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 64 input 3 \roi_registers
  wire width 2 input 4 \scan_mode
  wire width 8 input 5 \step_size
  attribute \init 8'00000000
  wire width 8 output 6 \step_size_locked
  wire width 8 \step_size_locked$next
  wire width 1 output 7 \writing_config
  wire width 1 input 8 \outer_configuration_flag
  wire width 1 input 9 \configuration_flag
  wire width 1 output 10 \config_flag_released
  wire width 1 input 11 \eight_bit_output
  attribute \init 1'0
  wire width 1 output 12 \eight_bit_output_locked
  wire width 1 \eight_bit_output_locked$next
  wire width 8 input 13 \x_full_frame_resolution_b1
  wire width 8 input 14 \x_full_frame_resolution_b2
  wire width 8 input 15 \y_full_frame_resolution_b1
  wire width 8 input 16 \y_full_frame_resolution_b2
  wire width 8 input 17 \x_upper_limit_b1
  wire width 8 input 18 \x_upper_limit_b2
  wire width 8 input 19 \x_lower_limit_b1
  wire width 8 input 20 \x_lower_limit_b2
  wire width 8 input 21 \y_upper_limit_b1
  wire width 8 input 22 \y_upper_limit_b2
  wire width 8 input 23 \y_lower_limit_b1
  wire width 8 input 24 \y_lower_limit_b2
  attribute \init 16'0000000000000000
  wire width 16 output 25 \x_full_frame_resolution_locked
  wire width 16 \x_full_frame_resolution_locked$next
  attribute \init 16'0000000000000000
  wire width 16 output 26 \y_full_frame_resolution_locked
  wire width 16 \y_full_frame_resolution_locked$next
  attribute \init 64'0000000000000000000000000000000000000000000000000000000000000000
  wire width 64 output 27 \roi_registers_locked
  wire width 64 \roi_registers_locked$next
  wire width 1 output 28 \config_data_valid
  wire width 1 input 29 \write_happened
  wire width 8 output 30 \in_fifo_w_data
  attribute \init 5'00000
  wire width 5 \fsm_state
  wire width 5 \fsm_state$next
  process $group_0
    assign \writing_config 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        assign \writing_config 1'0
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
        assign \writing_config 1'1
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
        assign \writing_config 1'1
      attribute \amaranth.decoding "X1/3"
      case 5'00011
        assign \writing_config 1'1
      attribute \amaranth.decoding "X2/4"
      case 5'00100
        assign \writing_config 1'1
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
        assign \writing_config 1'1
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
        assign \writing_config 1'1
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
        assign \writing_config 1'1
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
        assign \writing_config 1'1
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
        assign \writing_config 1'1
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
        assign \writing_config 1'1
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
        assign \writing_config 1'1
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
        assign \writing_config 1'1
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
        assign \writing_config 1'1
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
        assign \writing_config 1'1
      attribute \amaranth.decoding "SC/15"
      case 5'01111
        assign \writing_config 1'1
      attribute \amaranth.decoding "8B/16"
      case 5'10000
        assign \writing_config 1'1
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
        assign \writing_config 1'1
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
        assign \writing_config 1'1
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
        assign \writing_config 1'0
    end
  end
  process $group_1
    assign \config_data_valid 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        assign \config_data_valid 1'0
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "X1/3"
      case 5'00011
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "X2/4"
      case 5'00100
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "SC/15"
      case 5'01111
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "8B/16"
      case 5'10000
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
        assign \config_data_valid 1'1
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
        assign \config_data_valid 1'0
    end
  end
  process $group_2
    assign \roi_registers_locked$next \roi_registers_locked
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        switch { \configuration_flag }
          case 1'1
            assign \roi_registers_locked$next \roi_registers
        end
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
      attribute \amaranth.decoding "X1/3"
      case 5'00011
      attribute \amaranth.decoding "X2/4"
      case 5'00100
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
      attribute \amaranth.decoding "SC/15"
      case 5'01111
      attribute \amaranth.decoding "8B/16"
      case 5'10000
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
    end
    switch $signal
      case 1'1
        assign \roi_registers_locked$next 64'0000000000000000000000000000000000000000000000000000000000000000
    end
    switch \rst
      case 1'1
        assign \roi_registers_locked$next 64'0000000000000000000000000000000000000000000000000000000000000000
    end
  end
  process $group_3
    assign \x_full_frame_resolution_locked$next \x_full_frame_resolution_locked
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        switch { \configuration_flag }
          case 1'1
            assign \x_full_frame_resolution_locked$next { \x_full_frame_resolution_b1 \x_full_frame_resolution_b2 }
        end
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
      attribute \amaranth.decoding "X1/3"
      case 5'00011
      attribute \amaranth.decoding "X2/4"
      case 5'00100
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
      attribute \amaranth.decoding "SC/15"
      case 5'01111
      attribute \amaranth.decoding "8B/16"
      case 5'10000
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
    end
    switch $signal
      case 1'1
        assign \x_full_frame_resolution_locked$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \x_full_frame_resolution_locked$next 16'0000000000000000
    end
  end
  process $group_4
    assign \y_full_frame_resolution_locked$next \y_full_frame_resolution_locked
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        switch { \configuration_flag }
          case 1'1
            assign \y_full_frame_resolution_locked$next { \y_full_frame_resolution_b1 \y_full_frame_resolution_b2 }
        end
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
      attribute \amaranth.decoding "X1/3"
      case 5'00011
      attribute \amaranth.decoding "X2/4"
      case 5'00100
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
      attribute \amaranth.decoding "SC/15"
      case 5'01111
      attribute \amaranth.decoding "8B/16"
      case 5'10000
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
    end
    switch $signal
      case 1'1
        assign \y_full_frame_resolution_locked$next 16'0000000000000000
    end
    switch \rst
      case 1'1
        assign \y_full_frame_resolution_locked$next 16'0000000000000000
    end
  end
  process $group_5
    assign \eight_bit_output_locked$next \eight_bit_output_locked
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        switch { \configuration_flag }
          case 1'1
            assign \eight_bit_output_locked$next \eight_bit_output
        end
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
      attribute \amaranth.decoding "X1/3"
      case 5'00011
      attribute \amaranth.decoding "X2/4"
      case 5'00100
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
      attribute \amaranth.decoding "SC/15"
      case 5'01111
      attribute \amaranth.decoding "8B/16"
      case 5'10000
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
    end
    switch $signal
      case 1'1
        assign \eight_bit_output_locked$next 1'0
    end
    switch \rst
      case 1'1
        assign \eight_bit_output_locked$next 1'0
    end
  end
  process $group_6
    assign \step_size_locked$next \step_size_locked
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        switch { \configuration_flag }
          case 1'1
            assign \step_size_locked$next \step_size
        end
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
      attribute \amaranth.decoding "X1/3"
      case 5'00011
      attribute \amaranth.decoding "X2/4"
      case 5'00100
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
      attribute \amaranth.decoding "SC/15"
      case 5'01111
      attribute \amaranth.decoding "8B/16"
      case 5'10000
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
    end
    switch $signal
      case 1'1
        assign \step_size_locked$next 8'00000000
    end
    switch \rst
      case 1'1
        assign \step_size_locked$next 8'00000000
    end
  end
  wire width 8 $1
  cell $pos $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 2
    parameter \Y_WIDTH 8
    connect \A \scan_mode
    connect \Y $1
  end
  wire width 8 $3
  cell $pos $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 8
    connect \A \eight_bit_output
    connect \Y $3
  end
  process $group_7
    assign \in_fifo_w_data 8'00000000
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        switch { \configuration_flag }
          case 1'1
            assign \in_fifo_w_data 8'11111111
        end
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data 8'11111111
        end
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data 8'11111111
        end
      attribute \amaranth.decoding "X1/3"
      case 5'00011
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \x_full_frame_resolution_b1
        end
      attribute \amaranth.decoding "X2/4"
      case 5'00100
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \x_full_frame_resolution_b2
        end
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \y_full_frame_resolution_b1
        end
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \y_full_frame_resolution_b2
        end
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \x_upper_limit_b1
        end
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \x_upper_limit_b2
        end
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \x_lower_limit_b1
        end
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \x_lower_limit_b2
        end
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \y_upper_limit_b1
        end
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \y_upper_limit_b2
        end
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \y_lower_limit_b1
        end
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data \y_lower_limit_b2
        end
      attribute \amaranth.decoding "SC/15"
      case 5'01111
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data $1
        end
      attribute \amaranth.decoding "8B/16"
      case 5'10000
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data $3
        end
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data 8'11111111
        end
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
        switch { \write_happened }
          case 1'1
            assign \in_fifo_w_data 8'11111111
        end
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
    end
  end
  wire width 1 $5
  cell $not $6
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \outer_configuration_flag
    connect \Y $5
  end
  wire width 1 $7
  cell $not $8
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \outer_configuration_flag
    connect \Y $7
  end
  process $group_8
    assign \fsm_state$next \fsm_state
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
        switch { \configuration_flag }
          case 1'1
            switch { \write_happened }
              case 1'1
                assign \fsm_state$next 5'00001
              case
                assign \fsm_state$next 5'00010
            end
        end
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'00001
        end
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'00011
        end
      attribute \amaranth.decoding "X1/3"
      case 5'00011
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'00100
        end
      attribute \amaranth.decoding "X2/4"
      case 5'00100
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'00101
        end
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'00110
        end
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'00111
        end
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01000
        end
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01001
        end
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01010
        end
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01011
        end
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01100
        end
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01101
        end
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01110
        end
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'01111
        end
      attribute \amaranth.decoding "SC/15"
      case 5'01111
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'10000
        end
      attribute \amaranth.decoding "8B/16"
      case 5'10000
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'10001
        end
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
        switch { \write_happened }
          case 1'1
            assign \fsm_state$next 5'10010
        end
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
        switch { \write_happened }
          case 1'1
            switch { $5 }
              case 1'1
                assign \fsm_state$next 5'00000
              case
                assign \fsm_state$next 5'10011
            end
        end
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
        switch { $7 }
          case 1'1
            assign \fsm_state$next 5'00000
        end
    end
    switch $signal
      case 1'1
        assign \fsm_state$next 5'00000
    end
    switch \rst
      case 1'1
        assign \fsm_state$next 5'00000
    end
  end
  wire width 1 $9
  cell $not $10
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \outer_configuration_flag
    connect \Y $9
  end
  wire width 1 $11
  cell $not $12
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \outer_configuration_flag
    connect \Y $11
  end
  process $group_9
    assign \config_flag_released 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
      attribute \amaranth.decoding "X1/3"
      case 5'00011
      attribute \amaranth.decoding "X2/4"
      case 5'00100
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
      attribute \amaranth.decoding "SC/15"
      case 5'01111
      attribute \amaranth.decoding "8B/16"
      case 5'10000
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
        switch { \write_happened }
          case 1'1
            switch { $9 }
              case 1'1
                assign \config_flag_released 1'1
              case
            end
        end
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
        switch { $11 }
          case 1'1
            assign \config_flag_released 1'1
        end
    end
  end
  wire width 1 \l
  process $group_10
    assign \l 1'0
    switch \fsm_state
      attribute \amaranth.decoding "Latch/0"
      case 5'00000
      attribute \amaranth.decoding "Insert_Start/2"
      case 5'00010
      attribute \amaranth.decoding "Insert_Start_B2/1"
      case 5'00001
      attribute \amaranth.decoding "X1/3"
      case 5'00011
      attribute \amaranth.decoding "X2/4"
      case 5'00100
      attribute \amaranth.decoding "Y1/5"
      case 5'00101
      attribute \amaranth.decoding "Y2/6"
      case 5'00110
      attribute \amaranth.decoding "UX1/7"
      case 5'00111
      attribute \amaranth.decoding "UX2/8"
      case 5'01000
      attribute \amaranth.decoding "LX1/9"
      case 5'01001
      attribute \amaranth.decoding "LX2/10"
      case 5'01010
      attribute \amaranth.decoding "UY1/11"
      case 5'01011
      attribute \amaranth.decoding "UY2/12"
      case 5'01100
      attribute \amaranth.decoding "LY1/13"
      case 5'01101
      attribute \amaranth.decoding "LY2/14"
      case 5'01110
      attribute \amaranth.decoding "SC/15"
      case 5'01111
      attribute \amaranth.decoding "8B/16"
      case 5'10000
      attribute \amaranth.decoding "Insert_End_B1/17"
      case 5'10001
      attribute \amaranth.decoding "Insert_End/18"
      case 5'10010
      attribute \amaranth.decoding "Wait_unlatch/19"
      case 5'10011
        assign \l 1'1
    end
  end
  cell $dff $13
    parameter \CLK_POLARITY 1
    parameter \WIDTH 64
    connect \CLK \clk
    connect \D \roi_registers_locked$next
    connect \Q \roi_registers_locked
  end
  cell $dff $14
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \x_full_frame_resolution_locked$next
    connect \Q \x_full_frame_resolution_locked
  end
  cell $dff $15
    parameter \CLK_POLARITY 1
    parameter \WIDTH 16
    connect \CLK \clk
    connect \D \y_full_frame_resolution_locked$next
    connect \Q \y_full_frame_resolution_locked
  end
  cell $dff $16
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \eight_bit_output_locked$next
    connect \Q \eight_bit_output_locked
  end
  cell $dff $17
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \clk
    connect \D \step_size_locked$next
    connect \Q \step_size_locked
  end
  cell $dff $18
    parameter \CLK_POLARITY 1
    parameter \WIDTH 5
    connect \CLK \clk
    connect \D \fsm_state$next
    connect \Q \fsm_state
  end
end
attribute \generator "Amaranth"
module \top.multiplexer.U$$0
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 2 input 3 $signal$1
  wire width 8 input 4 $signal$2
  wire width 8 input 5 $signal$3
  wire width 8 input 6 $signal$4
  wire width 8 input 7 $signal$5
  wire width 8 input 8 $signal$6
  wire width 8 input 9 $signal$7
  wire width 8 input 10 $signal$8
  wire width 8 input 11 $signal$9
  wire width 8 input 12 $signal$10
  wire width 8 input 13 $signal$11
  wire width 1 input 14 $signal$12
  wire width 8 input 15 $signal$13
  wire width 1 input 16 $signal$14
  wire width 1 input 17 $signal$15
  wire width 8 input 18 $signal$16
  wire width 1 input 19 \w_rdy
  wire width 8 output 20 \w_data
  wire width 1 output 21 \w_en
  wire width 8 input 22 \r_data
  wire width 1 input 23 \r_rdy
  wire width 1 output 24 \r_en
  wire width 1 output 25 \port_a_0__io__oe
  wire width 1 output 26 \port_a_0__io__o
  wire width 1 input 27 \port_a_0__io__i
  wire width 1 output 28 \port_a_0__oe__o
  wire width 1 output 29 \port_a_1__io__oe
  wire width 1 output 30 \port_a_1__io__o
  wire width 1 input 31 \port_a_1__io__i
  wire width 1 output 32 \port_a_1__oe__o
  wire width 1 output 33 \port_a_2__io__oe
  wire width 1 output 34 \port_a_2__io__o
  wire width 1 input 35 \port_a_2__io__i
  wire width 1 output 36 \port_a_2__oe__o
  wire width 1 output 37 \port_a_3__io__oe
  wire width 1 output 38 \port_a_3__io__o
  wire width 1 input 39 \port_a_3__io__i
  wire width 1 output 40 \port_a_3__oe__o
  wire width 1 output 41 \port_a_4__io__oe
  wire width 1 output 42 \port_a_4__io__o
  wire width 1 input 43 \port_a_4__io__i
  wire width 1 output 44 \port_a_4__oe__o
  wire width 1 output 45 \port_a_5__io__oe
  wire width 1 output 46 \port_a_5__io__o
  wire width 1 input 47 \port_a_5__io__i
  wire width 1 output 48 \port_a_5__oe__o
  wire width 1 output 49 \port_a_6__io__oe
  wire width 1 output 50 \port_a_6__io__o
  wire width 1 input 51 \port_a_6__io__i
  wire width 1 output 52 \port_a_6__oe__o
  wire width 1 output 53 \port_a_7__io__oe
  wire width 1 output 54 \port_a_7__io__o
  wire width 1 input 55 \port_a_7__io__i
  wire width 1 output 56 \port_a_7__oe__o
  wire width 1 output 57 \port_b_0__io__oe
  wire width 1 output 58 \port_b_0__io__o
  wire width 1 input 59 \port_b_0__io__i
  wire width 1 output 60 \port_b_0__oe__o
  wire width 1 output 61 \port_b_1__io__oe
  wire width 1 output 62 \port_b_1__io__o
  wire width 1 input 63 \port_b_1__io__i
  wire width 1 output 64 \port_b_1__oe__o
  wire width 1 output 65 \port_b_2__io__oe
  wire width 1 output 66 \port_b_2__io__o
  wire width 1 input 67 \port_b_2__io__i
  wire width 1 output 68 \port_b_2__oe__o
  wire width 1 output 69 \port_b_3__io__oe
  wire width 1 output 70 \port_b_3__io__o
  wire width 1 input 71 \port_b_3__io__i
  wire width 1 output 72 \port_b_3__oe__o
  wire width 1 output 73 \port_b_4__io__oe
  wire width 1 output 74 \port_b_4__io__o
  wire width 1 input 75 \port_b_4__io__i
  wire width 1 output 76 \port_b_4__oe__o
  wire width 1 output 77 \port_b_5__io__oe
  wire width 1 output 78 \port_b_5__io__o
  wire width 1 input 79 \port_b_5__io__i
  wire width 1 output 80 \port_b_5__oe__o
  wire width 1 output 81 \port_b_7__io__oe
  wire width 1 output 82 \port_b_7__io__o
  wire width 1 input 83 \port_b_7__io__i
  wire width 1 output 84 \port_b_7__oe__o
  wire width 1 output 85 \control_0__D19__o
  wire width 1 output 86 \control_0__D20__o
  wire width 1 output 87 \control_0__D22__o
  wire width 1 output 88 \control_0__D21__o
  wire width 1 output 89 \control_0__D24__o
  wire width 1 output 90 \control_0__D23__o
  wire width 1 output 91 \data_0__D1__oe
  wire width 1 output 92 \data_0__D1__o
  wire width 1 output 93 \data_0__D2__oe
  wire width 1 output 94 \data_0__D2__o
  wire width 1 output 95 \data_0__D3__oe
  wire width 1 output 96 \data_0__D3__o
  wire width 1 output 97 \data_0__D4__oe
  wire width 1 output 98 \data_0__D4__o
  wire width 1 output 99 \data_0__D5__oe
  wire width 1 output 100 \data_0__D5__o
  wire width 1 output 101 \data_0__D6__oe
  wire width 1 output 102 \data_0__D6__o
  wire width 1 output 103 \data_0__D7__oe
  wire width 1 output 104 \data_0__D7__o
  wire width 1 output 105 \data_0__D8__oe
  wire width 1 output 106 \data_0__D8__o
  wire width 1 output 107 \data_0__D9__oe
  wire width 1 output 108 \data_0__D9__o
  wire width 1 output 109 \data_0__D10__oe
  wire width 1 output 110 \data_0__D10__o
  wire width 1 output 111 \data_0__D11__oe
  wire width 1 output 112 \data_0__D11__o
  wire width 1 output 113 \data_0__D12__oe
  wire width 1 output 114 \data_0__D12__o
  wire width 1 output 115 \data_0__D13__oe
  wire width 1 output 116 \data_0__D13__o
  wire width 1 output 117 \data_0__D14__oe
  wire width 1 output 118 \data_0__D14__o
  wire width 1 \ModeCtrl_replace_FF_to_FE
  wire width 8 \ModeCtrl_step_size
  wire width 8 \ModeCtrl_step_size$17
  wire width 1 \ModeCtrl_writer_data_complete
  wire width 1 \ModeCtrl_reset
  wire width 1 \ModeCtrl_disable_dwell
  wire width 2 \ModeCtrl_mode
  wire width 1 \ModeCtrl_external_force_load_new_point
  wire width 8 \ModeCtrl_const_dwell_time
  wire width 1 \ModeCtrl_eight_bit_output
  wire width 16 \ModeCtrl_x_full_frame_resolution
  wire width 16 \ModeCtrl_y_full_frame_resolution
  wire width 16 \ModeCtrl_x_upper_limit
  wire width 16 \ModeCtrl_x_lower_limit
  wire width 16 \ModeCtrl_y_upper_limit
  wire width 16 \ModeCtrl_y_lower_limit
  wire width 1 \ModeCtrl_dwelling
  wire width 1 \ModeCtrl_count_enable
  wire width 14 \ModeCtrl_x_position
  wire width 14 \ModeCtrl_y_position
  wire width 1 \ModeCtrl_adc_data_strobe
  wire width 16 \ModeCtrl_adc_data
  wire width 1 \ModeCtrl_reader_data_complete
  wire width 8 \ModeCtrl_out_fifo_r_data
  wire width 1 \ModeCtrl_read_happened
  wire width 1 \ModeCtrl_writer_data_valid
  wire width 1 \ModeCtrl_write_happened
  wire width 1 \ModeCtrl_write_ready
  wire width 8 \ModeCtrl_in_fifo_w_data
  cell \top.multiplexer.U$$0.ModeCtrl \ModeCtrl
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \replace_FF_to_FE \ModeCtrl_replace_FF_to_FE
    connect \step_size \ModeCtrl_step_size
    connect \step_size$1 \ModeCtrl_step_size$17
    connect \writer_data_complete \ModeCtrl_writer_data_complete
    connect \reset \ModeCtrl_reset
    connect \disable_dwell \ModeCtrl_disable_dwell
    connect \mode \ModeCtrl_mode
    connect \external_force_load_new_point \ModeCtrl_external_force_load_new_point
    connect \const_dwell_time \ModeCtrl_const_dwell_time
    connect \eight_bit_output \ModeCtrl_eight_bit_output
    connect \x_full_frame_resolution \ModeCtrl_x_full_frame_resolution
    connect \y_full_frame_resolution \ModeCtrl_y_full_frame_resolution
    connect \x_upper_limit \ModeCtrl_x_upper_limit
    connect \x_lower_limit \ModeCtrl_x_lower_limit
    connect \y_upper_limit \ModeCtrl_y_upper_limit
    connect \y_lower_limit \ModeCtrl_y_lower_limit
    connect \dwelling \ModeCtrl_dwelling
    connect \count_enable \ModeCtrl_count_enable
    connect \x_position \ModeCtrl_x_position
    connect \y_position \ModeCtrl_y_position
    connect \adc_data_strobe \ModeCtrl_adc_data_strobe
    connect \adc_data \ModeCtrl_adc_data
    connect \reader_data_complete \ModeCtrl_reader_data_complete
    connect \out_fifo_r_data \ModeCtrl_out_fifo_r_data
    connect \read_happened \ModeCtrl_read_happened
    connect \writer_data_valid \ModeCtrl_writer_data_valid
    connect \write_happened \ModeCtrl_write_happened
    connect \write_ready \ModeCtrl_write_ready
    connect \in_fifo_w_data \ModeCtrl_in_fifo_w_data
  end
  wire width 1 \MuxBus_is_x
  wire width 1 \MuxBus_is_y
  wire width 1 \MuxBus_is_a
  wire width 1 \MuxBus_le
  wire width 1 \MuxBus_oe
  wire width 1 \MuxBus_le$18
  wire width 1 \MuxBus_oe$19
  wire width 1 \MuxBus_le$20
  wire width 1 \MuxBus_oe$21
  wire width 1 \MuxBus_clock
  wire width 1 \MuxBus_sampling
  wire width 1 \MuxBus_is_done
  wire width 1 \MuxBus_released
  cell \top.multiplexer.U$$0.MuxBus \MuxBus
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \is_x \MuxBus_is_x
    connect \is_y \MuxBus_is_y
    connect \is_a \MuxBus_is_a
    connect \le \MuxBus_le
    connect \oe \MuxBus_oe
    connect \le$1 \MuxBus_le$18
    connect \oe$2 \MuxBus_oe$19
    connect \le$3 \MuxBus_le$20
    connect \oe$4 \MuxBus_oe$21
    connect \clock \MuxBus_clock
    connect \sampling \MuxBus_sampling
    connect \is_done \MuxBus_is_done
    connect \released \MuxBus_released
  end
  wire width 64 \ConfigHdlr_roi_registers
  wire width 2 \ConfigHdlr_scan_mode
  wire width 8 \ConfigHdlr_step_size
  wire width 8 \ConfigHdlr_step_size_locked
  wire width 1 \ConfigHdlr_writing_config
  wire width 1 \ConfigHdlr_outer_configuration_flag
  wire width 1 \ConfigHdlr_configuration_flag
  wire width 1 \ConfigHdlr_config_flag_released
  wire width 1 \ConfigHdlr_eight_bit_output
  wire width 1 \ConfigHdlr_eight_bit_output_locked
  wire width 8 \ConfigHdlr_x_full_frame_resolution_b1
  wire width 8 \ConfigHdlr_x_full_frame_resolution_b2
  wire width 8 \ConfigHdlr_y_full_frame_resolution_b1
  wire width 8 \ConfigHdlr_y_full_frame_resolution_b2
  wire width 8 \ConfigHdlr_x_upper_limit_b1
  wire width 8 \ConfigHdlr_x_upper_limit_b2
  wire width 8 \ConfigHdlr_x_lower_limit_b1
  wire width 8 \ConfigHdlr_x_lower_limit_b2
  wire width 8 \ConfigHdlr_y_upper_limit_b1
  wire width 8 \ConfigHdlr_y_upper_limit_b2
  wire width 8 \ConfigHdlr_y_lower_limit_b1
  wire width 8 \ConfigHdlr_y_lower_limit_b2
  wire width 16 \ConfigHdlr_x_full_frame_resolution_locked
  wire width 16 \ConfigHdlr_y_full_frame_resolution_locked
  wire width 64 \ConfigHdlr_roi_registers_locked
  wire width 1 \ConfigHdlr_config_data_valid
  wire width 1 \ConfigHdlr_write_happened
  wire width 8 \ConfigHdlr_in_fifo_w_data
  cell \top.multiplexer.U$$0.ConfigHdlr \ConfigHdlr
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect \roi_registers \ConfigHdlr_roi_registers
    connect \scan_mode \ConfigHdlr_scan_mode
    connect \step_size \ConfigHdlr_step_size
    connect \step_size_locked \ConfigHdlr_step_size_locked
    connect \writing_config \ConfigHdlr_writing_config
    connect \outer_configuration_flag \ConfigHdlr_outer_configuration_flag
    connect \configuration_flag \ConfigHdlr_configuration_flag
    connect \config_flag_released \ConfigHdlr_config_flag_released
    connect \eight_bit_output \ConfigHdlr_eight_bit_output
    connect \eight_bit_output_locked \ConfigHdlr_eight_bit_output_locked
    connect \x_full_frame_resolution_b1 \ConfigHdlr_x_full_frame_resolution_b1
    connect \x_full_frame_resolution_b2 \ConfigHdlr_x_full_frame_resolution_b2
    connect \y_full_frame_resolution_b1 \ConfigHdlr_y_full_frame_resolution_b1
    connect \y_full_frame_resolution_b2 \ConfigHdlr_y_full_frame_resolution_b2
    connect \x_upper_limit_b1 \ConfigHdlr_x_upper_limit_b1
    connect \x_upper_limit_b2 \ConfigHdlr_x_upper_limit_b2
    connect \x_lower_limit_b1 \ConfigHdlr_x_lower_limit_b1
    connect \x_lower_limit_b2 \ConfigHdlr_x_lower_limit_b2
    connect \y_upper_limit_b1 \ConfigHdlr_y_upper_limit_b1
    connect \y_upper_limit_b2 \ConfigHdlr_y_upper_limit_b2
    connect \y_lower_limit_b1 \ConfigHdlr_y_lower_limit_b1
    connect \y_lower_limit_b2 \ConfigHdlr_y_lower_limit_b2
    connect \x_full_frame_resolution_locked \ConfigHdlr_x_full_frame_resolution_locked
    connect \y_full_frame_resolution_locked \ConfigHdlr_y_full_frame_resolution_locked
    connect \roi_registers_locked \ConfigHdlr_roi_registers_locked
    connect \config_data_valid \ConfigHdlr_config_data_valid
    connect \write_happened \ConfigHdlr_write_happened
    connect \in_fifo_w_data \ConfigHdlr_in_fifo_w_data
  end
  wire width 1 \triple__oe
  process $group_0
    assign \port_a_0__io__oe 1'0
    assign \port_a_0__io__oe \triple__oe
  end
  wire width 1 \triple__o
  process $group_1
    assign \port_a_0__io__o 1'0
    assign \port_a_0__io__o \triple__o
  end
  wire width 1 \triple__i
  process $group_2
    assign \triple__i 1'0
    assign \triple__i \port_a_0__io__i
  end
  process $group_3
    assign \port_a_0__oe__o 1'0
    assign \port_a_0__oe__o \triple__oe
  end
  wire width 1 \triple__oe$22
  process $group_4
    assign \port_a_1__io__oe 1'0
    assign \port_a_1__io__oe \triple__oe$22
  end
  wire width 1 \triple__o$23
  process $group_5
    assign \port_a_1__io__o 1'0
    assign \port_a_1__io__o \triple__o$23
  end
  wire width 1 \triple__i$24
  process $group_6
    assign \triple__i$24 1'0
    assign \triple__i$24 \port_a_1__io__i
  end
  process $group_7
    assign \port_a_1__oe__o 1'0
    assign \port_a_1__oe__o \triple__oe$22
  end
  wire width 1 \triple__oe$25
  process $group_8
    assign \port_a_2__io__oe 1'0
    assign \port_a_2__io__oe \triple__oe$25
  end
  wire width 1 \triple__o$26
  process $group_9
    assign \port_a_2__io__o 1'0
    assign \port_a_2__io__o \triple__o$26
  end
  wire width 1 \triple__i$27
  process $group_10
    assign \triple__i$27 1'0
    assign \triple__i$27 \port_a_2__io__i
  end
  process $group_11
    assign \port_a_2__oe__o 1'0
    assign \port_a_2__oe__o \triple__oe$25
  end
  wire width 1 \triple__oe$28
  process $group_12
    assign \port_a_3__io__oe 1'0
    assign \port_a_3__io__oe \triple__oe$28
  end
  wire width 1 \triple__o$29
  process $group_13
    assign \port_a_3__io__o 1'0
    assign \port_a_3__io__o \triple__o$29
  end
  wire width 1 \triple__i$30
  process $group_14
    assign \triple__i$30 1'0
    assign \triple__i$30 \port_a_3__io__i
  end
  process $group_15
    assign \port_a_3__oe__o 1'0
    assign \port_a_3__oe__o \triple__oe$28
  end
  wire width 1 \triple__oe$31
  process $group_16
    assign \port_a_4__io__oe 1'0
    assign \port_a_4__io__oe \triple__oe$31
  end
  wire width 1 \triple__o$32
  process $group_17
    assign \port_a_4__io__o 1'0
    assign \port_a_4__io__o \triple__o$32
  end
  wire width 1 \triple__i$33
  process $group_18
    assign \triple__i$33 1'0
    assign \triple__i$33 \port_a_4__io__i
  end
  process $group_19
    assign \port_a_4__oe__o 1'0
    assign \port_a_4__oe__o \triple__oe$31
  end
  wire width 1 \triple__oe$34
  process $group_20
    assign \port_a_5__io__oe 1'0
    assign \port_a_5__io__oe \triple__oe$34
  end
  wire width 1 \triple__o$35
  process $group_21
    assign \port_a_5__io__o 1'0
    assign \port_a_5__io__o \triple__o$35
  end
  wire width 1 \triple__i$36
  process $group_22
    assign \triple__i$36 1'0
    assign \triple__i$36 \port_a_5__io__i
  end
  process $group_23
    assign \port_a_5__oe__o 1'0
    assign \port_a_5__oe__o \triple__oe$34
  end
  wire width 1 \triple__oe$37
  process $group_24
    assign \port_a_6__io__oe 1'0
    assign \port_a_6__io__oe \triple__oe$37
  end
  wire width 1 \triple__o$38
  process $group_25
    assign \port_a_6__io__o 1'0
    assign \port_a_6__io__o \triple__o$38
  end
  wire width 1 \triple__i$39
  process $group_26
    assign \triple__i$39 1'0
    assign \triple__i$39 \port_a_6__io__i
  end
  process $group_27
    assign \port_a_6__oe__o 1'0
    assign \port_a_6__oe__o \triple__oe$37
  end
  wire width 1 \triple__oe$40
  process $group_28
    assign \port_a_7__io__oe 1'0
    assign \port_a_7__io__oe \triple__oe$40
  end
  wire width 1 \triple__o$41
  process $group_29
    assign \port_a_7__io__o 1'0
    assign \port_a_7__io__o \triple__o$41
  end
  wire width 1 \triple__i$42
  process $group_30
    assign \triple__i$42 1'0
    assign \triple__i$42 \port_a_7__io__i
  end
  process $group_31
    assign \port_a_7__oe__o 1'0
    assign \port_a_7__oe__o \triple__oe$40
  end
  wire width 1 \triple__oe$43
  process $group_32
    assign \port_b_0__io__oe 1'0
    assign \port_b_0__io__oe \triple__oe$43
  end
  wire width 1 \triple__o$44
  process $group_33
    assign \port_b_0__io__o 1'0
    assign \port_b_0__io__o \triple__o$44
  end
  wire width 1 \triple__i$45
  process $group_34
    assign \triple__i$45 1'0
    assign \triple__i$45 \port_b_0__io__i
  end
  process $group_35
    assign \port_b_0__oe__o 1'0
    assign \port_b_0__oe__o \triple__oe$43
  end
  wire width 1 \triple__oe$46
  process $group_36
    assign \port_b_1__io__oe 1'0
    assign \port_b_1__io__oe \triple__oe$46
  end
  wire width 1 \triple__o$47
  process $group_37
    assign \port_b_1__io__o 1'0
    assign \port_b_1__io__o \triple__o$47
  end
  wire width 1 \triple__i$48
  process $group_38
    assign \triple__i$48 1'0
    assign \triple__i$48 \port_b_1__io__i
  end
  process $group_39
    assign \port_b_1__oe__o 1'0
    assign \port_b_1__oe__o \triple__oe$46
  end
  wire width 1 \triple__oe$49
  process $group_40
    assign \port_b_2__io__oe 1'0
    assign \port_b_2__io__oe \triple__oe$49
  end
  wire width 1 \triple__o$50
  process $group_41
    assign \port_b_2__io__o 1'0
    assign \port_b_2__io__o \triple__o$50
  end
  wire width 1 \triple__i$51
  process $group_42
    assign \triple__i$51 1'0
    assign \triple__i$51 \port_b_2__io__i
  end
  process $group_43
    assign \port_b_2__oe__o 1'0
    assign \port_b_2__oe__o \triple__oe$49
  end
  wire width 1 \triple__oe$52
  process $group_44
    assign \port_b_3__io__oe 1'0
    assign \port_b_3__io__oe \triple__oe$52
  end
  wire width 1 \triple__o$53
  process $group_45
    assign \port_b_3__io__o 1'0
    assign \port_b_3__io__o \triple__o$53
  end
  wire width 1 \triple__i$54
  process $group_46
    assign \triple__i$54 1'0
    assign \triple__i$54 \port_b_3__io__i
  end
  process $group_47
    assign \port_b_3__oe__o 1'0
    assign \port_b_3__oe__o \triple__oe$52
  end
  wire width 1 \triple__oe$55
  process $group_48
    assign \port_b_4__io__oe 1'0
    assign \port_b_4__io__oe \triple__oe$55
  end
  wire width 1 \triple__o$56
  process $group_49
    assign \port_b_4__io__o 1'0
    assign \port_b_4__io__o \triple__o$56
  end
  wire width 1 \triple__i$57
  process $group_50
    assign \triple__i$57 1'0
    assign \triple__i$57 \port_b_4__io__i
  end
  process $group_51
    assign \port_b_4__oe__o 1'0
    assign \port_b_4__oe__o \triple__oe$55
  end
  wire width 1 \triple__oe$58
  process $group_52
    assign \port_b_5__io__oe 1'0
    assign \port_b_5__io__oe \triple__oe$58
  end
  wire width 1 \triple__o$59
  process $group_53
    assign \port_b_5__io__o 1'0
    assign \port_b_5__io__o \triple__o$59
  end
  wire width 1 \triple__i$60
  process $group_54
    assign \triple__i$60 1'0
    assign \triple__i$60 \port_b_5__io__i
  end
  process $group_55
    assign \port_b_5__oe__o 1'0
    assign \port_b_5__oe__o \triple__oe$58
  end
  wire width 1 \triple__oe$61
  process $group_56
    assign \port_b_7__io__oe 1'0
    assign \port_b_7__io__oe \triple__oe$61
  end
  wire width 1 \triple__o$62
  process $group_57
    assign \port_b_7__io__o 1'0
    assign \port_b_7__io__o \triple__o$62
  end
  wire width 1 \triple__i$63
  process $group_58
    assign \triple__i$63 1'0
    assign \triple__i$63 \port_b_7__io__i
  end
  process $group_59
    assign \port_b_7__oe__o 1'0
    assign \port_b_7__oe__o \triple__oe$61
  end
  wire width 1 \x_latch
  process $group_60
    assign \control_0__D19__o 1'0
    assign \control_0__D19__o \x_latch
  end
  wire width 1 \y_latch
  process $group_61
    assign \control_0__D20__o 1'0
    assign \control_0__D20__o \y_latch
  end
  wire width 1 \a_latch
  process $group_62
    assign \control_0__D22__o 1'0
    assign \control_0__D22__o \a_latch
  end
  wire width 1 \a_enable
  process $group_63
    assign \control_0__D21__o 1'0
    assign \control_0__D21__o \a_enable
  end
  wire width 1 \a_clock
  process $group_64
    assign \control_0__D24__o 1'0
    assign \control_0__D24__o \a_clock
  end
  wire width 1 \d_clock
  process $group_65
    assign \control_0__D23__o 1'0
    assign \control_0__D23__o \d_clock
  end
  process $group_66
    assign \data_0__D1__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D1__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D1__oe 1'1
    end
  end
  wire width 14 \pins_o
  process $group_67
    assign \data_0__D1__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D1__o \pins_o [0]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D1__o \pins_o [0]
    end
  end
  process $group_68
    assign \data_0__D2__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D2__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D2__oe 1'1
    end
  end
  process $group_69
    assign \data_0__D2__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D2__o \pins_o [1]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D2__o \pins_o [1]
    end
  end
  process $group_70
    assign \data_0__D3__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D3__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D3__oe 1'1
    end
  end
  process $group_71
    assign \data_0__D3__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D3__o \pins_o [2]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D3__o \pins_o [2]
    end
  end
  process $group_72
    assign \data_0__D4__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D4__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D4__oe 1'1
    end
  end
  process $group_73
    assign \data_0__D4__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D4__o \pins_o [3]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D4__o \pins_o [3]
    end
  end
  process $group_74
    assign \data_0__D5__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D5__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D5__oe 1'1
    end
  end
  process $group_75
    assign \data_0__D5__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D5__o \pins_o [4]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D5__o \pins_o [4]
    end
  end
  process $group_76
    assign \data_0__D6__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D6__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D6__oe 1'1
    end
  end
  process $group_77
    assign \data_0__D6__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D6__o \pins_o [5]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D6__o \pins_o [5]
    end
  end
  process $group_78
    assign \data_0__D7__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D7__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D7__oe 1'1
    end
  end
  process $group_79
    assign \data_0__D7__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D7__o \pins_o [6]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D7__o \pins_o [6]
    end
  end
  process $group_80
    assign \data_0__D8__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D8__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D8__oe 1'1
    end
  end
  process $group_81
    assign \data_0__D8__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D8__o \pins_o [7]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D8__o \pins_o [7]
    end
  end
  process $group_82
    assign \data_0__D9__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D9__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D9__oe 1'1
    end
  end
  process $group_83
    assign \data_0__D9__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D9__o \pins_o [8]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D9__o \pins_o [8]
    end
  end
  process $group_84
    assign \data_0__D10__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D10__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D10__oe 1'1
    end
  end
  process $group_85
    assign \data_0__D10__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D10__o \pins_o [9]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D10__o \pins_o [9]
    end
  end
  process $group_86
    assign \data_0__D11__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D11__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D11__oe 1'1
    end
  end
  process $group_87
    assign \data_0__D11__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D11__o \pins_o [10]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D11__o \pins_o [10]
    end
  end
  process $group_88
    assign \data_0__D12__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D12__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D12__oe 1'1
    end
  end
  process $group_89
    assign \data_0__D12__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D12__o \pins_o [11]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D12__o \pins_o [11]
    end
  end
  process $group_90
    assign \data_0__D13__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D13__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D13__oe 1'1
    end
  end
  process $group_91
    assign \data_0__D13__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D13__o \pins_o [12]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D13__o \pins_o [12]
    end
  end
  process $group_92
    assign \data_0__D14__oe 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D14__oe 1'1
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D14__oe 1'1
    end
  end
  process $group_93
    assign \data_0__D14__o 1'0
    switch { \MuxBus_is_x }
      case 1'1
        assign \data_0__D14__o \pins_o [13]
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \data_0__D14__o \pins_o [13]
    end
  end
  wire width 1 \_ctrl_en
  wire width 1 \w_rdy$64
  wire width 1 $65
  cell $and $66
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_ctrl_en
    connect \B \w_rdy$64
    connect \Y $65
  end
  wire width 1 \w_en$67
  wire width 1 $68
  cell $and $69
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $65
    connect \B \w_en$67
    connect \Y $68
  end
  wire width 1 $70
  cell $and $71
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_ctrl_en
    connect \B \w_rdy$64
    connect \Y $70
  end
  wire width 1 $72
  cell $and $73
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $70
    connect \B \w_en$67
    connect \Y $72
  end
  process $group_94
    assign \w_en 1'0
    assign \w_en $68
    assign \w_en $72
  end
  wire width 1 \_data_en
  wire width 1 $74
  cell $and $75
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_data_en
    connect \B \w_rdy
    connect \Y $74
  end
  wire width 1 $76
  cell $and $77
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_data_en
    connect \B \w_rdy
    connect \Y $76
  end
  process $group_95
    assign \w_rdy$64 1'0
    assign \w_rdy$64 $74
    assign \w_rdy$64 $76
  end
  wire width 1 \_ctrl_en$78
  wire width 1 \r_rdy$79
  wire width 1 $80
  cell $and $81
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_ctrl_en$78
    connect \B \r_rdy$79
    connect \Y $80
  end
  wire width 1 \r_en$82
  wire width 1 $83
  cell $and $84
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $80
    connect \B \r_en$82
    connect \Y $83
  end
  wire width 1 $85
  cell $and $86
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_ctrl_en$78
    connect \B \r_rdy$79
    connect \Y $85
  end
  wire width 1 $87
  cell $and $88
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $85
    connect \B \r_en$82
    connect \Y $87
  end
  process $group_96
    assign \r_en 1'0
    assign \r_en $83
    assign \r_en $87
  end
  wire width 1 \_data_en$89
  wire width 1 $90
  cell $and $91
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_data_en$89
    connect \B \r_rdy
    connect \Y $90
  end
  wire width 1 $92
  cell $and $93
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \_data_en$89
    connect \B \r_rdy
    connect \Y $92
  end
  process $group_97
    assign \r_rdy$79 1'0
    assign \r_rdy$79 $90
    assign \r_rdy$79 $92
  end
  process $group_98
    assign \x_latch 1'0
    assign \x_latch \MuxBus_le
  end
  wire width 1 \x_enable
  process $group_99
    assign \x_enable 1'0
    assign \x_enable \MuxBus_oe
  end
  process $group_100
    assign \y_latch 1'0
    assign \y_latch \MuxBus_le$18
  end
  wire width 1 \y_enable
  process $group_101
    assign \y_enable 1'0
    assign \y_enable \MuxBus_oe$19
  end
  process $group_102
    assign \a_latch 1'0
    assign \a_latch \MuxBus_le$20
  end
  process $group_103
    assign \a_enable 1'0
    assign \a_enable \MuxBus_oe$21
  end
  process $group_104
    assign \a_clock 1'0
    assign \a_clock \MuxBus_clock
  end
  wire width 1 $94
  cell $not $95
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \MuxBus_clock
    connect \Y $94
  end
  process $group_105
    assign \d_clock 1'0
    assign \d_clock $94
  end
  wire width 64 \roi_registers
  process $group_106
    assign \roi_registers 64'0000000000000000000000000000000000000000000000000000000000000000
    assign \roi_registers [7:0] $signal$8
    assign \roi_registers [15:8] $signal$6
    assign \roi_registers [23:16] $signal$7
    assign \roi_registers [31:24] $signal$6
    assign \roi_registers [39:32] $signal$11
    assign \roi_registers [47:40] $signal$9
    assign \roi_registers [55:48] $signal$10
    assign \roi_registers [63:56] $signal$9
  end
  process $group_107
    assign \ConfigHdlr_roi_registers 64'0000000000000000000000000000000000000000000000000000000000000000
    assign \ConfigHdlr_roi_registers \roi_registers
  end
  process $group_108
    assign \ModeCtrl_replace_FF_to_FE 1'0
    assign \ModeCtrl_replace_FF_to_FE 1'1
  end
  process $group_109
    assign \ConfigHdlr_scan_mode 2'00
    assign \ConfigHdlr_scan_mode $signal$1
  end
  process $group_110
    assign \ConfigHdlr_step_size 8'00000000
    assign \ConfigHdlr_step_size $signal$16
  end
  process $group_111
    assign \ModeCtrl_step_size 8'00000000
    assign \ModeCtrl_step_size \ConfigHdlr_step_size_locked
  end
  process $group_112
    assign \ModeCtrl_step_size$17 8'00000000
    assign \ModeCtrl_step_size$17 \ConfigHdlr_step_size_locked
  end
  wire width 1 \handling_config
  process $group_113
    assign \handling_config 1'0
    assign \handling_config \ConfigHdlr_writing_config
  end
  process $group_114
    assign \ConfigHdlr_outer_configuration_flag 1'0
    assign \ConfigHdlr_outer_configuration_flag $signal$14
  end
  wire width 1 $96
  cell $eq $97
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $signal$15
    connect \B 1'0
    connect \Y $96
  end
  attribute \init 1'0
  wire width 1 \config_flag_latched
  wire width 1 \config_flag_latched$next
  wire width 1 $98
  cell $and $99
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \config_flag_latched
    connect \B \ModeCtrl_writer_data_complete
    connect \Y $98
  end
  process $group_115
    assign \ConfigHdlr_configuration_flag 1'0
    switch { $96 }
      case 1'1
        assign \ConfigHdlr_configuration_flag $signal$14
      case
        switch { $98 }
          case 1'1
            assign \ConfigHdlr_configuration_flag 1'1
        end
    end
  end
  wire width 1 $100
  cell $eq $101
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $signal$15
    connect \B 1'0
    connect \Y $100
  end
  wire width 1 $102
  cell $and $103
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \config_flag_latched
    connect \B \ModeCtrl_writer_data_complete
    connect \Y $102
  end
  process $group_116
    assign \config_flag_latched$next \config_flag_latched
    switch { $100 }
      case 1'1
      case
        switch { $signal$14 }
          case 1'1
            assign \config_flag_latched$next 1'1
        end
        switch { $102 }
          case 1'1
            assign \config_flag_latched$next 1'0
        end
    end
    switch $signal
      case 1'1
        assign \config_flag_latched$next 1'0
    end
    switch \rst
      case 1'1
        assign \config_flag_latched$next 1'0
    end
  end
  process $group_117
    assign \ModeCtrl_reset 1'0
    assign \ModeCtrl_reset \handling_config
  end
  wire width 1 $104
  cell $not $105
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $signal$15
    connect \Y $104
  end
  wire width 1 $106
  cell $or $107
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $104
    connect \B \handling_config
    connect \Y $106
  end
  process $group_118
    assign \ModeCtrl_disable_dwell 1'0
    assign \ModeCtrl_disable_dwell $106
  end
  process $group_119
    assign \ModeCtrl_mode 2'00
    switch { \handling_config }
      case 1'1
        assign \ModeCtrl_mode 2'00
      case
        assign \ModeCtrl_mode $signal$1
    end
  end
  wire width 1 \write_strobe
  wire width 1 $108
  cell $not $109
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $signal$15
    connect \Y $108
  end
  wire width 1 $110
  cell $and $111
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy$64
    connect \B \ConfigHdlr_config_data_valid
    connect \Y $110
  end
  wire width 1 $112
  cell $and $113
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \w_rdy$64
    connect \B \ModeCtrl_writer_data_valid
    connect \Y $112
  end
  process $group_120
    assign \write_strobe 1'0
    switch { $108 }
      case 1'1
        assign \write_strobe 1'0
    end
    switch { \handling_config }
      case 1'1
        assign \write_strobe $110
      case
        assign \write_strobe $112
    end
  end
  attribute \init 1'0
  wire width 1 \eflnp
  wire width 1 \eflnp$next
  process $group_121
    assign \eflnp$next \eflnp
    assign \eflnp$next \ConfigHdlr_config_flag_released
    switch $signal
      case 1'1
        assign \eflnp$next 1'0
    end
    switch \rst
      case 1'1
        assign \eflnp$next 1'0
    end
  end
  attribute \init 1'0
  wire width 1 \asdf
  wire width 1 \asdf$next
  process $group_122
    assign \asdf$next \asdf
    assign \asdf$next \eflnp
    switch $signal
      case 1'1
        assign \asdf$next 1'0
    end
    switch \rst
      case 1'1
        assign \asdf$next 1'0
    end
  end
  attribute \init 1'0
  wire width 1 \sdfg
  wire width 1 \sdfg$next
  process $group_123
    assign \sdfg$next \sdfg
    assign \sdfg$next \asdf
    switch $signal
      case 1'1
        assign \sdfg$next 1'0
    end
    switch \rst
      case 1'1
        assign \sdfg$next 1'0
    end
  end
  process $group_124
    assign \ModeCtrl_external_force_load_new_point 1'0
    assign \ModeCtrl_external_force_load_new_point \sdfg
  end
  wire width 1 \beam_controller_end_of_dwell
  wire width 1 \beam_controller_end_of_dwell$114
  process $group_125
    assign \beam_controller_end_of_dwell 1'0
    assign \beam_controller_end_of_dwell \beam_controller_end_of_dwell$114
  end
  process $group_126
    assign \ModeCtrl_const_dwell_time 8'00000000
    assign \ModeCtrl_const_dwell_time $signal$13
  end
  process $group_127
    assign \ConfigHdlr_eight_bit_output 1'0
    assign \ConfigHdlr_eight_bit_output $signal$12
  end
  process $group_128
    assign \ModeCtrl_eight_bit_output 1'0
    assign \ModeCtrl_eight_bit_output \ConfigHdlr_eight_bit_output_locked
  end
  process $group_129
    assign \ConfigHdlr_x_full_frame_resolution_b1 8'00000000
    assign \ConfigHdlr_x_full_frame_resolution_b1 $signal$2
  end
  process $group_130
    assign \ConfigHdlr_x_full_frame_resolution_b2 8'00000000
    assign \ConfigHdlr_x_full_frame_resolution_b2 $signal$3
  end
  process $group_131
    assign \ConfigHdlr_y_full_frame_resolution_b1 8'00000000
    assign \ConfigHdlr_y_full_frame_resolution_b1 $signal$4
  end
  process $group_132
    assign \ConfigHdlr_y_full_frame_resolution_b2 8'00000000
    assign \ConfigHdlr_y_full_frame_resolution_b2 $signal$5
  end
  process $group_133
    assign \ConfigHdlr_x_upper_limit_b1 8'00000000
    assign \ConfigHdlr_x_upper_limit_b1 $signal$6
  end
  process $group_134
    assign \ConfigHdlr_x_upper_limit_b2 8'00000000
    assign \ConfigHdlr_x_upper_limit_b2 $signal$7
  end
  process $group_135
    assign \ConfigHdlr_x_lower_limit_b1 8'00000000
    assign \ConfigHdlr_x_lower_limit_b1 $signal$6
  end
  process $group_136
    assign \ConfigHdlr_x_lower_limit_b2 8'00000000
    assign \ConfigHdlr_x_lower_limit_b2 $signal$8
  end
  process $group_137
    assign \ConfigHdlr_y_upper_limit_b1 8'00000000
    assign \ConfigHdlr_y_upper_limit_b1 $signal$9
  end
  process $group_138
    assign \ConfigHdlr_y_upper_limit_b2 8'00000000
    assign \ConfigHdlr_y_upper_limit_b2 $signal$10
  end
  process $group_139
    assign \ConfigHdlr_y_lower_limit_b1 8'00000000
    assign \ConfigHdlr_y_lower_limit_b1 $signal$9
  end
  process $group_140
    assign \ConfigHdlr_y_lower_limit_b2 8'00000000
    assign \ConfigHdlr_y_lower_limit_b2 $signal$11
  end
  process $group_141
    assign \ModeCtrl_x_full_frame_resolution 16'0000000000000000
    assign \ModeCtrl_x_full_frame_resolution \ConfigHdlr_x_full_frame_resolution_locked
  end
  process $group_142
    assign \ModeCtrl_y_full_frame_resolution 16'0000000000000000
    assign \ModeCtrl_y_full_frame_resolution \ConfigHdlr_y_full_frame_resolution_locked
  end
  process $group_143
    assign \ModeCtrl_x_upper_limit 16'0000000000000000
    assign \ModeCtrl_x_upper_limit \ConfigHdlr_roi_registers_locked [31:16]
  end
  process $group_144
    assign \ModeCtrl_x_lower_limit 16'0000000000000000
    assign \ModeCtrl_x_lower_limit \ConfigHdlr_roi_registers_locked [15:0]
  end
  process $group_145
    assign \ModeCtrl_y_upper_limit 16'0000000000000000
    assign \ModeCtrl_y_upper_limit \ConfigHdlr_roi_registers_locked [63:48]
  end
  process $group_146
    assign \ModeCtrl_y_lower_limit 16'0000000000000000
    assign \ModeCtrl_y_lower_limit \ConfigHdlr_roi_registers_locked [47:32]
  end
  process $group_147
    assign \MuxBus_sampling 1'0
    assign \MuxBus_sampling \ModeCtrl_dwelling
  end
  process $group_148
    assign \ModeCtrl_count_enable 1'0
    assign \ModeCtrl_count_enable \MuxBus_is_done
  end
  process $group_149
    assign \pins_o 14'00000000000000
    switch { \MuxBus_is_x }
      case 1'1
        assign \pins_o \ModeCtrl_x_position
    end
    switch { \MuxBus_is_y }
      case 1'1
        assign \pins_o \ModeCtrl_y_position
    end
  end
  process $group_150
    assign \ModeCtrl_adc_data_strobe 1'0
    switch { \MuxBus_is_a }
      case 1'1
        assign \ModeCtrl_adc_data_strobe \MuxBus_released
    end
  end
  wire width 16 $115
  wire width 14 \pins_i
  cell $pos $116
    parameter \A_SIGNED 0
    parameter \A_WIDTH 14
    parameter \Y_WIDTH 16
    connect \A \pins_i
    connect \Y $115
  end
  process $group_151
    assign \ModeCtrl_adc_data 16'0000000000000000
    switch { \MuxBus_is_a }
      case 1'1
        assign \ModeCtrl_adc_data $115
    end
  end
  wire width 1 \read_strobe
  wire width 1 $117
  cell $not $118
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \ModeCtrl_reader_data_complete
    connect \Y $117
  end
  wire width 1 $119
  cell $and $120
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A $117
    connect \B \r_rdy$79
    connect \Y $119
  end
  process $group_152
    assign \read_strobe 1'0
    assign \read_strobe $119
  end
  process $group_153
    assign \ModeCtrl_out_fifo_r_data 8'00000000
    assign \ModeCtrl_out_fifo_r_data \r_data
  end
  process $group_154
    assign \ModeCtrl_read_happened 1'0
    assign \ModeCtrl_read_happened \read_strobe
  end
  wire width 1 $121
  cell $and $122
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \write_strobe
    connect \B $signal$15
    connect \Y $121
  end
  process $group_155
    assign \ConfigHdlr_write_happened 1'0
    switch { \handling_config }
      case 1'1
        assign \ConfigHdlr_write_happened $121
      case
    end
  end
  wire width 1 $123
  cell $and $124
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \write_strobe
    connect \B $signal$15
    connect \Y $123
  end
  process $group_156
    assign \ModeCtrl_write_happened 1'0
    switch { \handling_config }
      case 1'1
      case
        assign \ModeCtrl_write_happened $123
    end
  end
  process $group_157
    assign \ModeCtrl_write_ready 1'0
    assign \ModeCtrl_write_ready \w_rdy$64
  end
  process $group_158
    assign \w_data 8'00000000
    switch { $signal$15 }
      case 1'1
        switch { \handling_config }
          case 1'1
            assign \w_data \ConfigHdlr_in_fifo_w_data
          case
            assign \w_data \ModeCtrl_in_fifo_w_data
        end
    end
  end
  wire width 1 $125
  cell $and $126
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \write_strobe
    connect \B $signal$15
    connect \Y $125
  end
  process $group_159
    assign \w_en$67 1'0
    switch { $125 }
      case 1'1
        assign \w_en$67 1'1
    end
  end
  process $group_160
    assign \r_en$82 1'0
    switch { \read_strobe }
      case 1'1
        assign \r_en$82 1'1
    end
  end
  cell $dff $127
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \config_flag_latched$next
    connect \Q \config_flag_latched
  end
  cell $dff $128
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \eflnp$next
    connect \Q \eflnp
  end
  cell $dff $129
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \asdf$next
    connect \Q \asdf
  end
  cell $dff $130
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \clk
    connect \D \sdfg$next
    connect \Q \sdfg
  end
  connect \triple__oe 1'0
  connect \triple__o 1'0
  connect \triple__oe$22 1'0
  connect \triple__o$23 1'0
  connect \triple__oe$25 1'0
  connect \triple__o$26 1'0
  connect \triple__oe$28 1'0
  connect \triple__o$29 1'0
  connect \triple__oe$31 1'0
  connect \triple__o$32 1'0
  connect \triple__oe$34 1'0
  connect \triple__o$35 1'0
  connect \triple__oe$37 1'0
  connect \triple__o$38 1'0
  connect \triple__oe$40 1'0
  connect \triple__o$41 1'0
  connect \triple__oe$43 1'0
  connect \triple__o$44 1'0
  connect \triple__oe$46 1'0
  connect \triple__o$47 1'0
  connect \triple__oe$49 1'0
  connect \triple__o$50 1'0
  connect \triple__oe$52 1'0
  connect \triple__o$53 1'0
  connect \triple__oe$55 1'0
  connect \triple__o$56 1'0
  connect \triple__oe$58 1'0
  connect \triple__o$59 1'0
  connect \triple__oe$61 1'0
  connect \triple__o$62 1'0
  connect \_ctrl_en 1'1
  connect \_data_en 1'1
  connect \_ctrl_en$78 1'1
  connect \_data_en$89 1'1
  connect \beam_controller_end_of_dwell$114 1'0
  connect \pins_i 14'00000000000000
end
attribute \generator "Amaranth"
module \top.multiplexer
  wire width 1 input 0 \rst
  wire width 1 input 1 \clk
  wire width 1 input 2 $signal
  wire width 2 input 3 $signal$1
  wire width 8 input 4 $signal$2
  wire width 8 input 5 $signal$3
  wire width 8 input 6 $signal$4
  wire width 8 input 7 $signal$5
  wire width 8 input 8 $signal$6
  wire width 8 input 9 $signal$7
  wire width 8 input 10 $signal$8
  wire width 8 input 11 $signal$9
  wire width 8 input 12 $signal$10
  wire width 8 input 13 $signal$11
  wire width 1 input 14 $signal$12
  wire width 8 input 15 $signal$13
  wire width 1 input 16 $signal$14
  wire width 1 input 17 $signal$15
  wire width 8 input 18 $signal$16
  wire width 1 input 19 \w_rdy
  wire width 8 output 20 \w_data
  wire width 1 output 21 \w_en
  wire width 8 input 22 \r_data
  wire width 1 input 23 \r_rdy
  wire width 1 output 24 \r_en
  wire width 1 output 25 \port_a_0__io__oe
  wire width 1 output 26 \port_a_0__io__o
  wire width 1 input 27 \port_a_0__io__i
  wire width 1 output 28 \port_a_0__oe__o
  wire width 1 output 29 \port_a_1__io__oe
  wire width 1 output 30 \port_a_1__io__o
  wire width 1 input 31 \port_a_1__io__i
  wire width 1 output 32 \port_a_1__oe__o
  wire width 1 output 33 \port_a_2__io__oe
  wire width 1 output 34 \port_a_2__io__o
  wire width 1 input 35 \port_a_2__io__i
  wire width 1 output 36 \port_a_2__oe__o
  wire width 1 output 37 \port_a_3__io__oe
  wire width 1 output 38 \port_a_3__io__o
  wire width 1 input 39 \port_a_3__io__i
  wire width 1 output 40 \port_a_3__oe__o
  wire width 1 output 41 \port_a_4__io__oe
  wire width 1 output 42 \port_a_4__io__o
  wire width 1 input 43 \port_a_4__io__i
  wire width 1 output 44 \port_a_4__oe__o
  wire width 1 output 45 \port_a_5__io__oe
  wire width 1 output 46 \port_a_5__io__o
  wire width 1 input 47 \port_a_5__io__i
  wire width 1 output 48 \port_a_5__oe__o
  wire width 1 output 49 \port_a_6__io__oe
  wire width 1 output 50 \port_a_6__io__o
  wire width 1 input 51 \port_a_6__io__i
  wire width 1 output 52 \port_a_6__oe__o
  wire width 1 output 53 \port_a_7__io__oe
  wire width 1 output 54 \port_a_7__io__o
  wire width 1 input 55 \port_a_7__io__i
  wire width 1 output 56 \port_a_7__oe__o
  wire width 1 output 57 \port_b_0__io__oe
  wire width 1 output 58 \port_b_0__io__o
  wire width 1 input 59 \port_b_0__io__i
  wire width 1 output 60 \port_b_0__oe__o
  wire width 1 output 61 \port_b_1__io__oe
  wire width 1 output 62 \port_b_1__io__o
  wire width 1 input 63 \port_b_1__io__i
  wire width 1 output 64 \port_b_1__oe__o
  wire width 1 output 65 \port_b_2__io__oe
  wire width 1 output 66 \port_b_2__io__o
  wire width 1 input 67 \port_b_2__io__i
  wire width 1 output 68 \port_b_2__oe__o
  wire width 1 output 69 \port_b_3__io__oe
  wire width 1 output 70 \port_b_3__io__o
  wire width 1 input 71 \port_b_3__io__i
  wire width 1 output 72 \port_b_3__oe__o
  wire width 1 output 73 \port_b_4__io__oe
  wire width 1 output 74 \port_b_4__io__o
  wire width 1 input 75 \port_b_4__io__i
  wire width 1 output 76 \port_b_4__oe__o
  wire width 1 output 77 \port_b_5__io__oe
  wire width 1 output 78 \port_b_5__io__o
  wire width 1 input 79 \port_b_5__io__i
  wire width 1 output 80 \port_b_5__oe__o
  wire width 1 output 81 \port_b_7__io__oe
  wire width 1 output 82 \port_b_7__io__o
  wire width 1 input 83 \port_b_7__io__i
  wire width 1 output 84 \port_b_7__oe__o
  wire width 1 output 85 \control_0__D19__o
  wire width 1 output 86 \control_0__D20__o
  wire width 1 output 87 \control_0__D22__o
  wire width 1 output 88 \control_0__D21__o
  wire width 1 output 89 \control_0__D24__o
  wire width 1 output 90 \control_0__D23__o
  wire width 1 output 91 \data_0__D1__oe
  wire width 1 output 92 \data_0__D1__o
  wire width 1 output 93 \data_0__D2__oe
  wire width 1 output 94 \data_0__D2__o
  wire width 1 output 95 \data_0__D3__oe
  wire width 1 output 96 \data_0__D3__o
  wire width 1 output 97 \data_0__D4__oe
  wire width 1 output 98 \data_0__D4__o
  wire width 1 output 99 \data_0__D5__oe
  wire width 1 output 100 \data_0__D5__o
  wire width 1 output 101 \data_0__D6__oe
  wire width 1 output 102 \data_0__D6__o
  wire width 1 output 103 \data_0__D7__oe
  wire width 1 output 104 \data_0__D7__o
  wire width 1 output 105 \data_0__D8__oe
  wire width 1 output 106 \data_0__D8__o
  wire width 1 output 107 \data_0__D9__oe
  wire width 1 output 108 \data_0__D9__o
  wire width 1 output 109 \data_0__D10__oe
  wire width 1 output 110 \data_0__D10__o
  wire width 1 output 111 \data_0__D11__oe
  wire width 1 output 112 \data_0__D11__o
  wire width 1 output 113 \data_0__D12__oe
  wire width 1 output 114 \data_0__D12__o
  wire width 1 output 115 \data_0__D13__oe
  wire width 1 output 116 \data_0__D13__o
  wire width 1 output 117 \data_0__D14__oe
  wire width 1 output 118 \data_0__D14__o
  cell \top.multiplexer.U$$0 \U$$0
    connect \rst \rst
    connect \clk \clk
    connect $signal $signal
    connect $signal$1 $signal$1
    connect $signal$2 $signal$2
    connect $signal$3 $signal$3
    connect $signal$4 $signal$4
    connect $signal$5 $signal$5
    connect $signal$6 $signal$6
    connect $signal$7 $signal$7
    connect $signal$8 $signal$8
    connect $signal$9 $signal$9
    connect $signal$10 $signal$10
    connect $signal$11 $signal$11
    connect $signal$12 $signal$12
    connect $signal$13 $signal$13
    connect $signal$14 $signal$14
    connect $signal$15 $signal$15
    connect $signal$16 $signal$16
    connect \w_rdy \w_rdy
    connect \w_data \w_data
    connect \w_en \w_en
    connect \r_data \r_data
    connect \r_rdy \r_rdy
    connect \r_en \r_en
    connect \port_a_0__io__oe \port_a_0__io__oe
    connect \port_a_0__io__o \port_a_0__io__o
    connect \port_a_0__io__i \port_a_0__io__i
    connect \port_a_0__oe__o \port_a_0__oe__o
    connect \port_a_1__io__oe \port_a_1__io__oe
    connect \port_a_1__io__o \port_a_1__io__o
    connect \port_a_1__io__i \port_a_1__io__i
    connect \port_a_1__oe__o \port_a_1__oe__o
    connect \port_a_2__io__oe \port_a_2__io__oe
    connect \port_a_2__io__o \port_a_2__io__o
    connect \port_a_2__io__i \port_a_2__io__i
    connect \port_a_2__oe__o \port_a_2__oe__o
    connect \port_a_3__io__oe \port_a_3__io__oe
    connect \port_a_3__io__o \port_a_3__io__o
    connect \port_a_3__io__i \port_a_3__io__i
    connect \port_a_3__oe__o \port_a_3__oe__o
    connect \port_a_4__io__oe \port_a_4__io__oe
    connect \port_a_4__io__o \port_a_4__io__o
    connect \port_a_4__io__i \port_a_4__io__i
    connect \port_a_4__oe__o \port_a_4__oe__o
    connect \port_a_5__io__oe \port_a_5__io__oe
    connect \port_a_5__io__o \port_a_5__io__o
    connect \port_a_5__io__i \port_a_5__io__i
    connect \port_a_5__oe__o \port_a_5__oe__o
    connect \port_a_6__io__oe \port_a_6__io__oe
    connect \port_a_6__io__o \port_a_6__io__o
    connect \port_a_6__io__i \port_a_6__io__i
    connect \port_a_6__oe__o \port_a_6__oe__o
    connect \port_a_7__io__oe \port_a_7__io__oe
    connect \port_a_7__io__o \port_a_7__io__o
    connect \port_a_7__io__i \port_a_7__io__i
    connect \port_a_7__oe__o \port_a_7__oe__o
    connect \port_b_0__io__oe \port_b_0__io__oe
    connect \port_b_0__io__o \port_b_0__io__o
    connect \port_b_0__io__i \port_b_0__io__i
    connect \port_b_0__oe__o \port_b_0__oe__o
    connect \port_b_1__io__oe \port_b_1__io__oe
    connect \port_b_1__io__o \port_b_1__io__o
    connect \port_b_1__io__i \port_b_1__io__i
    connect \port_b_1__oe__o \port_b_1__oe__o
    connect \port_b_2__io__oe \port_b_2__io__oe
    connect \port_b_2__io__o \port_b_2__io__o
    connect \port_b_2__io__i \port_b_2__io__i
    connect \port_b_2__oe__o \port_b_2__oe__o
    connect \port_b_3__io__oe \port_b_3__io__oe
    connect \port_b_3__io__o \port_b_3__io__o
    connect \port_b_3__io__i \port_b_3__io__i
    connect \port_b_3__oe__o \port_b_3__oe__o
    connect \port_b_4__io__oe \port_b_4__io__oe
    connect \port_b_4__io__o \port_b_4__io__o
    connect \port_b_4__io__i \port_b_4__io__i
    connect \port_b_4__oe__o \port_b_4__oe__o
    connect \port_b_5__io__oe \port_b_5__io__oe
    connect \port_b_5__io__o \port_b_5__io__o
    connect \port_b_5__io__i \port_b_5__io__i
    connect \port_b_5__oe__o \port_b_5__oe__o
    connect \port_b_7__io__oe \port_b_7__io__oe
    connect \port_b_7__io__o \port_b_7__io__o
    connect \port_b_7__io__i \port_b_7__io__i
    connect \port_b_7__oe__o \port_b_7__oe__o
    connect \control_0__D19__o \control_0__D19__o
    connect \control_0__D20__o \control_0__D20__o
    connect \control_0__D22__o \control_0__D22__o
    connect \control_0__D21__o \control_0__D21__o
    connect \control_0__D24__o \control_0__D24__o
    connect \control_0__D23__o \control_0__D23__o
    connect \data_0__D1__oe \data_0__D1__oe
    connect \data_0__D1__o \data_0__D1__o
    connect \data_0__D2__oe \data_0__D2__oe
    connect \data_0__D2__o \data_0__D2__o
    connect \data_0__D3__oe \data_0__D3__oe
    connect \data_0__D3__o \data_0__D3__o
    connect \data_0__D4__oe \data_0__D4__oe
    connect \data_0__D4__o \data_0__D4__o
    connect \data_0__D5__oe \data_0__D5__oe
    connect \data_0__D5__o \data_0__D5__o
    connect \data_0__D6__oe \data_0__D6__oe
    connect \data_0__D6__o \data_0__D6__o
    connect \data_0__D7__oe \data_0__D7__oe
    connect \data_0__D7__o \data_0__D7__o
    connect \data_0__D8__oe \data_0__D8__oe
    connect \data_0__D8__o \data_0__D8__o
    connect \data_0__D9__oe \data_0__D9__oe
    connect \data_0__D9__o \data_0__D9__o
    connect \data_0__D10__oe \data_0__D10__oe
    connect \data_0__D10__o \data_0__D10__o
    connect \data_0__D11__oe \data_0__D11__oe
    connect \data_0__D11__o \data_0__D11__o
    connect \data_0__D12__oe \data_0__D12__oe
    connect \data_0__D12__o \data_0__D12__o
    connect \data_0__D13__oe \data_0__D13__oe
    connect \data_0__D13__o \data_0__D13__o
    connect \data_0__D14__oe \data_0__D14__oe
    connect \data_0__D14__o \data_0__D14__o
  end
end
attribute \generator "Amaranth"
module \top.cd_sync
  wire width 1 output 0 \rst
  wire width 1 output 1 \clk
  wire width 1 input 2 \clk_if_0__i
  wire width 1 \por_clk
  process $group_0
    assign \por_clk 1'0
    assign \por_clk \clk_if_0__i
  end
  attribute \init 1'0
  wire width 1 \ready
  wire width 1 \ready$next
  attribute \init 10'0000000000
  wire width 10 \timer
  wire width 10 \timer$next
  wire width 1 $1
  cell $eq $2
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 10
    parameter \Y_WIDTH 1
    connect \A \timer
    connect \B 10'1011010000
    connect \Y $1
  end
  process $group_1
    assign \ready$next \ready
    switch { $1 }
      case 1'1
        assign \ready$next 1'1
      case
    end
  end
  wire width 1 $3
  cell $eq $4
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 10
    parameter \Y_WIDTH 1
    connect \A \timer
    connect \B 10'1011010000
    connect \Y $3
  end
  wire width 11 $5
  wire width 11 $6
  cell $add $7
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 1
    parameter \Y_WIDTH 11
    connect \A \timer
    connect \B 1'1
    connect \Y $6
  end
  connect $5 $6
  process $group_2
    assign \timer$next \timer
    switch { $3 }
      case 1'1
      case
        assign \timer$next $5 [9:0]
    end
  end
  process $group_3
    assign \clk 1'0
    assign \clk \clk_if_0__i
  end
  wire width 1 $8
  cell $not $9
    parameter \A_SIGNED 0
    parameter \A_WIDTH 1
    parameter \Y_WIDTH 1
    connect \A \ready
    connect \Y $8
  end
  process $group_4
    assign \rst 1'0
    assign \rst $8
  end
  cell $dff $10
    parameter \CLK_POLARITY 1
    parameter \WIDTH 1
    connect \CLK \por_clk
    connect \D \ready$next
    connect \Q \ready
  end
  cell $dff $11
    parameter \CLK_POLARITY 1
    parameter \WIDTH 10
    connect \CLK \por_clk
    connect \D \timer$next
    connect \Q \timer
  end
end
attribute \generator "Amaranth"
module \top.pin_unused_0
  wire width 2 inout 0 \unused_0__io
  wire width 2 \unused_0__o
  wire width 1 \unused_0__oe
  cell \SB_IO \unused_0_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \unused_0__io [0]
    connect \D_OUT_0 \unused_0__o [0]
    connect \OUTPUT_ENABLE \unused_0__oe
  end
  cell \SB_IO \unused_0_1
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \unused_0__io [1]
    connect \D_OUT_0 \unused_0__o [1]
    connect \OUTPUT_ENABLE \unused_0__oe
  end
  connect \unused_0__o 2'00
  connect \unused_0__oe 1'0
end
attribute \generator "Amaranth"
module \top.pin_i2c_0__scl
  wire width 1 input 0 \i2c_0__scl__o
  wire width 1 input 1 \i2c_0__scl__oe
  wire width 1 output 2 \i2c_0__scl__i
  wire width 1 inout 3 \i2c_0__scl__io
  cell \SB_IO \i2c_0__scl_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \i2c_0__scl__io
    connect \D_IN_0 \i2c_0__scl__i
    connect \D_OUT_0 \i2c_0__scl__o
    connect \OUTPUT_ENABLE \i2c_0__scl__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_i2c_0__sda
  wire width 1 input 0 \i2c_0__sda__o
  wire width 1 input 1 \i2c_0__sda__oe
  wire width 1 output 2 \i2c_0__sda__i
  wire width 1 inout 3 \i2c_0__sda__io
  cell \SB_IO \i2c_0__sda_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \i2c_0__sda__io
    connect \D_IN_0 \i2c_0__sda__i
    connect \D_OUT_0 \i2c_0__sda__o
    connect \OUTPUT_ENABLE \i2c_0__sda__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_fx2_0__sloe
  wire width 1 input 0 \fx2_0__sloe__o_clk
  wire width 1 input 1 \fx2_0__sloe__o
  wire width 1 inout 2 \fx2_0__sloe__io
  cell \SB_IO \fx2_0__sloe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'010101
    connect \PACKAGE_PIN \fx2_0__sloe__io
    connect \OUTPUT_CLK \fx2_0__sloe__o_clk
    connect \D_OUT_0 \fx2_0__sloe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_fx2_0__slrd
  wire width 1 input 0 \fx2_0__slrd__o_clk
  wire width 1 input 1 \fx2_0__slrd__o
  wire width 1 inout 2 \fx2_0__slrd__io
  cell \SB_IO \fx2_0__slrd_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'010101
    connect \PACKAGE_PIN \fx2_0__slrd__io
    connect \OUTPUT_CLK \fx2_0__slrd__o_clk
    connect \D_OUT_0 \fx2_0__slrd__o
  end
end
attribute \generator "Amaranth"
module \top.pin_fx2_0__slwr
  wire width 1 input 0 \fx2_0__slwr__o_clk
  wire width 1 input 1 \fx2_0__slwr__o
  wire width 1 inout 2 \fx2_0__slwr__io
  cell \SB_IO \fx2_0__slwr_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'010101
    connect \PACKAGE_PIN \fx2_0__slwr__io
    connect \OUTPUT_CLK \fx2_0__slwr__o_clk
    connect \D_OUT_0 \fx2_0__slwr__o
  end
end
attribute \generator "Amaranth"
module \top.pin_fx2_0__pktend
  wire width 1 input 0 \fx2_0__pktend__o_clk
  wire width 1 input 1 \fx2_0__pktend__o
  wire width 1 inout 2 \fx2_0__pktend__io
  cell \SB_IO \fx2_0__pktend_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'010101
    connect \PACKAGE_PIN \fx2_0__pktend__io
    connect \OUTPUT_CLK \fx2_0__pktend__o_clk
    connect \D_OUT_0 \fx2_0__pktend__o
  end
end
attribute \generator "Amaranth"
module \top.pin_fx2_0__fifoadr
  wire width 1 input 0 \fx2_0__fifoadr__o_clk
  wire width 2 input 1 \fx2_0__fifoadr__o
  wire width 2 inout 2 \fx2_0__fifoadr__io
  cell \SB_IO \fx2_0__fifoadr_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'010101
    connect \PACKAGE_PIN \fx2_0__fifoadr__io [0]
    connect \OUTPUT_CLK \fx2_0__fifoadr__o_clk
    connect \D_OUT_0 \fx2_0__fifoadr__o [0]
  end
  cell \SB_IO \fx2_0__fifoadr_1
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'010101
    connect \PACKAGE_PIN \fx2_0__fifoadr__io [1]
    connect \OUTPUT_CLK \fx2_0__fifoadr__o_clk
    connect \D_OUT_0 \fx2_0__fifoadr__o [1]
  end
end
attribute \generator "Amaranth"
module \top.pin_fx2_0__flag
  wire width 1 input 0 \fx2_0__flag__i_clk
  wire width 4 output 1 \fx2_0__flag__i1
  wire width 4 inout 2 \fx2_0__flag__io
  wire width 4 \fx2_0__flag__i0_ff
  wire width 4 \fx2_0__flag__i1_ff
  cell \SB_IO \fx2_0__flag_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'000000
    connect \PACKAGE_PIN \fx2_0__flag__io [0]
    connect \INPUT_CLK \fx2_0__flag__i_clk
    connect \D_IN_0 \fx2_0__flag__i0_ff [0]
    connect \D_IN_1 \fx2_0__flag__i1_ff [0]
  end
  cell \SB_IO \fx2_0__flag_1
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'000000
    connect \PACKAGE_PIN \fx2_0__flag__io [1]
    connect \INPUT_CLK \fx2_0__flag__i_clk
    connect \D_IN_0 \fx2_0__flag__i0_ff [1]
    connect \D_IN_1 \fx2_0__flag__i1_ff [1]
  end
  cell \SB_IO \fx2_0__flag_2
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'000000
    connect \PACKAGE_PIN \fx2_0__flag__io [2]
    connect \INPUT_CLK \fx2_0__flag__i_clk
    connect \D_IN_0 \fx2_0__flag__i0_ff [2]
    connect \D_IN_1 \fx2_0__flag__i1_ff [2]
  end
  cell \SB_IO \fx2_0__flag_3
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'000000
    connect \PACKAGE_PIN \fx2_0__flag__io [3]
    connect \INPUT_CLK \fx2_0__flag__i_clk
    connect \D_IN_0 \fx2_0__flag__i0_ff [3]
    connect \D_IN_1 \fx2_0__flag__i1_ff [3]
  end
  wire width 4 \fx2_0__flag__i0
  cell $dff \U$$0
    parameter \CLK_POLARITY 1
    parameter \WIDTH 4
    connect \CLK \fx2_0__flag__i_clk
    connect \D \fx2_0__flag__i0_ff
    connect \Q \fx2_0__flag__i0
  end
  cell $dff \U$$1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 4
    connect \CLK \fx2_0__flag__i_clk
    connect \D \fx2_0__flag__i1_ff
    connect \Q \fx2_0__flag__i1
  end
end
attribute \generator "Amaranth"
module \top.pin_fx2_0__fd
  wire width 1 input 0 \fx2_0__fd__o_clk
  wire width 1 input 1 \fx2_0__fd__oe
  wire width 8 input 2 \fx2_0__fd__o0
  wire width 8 input 3 \fx2_0__fd__o1
  wire width 1 input 4 \fx2_0__fd__i_clk
  wire width 8 output 5 \fx2_0__fd__i1
  wire width 8 inout 6 \fx2_0__fd__io
  wire width 8 \fx2_0__fd__i0_ff
  wire width 8 \fx2_0__fd__i1_ff
  wire width 8 \fx2_0__fd__o1_ff
  cell \SB_IO \fx2_0__fd_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [0]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [0]
    connect \D_IN_1 \fx2_0__fd__i1_ff [0]
    connect \D_OUT_0 \fx2_0__fd__o0 [0]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [0]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  cell \SB_IO \fx2_0__fd_1
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [1]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [1]
    connect \D_IN_1 \fx2_0__fd__i1_ff [1]
    connect \D_OUT_0 \fx2_0__fd__o0 [1]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [1]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  cell \SB_IO \fx2_0__fd_2
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [2]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [2]
    connect \D_IN_1 \fx2_0__fd__i1_ff [2]
    connect \D_OUT_0 \fx2_0__fd__o0 [2]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [2]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  cell \SB_IO \fx2_0__fd_3
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [3]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [3]
    connect \D_IN_1 \fx2_0__fd__i1_ff [3]
    connect \D_OUT_0 \fx2_0__fd__o0 [3]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [3]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  cell \SB_IO \fx2_0__fd_4
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [4]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [4]
    connect \D_IN_1 \fx2_0__fd__i1_ff [4]
    connect \D_OUT_0 \fx2_0__fd__o0 [4]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [4]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  cell \SB_IO \fx2_0__fd_5
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [5]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [5]
    connect \D_IN_1 \fx2_0__fd__i1_ff [5]
    connect \D_OUT_0 \fx2_0__fd__o0 [5]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [5]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  cell \SB_IO \fx2_0__fd_6
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [6]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [6]
    connect \D_IN_1 \fx2_0__fd__i1_ff [6]
    connect \D_OUT_0 \fx2_0__fd__o0 [6]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [6]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  cell \SB_IO \fx2_0__fd_7
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'110000
    connect \PACKAGE_PIN \fx2_0__fd__io [7]
    connect \INPUT_CLK \fx2_0__fd__i_clk
    connect \OUTPUT_CLK \fx2_0__fd__o_clk
    connect \D_IN_0 \fx2_0__fd__i0_ff [7]
    connect \D_IN_1 \fx2_0__fd__i1_ff [7]
    connect \D_OUT_0 \fx2_0__fd__o0 [7]
    connect \D_OUT_1 \fx2_0__fd__o1_ff [7]
    connect \OUTPUT_ENABLE \fx2_0__fd__oe
  end
  wire width 8 \fx2_0__fd__i0
  cell $dff \U$$0
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \fx2_0__fd__i_clk
    connect \D \fx2_0__fd__i0_ff
    connect \Q \fx2_0__fd__i0
  end
  cell $dff \U$$1
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \fx2_0__fd__i_clk
    connect \D \fx2_0__fd__i1_ff
    connect \Q \fx2_0__fd__i1
  end
  cell $dff \U$$2
    parameter \CLK_POLARITY 1
    parameter \WIDTH 8
    connect \CLK \fx2_0__fd__o_clk
    connect \D \fx2_0__fd__o1
    connect \Q \fx2_0__fd__o1_ff
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_0__io
  wire width 1 input 0 \port_a_0__io__oe
  wire width 1 input 1 \port_a_0__io__o
  wire width 1 output 2 \port_a_0__io__i
  wire width 1 inout 3 \port_a_0__io__io
  cell \SB_IO \port_a_0__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_0__io__io
    connect \D_IN_0 \port_a_0__io__i
    connect \D_OUT_0 \port_a_0__io__o
    connect \OUTPUT_ENABLE \port_a_0__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_0__oe
  wire width 1 input 0 \port_a_0__oe__o
  wire width 1 inout 1 \port_a_0__oe__io
  cell \SB_IO \port_a_0__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_0__oe__io
    connect \D_OUT_0 \port_a_0__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_1__io
  wire width 1 input 0 \port_a_1__io__oe
  wire width 1 input 1 \port_a_1__io__o
  wire width 1 output 2 \port_a_1__io__i
  wire width 1 inout 3 \port_a_1__io__io
  cell \SB_IO \port_a_1__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_1__io__io
    connect \D_IN_0 \port_a_1__io__i
    connect \D_OUT_0 \port_a_1__io__o
    connect \OUTPUT_ENABLE \port_a_1__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_1__oe
  wire width 1 input 0 \port_a_1__oe__o
  wire width 1 inout 1 \port_a_1__oe__io
  cell \SB_IO \port_a_1__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_1__oe__io
    connect \D_OUT_0 \port_a_1__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_2__io
  wire width 1 input 0 \port_a_2__io__oe
  wire width 1 input 1 \port_a_2__io__o
  wire width 1 output 2 \port_a_2__io__i
  wire width 1 inout 3 \port_a_2__io__io
  cell \SB_IO \port_a_2__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_2__io__io
    connect \D_IN_0 \port_a_2__io__i
    connect \D_OUT_0 \port_a_2__io__o
    connect \OUTPUT_ENABLE \port_a_2__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_2__oe
  wire width 1 input 0 \port_a_2__oe__o
  wire width 1 inout 1 \port_a_2__oe__io
  cell \SB_IO \port_a_2__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_2__oe__io
    connect \D_OUT_0 \port_a_2__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_3__io
  wire width 1 input 0 \port_a_3__io__oe
  wire width 1 input 1 \port_a_3__io__o
  wire width 1 output 2 \port_a_3__io__i
  wire width 1 inout 3 \port_a_3__io__io
  cell \SB_IO \port_a_3__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_3__io__io
    connect \D_IN_0 \port_a_3__io__i
    connect \D_OUT_0 \port_a_3__io__o
    connect \OUTPUT_ENABLE \port_a_3__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_3__oe
  wire width 1 input 0 \port_a_3__oe__o
  wire width 1 inout 1 \port_a_3__oe__io
  cell \SB_IO \port_a_3__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_3__oe__io
    connect \D_OUT_0 \port_a_3__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_4__io
  wire width 1 input 0 \port_a_4__io__oe
  wire width 1 input 1 \port_a_4__io__o
  wire width 1 output 2 \port_a_4__io__i
  wire width 1 inout 3 \port_a_4__io__io
  cell \SB_IO \port_a_4__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_4__io__io
    connect \D_IN_0 \port_a_4__io__i
    connect \D_OUT_0 \port_a_4__io__o
    connect \OUTPUT_ENABLE \port_a_4__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_4__oe
  wire width 1 input 0 \port_a_4__oe__o
  wire width 1 inout 1 \port_a_4__oe__io
  cell \SB_IO \port_a_4__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_4__oe__io
    connect \D_OUT_0 \port_a_4__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_5__io
  wire width 1 input 0 \port_a_5__io__oe
  wire width 1 input 1 \port_a_5__io__o
  wire width 1 output 2 \port_a_5__io__i
  wire width 1 inout 3 \port_a_5__io__io
  cell \SB_IO \port_a_5__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_5__io__io
    connect \D_IN_0 \port_a_5__io__i
    connect \D_OUT_0 \port_a_5__io__o
    connect \OUTPUT_ENABLE \port_a_5__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_5__oe
  wire width 1 input 0 \port_a_5__oe__o
  wire width 1 inout 1 \port_a_5__oe__io
  cell \SB_IO \port_a_5__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_5__oe__io
    connect \D_OUT_0 \port_a_5__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_6__io
  wire width 1 input 0 \port_a_6__io__oe
  wire width 1 input 1 \port_a_6__io__o
  wire width 1 output 2 \port_a_6__io__i
  wire width 1 inout 3 \port_a_6__io__io
  cell \SB_IO \port_a_6__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_6__io__io
    connect \D_IN_0 \port_a_6__io__i
    connect \D_OUT_0 \port_a_6__io__o
    connect \OUTPUT_ENABLE \port_a_6__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_6__oe
  wire width 1 input 0 \port_a_6__oe__o
  wire width 1 inout 1 \port_a_6__oe__io
  cell \SB_IO \port_a_6__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_6__oe__io
    connect \D_OUT_0 \port_a_6__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_7__io
  wire width 1 input 0 \port_a_7__io__oe
  wire width 1 input 1 \port_a_7__io__o
  wire width 1 output 2 \port_a_7__io__i
  wire width 1 inout 3 \port_a_7__io__io
  cell \SB_IO \port_a_7__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_a_7__io__io
    connect \D_IN_0 \port_a_7__io__i
    connect \D_OUT_0 \port_a_7__io__o
    connect \OUTPUT_ENABLE \port_a_7__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_a_7__oe
  wire width 1 input 0 \port_a_7__oe__o
  wire width 1 inout 1 \port_a_7__oe__io
  cell \SB_IO \port_a_7__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_a_7__oe__io
    connect \D_OUT_0 \port_a_7__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_0__io
  wire width 1 input 0 \port_b_0__io__oe
  wire width 1 input 1 \port_b_0__io__o
  wire width 1 output 2 \port_b_0__io__i
  wire width 1 inout 3 \port_b_0__io__io
  cell \SB_IO \port_b_0__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_0__io__io
    connect \D_IN_0 \port_b_0__io__i
    connect \D_OUT_0 \port_b_0__io__o
    connect \OUTPUT_ENABLE \port_b_0__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_0__oe
  wire width 1 input 0 \port_b_0__oe__o
  wire width 1 inout 1 \port_b_0__oe__io
  cell \SB_IO \port_b_0__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_0__oe__io
    connect \D_OUT_0 \port_b_0__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_1__io
  wire width 1 input 0 \port_b_1__io__oe
  wire width 1 input 1 \port_b_1__io__o
  wire width 1 output 2 \port_b_1__io__i
  wire width 1 inout 3 \port_b_1__io__io
  cell \SB_IO \port_b_1__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_1__io__io
    connect \D_IN_0 \port_b_1__io__i
    connect \D_OUT_0 \port_b_1__io__o
    connect \OUTPUT_ENABLE \port_b_1__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_1__oe
  wire width 1 input 0 \port_b_1__oe__o
  wire width 1 inout 1 \port_b_1__oe__io
  cell \SB_IO \port_b_1__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_1__oe__io
    connect \D_OUT_0 \port_b_1__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_2__io
  wire width 1 input 0 \port_b_2__io__oe
  wire width 1 input 1 \port_b_2__io__o
  wire width 1 output 2 \port_b_2__io__i
  wire width 1 inout 3 \port_b_2__io__io
  cell \SB_IO \port_b_2__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_2__io__io
    connect \D_IN_0 \port_b_2__io__i
    connect \D_OUT_0 \port_b_2__io__o
    connect \OUTPUT_ENABLE \port_b_2__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_2__oe
  wire width 1 input 0 \port_b_2__oe__o
  wire width 1 inout 1 \port_b_2__oe__io
  cell \SB_IO \port_b_2__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_2__oe__io
    connect \D_OUT_0 \port_b_2__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_3__io
  wire width 1 input 0 \port_b_3__io__oe
  wire width 1 input 1 \port_b_3__io__o
  wire width 1 output 2 \port_b_3__io__i
  wire width 1 inout 3 \port_b_3__io__io
  cell \SB_IO \port_b_3__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_3__io__io
    connect \D_IN_0 \port_b_3__io__i
    connect \D_OUT_0 \port_b_3__io__o
    connect \OUTPUT_ENABLE \port_b_3__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_3__oe
  wire width 1 input 0 \port_b_3__oe__o
  wire width 1 inout 1 \port_b_3__oe__io
  cell \SB_IO \port_b_3__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_3__oe__io
    connect \D_OUT_0 \port_b_3__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_4__io
  wire width 1 input 0 \port_b_4__io__oe
  wire width 1 input 1 \port_b_4__io__o
  wire width 1 output 2 \port_b_4__io__i
  wire width 1 inout 3 \port_b_4__io__io
  cell \SB_IO \port_b_4__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_4__io__io
    connect \D_IN_0 \port_b_4__io__i
    connect \D_OUT_0 \port_b_4__io__o
    connect \OUTPUT_ENABLE \port_b_4__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_4__oe
  wire width 1 input 0 \port_b_4__oe__o
  wire width 1 inout 1 \port_b_4__oe__io
  cell \SB_IO \port_b_4__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_4__oe__io
    connect \D_OUT_0 \port_b_4__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_5__io
  wire width 1 input 0 \port_b_5__io__oe
  wire width 1 input 1 \port_b_5__io__o
  wire width 1 output 2 \port_b_5__io__i
  wire width 1 inout 3 \port_b_5__io__io
  cell \SB_IO \port_b_5__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_5__io__io
    connect \D_IN_0 \port_b_5__io__i
    connect \D_OUT_0 \port_b_5__io__o
    connect \OUTPUT_ENABLE \port_b_5__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_5__oe
  wire width 1 input 0 \port_b_5__oe__o
  wire width 1 inout 1 \port_b_5__oe__io
  cell \SB_IO \port_b_5__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_5__oe__io
    connect \D_OUT_0 \port_b_5__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_7__io
  wire width 1 input 0 \port_b_7__io__oe
  wire width 1 input 1 \port_b_7__io__o
  wire width 1 output 2 \port_b_7__io__i
  wire width 1 inout 3 \port_b_7__io__io
  cell \SB_IO \port_b_7__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_7__io__io
    connect \D_IN_0 \port_b_7__io__i
    connect \D_OUT_0 \port_b_7__io__o
    connect \OUTPUT_ENABLE \port_b_7__io__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_7__oe
  wire width 1 input 0 \port_b_7__oe__o
  wire width 1 inout 1 \port_b_7__oe__io
  cell \SB_IO \port_b_7__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_7__oe__io
    connect \D_OUT_0 \port_b_7__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_port_b_6__io
  wire width 1 inout 0 \port_b_6__io__io
  wire width 1 \port_b_6__io__i
  wire width 1 \port_b_6__io__o
  wire width 1 \port_b_6__io__oe
  cell \SB_IO \port_b_6__io_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PULLUP 1
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \port_b_6__io__io
    connect \D_IN_0 \port_b_6__io__i
    connect \D_OUT_0 \port_b_6__io__o
    connect \OUTPUT_ENABLE \port_b_6__io__oe
  end
  connect \port_b_6__io__o 1'0
  connect \port_b_6__io__oe 1'0
end
attribute \generator "Amaranth"
module \top.pin_port_b_6__oe
  wire width 1 input 0 \port_b_6__oe__o
  wire width 1 inout 1 \port_b_6__oe__io
  cell \SB_IO \port_b_6__oe_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \port_b_6__oe__io
    connect \D_OUT_0 \port_b_6__oe__o
  end
end
attribute \generator "Amaranth"
module \top.pin_control_0__D17
  wire width 1 inout 0 \control_0__D17__io
  wire width 1 \control_0__D17__o
  cell \SB_IO \control_0__D17_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D17__io
    connect \D_OUT_0 \control_0__D17__o
  end
  connect \control_0__D17__o 1'0
end
attribute \generator "Amaranth"
module \top.pin_control_0__D18
  wire width 1 inout 0 \control_0__D18__io
  wire width 1 \control_0__D18__o
  cell \SB_IO \control_0__D18_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D18__io
    connect \D_OUT_0 \control_0__D18__o
  end
  connect \control_0__D18__o 1'0
end
attribute \generator "Amaranth"
module \top.pin_control_0__D19
  wire width 1 input 0 \control_0__D19__o
  wire width 1 inout 1 \control_0__D19__io
  cell \SB_IO \control_0__D19_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D19__io
    connect \D_OUT_0 \control_0__D19__o
  end
end
attribute \generator "Amaranth"
module \top.pin_control_0__D20
  wire width 1 input 0 \control_0__D20__o
  wire width 1 inout 1 \control_0__D20__io
  cell \SB_IO \control_0__D20_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D20__io
    connect \D_OUT_0 \control_0__D20__o
  end
end
attribute \generator "Amaranth"
module \top.pin_control_0__D21
  wire width 1 input 0 \control_0__D21__o
  wire width 1 inout 1 \control_0__D21__io
  cell \SB_IO \control_0__D21_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D21__io
    connect \D_OUT_0 \control_0__D21__o
  end
end
attribute \generator "Amaranth"
module \top.pin_control_0__D22
  wire width 1 input 0 \control_0__D22__o
  wire width 1 inout 1 \control_0__D22__io
  cell \SB_IO \control_0__D22_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D22__io
    connect \D_OUT_0 \control_0__D22__o
  end
end
attribute \generator "Amaranth"
module \top.pin_control_0__D23
  wire width 1 input 0 \control_0__D23__o
  wire width 1 inout 1 \control_0__D23__io
  cell \SB_IO \control_0__D23_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D23__io
    connect \D_OUT_0 \control_0__D23__o
  end
end
attribute \generator "Amaranth"
module \top.pin_control_0__D24
  wire width 1 input 0 \control_0__D24__o
  wire width 1 inout 1 \control_0__D24__io
  cell \SB_IO \control_0__D24_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'011001
    connect \PACKAGE_PIN \control_0__D24__io
    connect \D_OUT_0 \control_0__D24__o
  end
end
attribute \generator "Amaranth"
module \top.pin_power_ok_0
  wire width 1 inout 0 \power_ok_0__io
  wire width 1 \power_ok_0__i
  cell \SB_IO \power_ok_0_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'000001
    connect \PACKAGE_PIN \power_ok_0__io
    connect \D_IN_0 \power_ok_0__i
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D1
  wire width 1 input 0 \data_0__D1__oe
  wire width 1 input 1 \data_0__D1__o
  wire width 1 inout 2 \data_0__D1__io
  wire width 1 \data_0__D1__i
  cell \SB_IO \data_0__D1_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D1__io
    connect \D_IN_0 \data_0__D1__i
    connect \D_OUT_0 \data_0__D1__o
    connect \OUTPUT_ENABLE \data_0__D1__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D2
  wire width 1 input 0 \data_0__D2__oe
  wire width 1 input 1 \data_0__D2__o
  wire width 1 inout 2 \data_0__D2__io
  wire width 1 \data_0__D2__i
  cell \SB_IO \data_0__D2_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D2__io
    connect \D_IN_0 \data_0__D2__i
    connect \D_OUT_0 \data_0__D2__o
    connect \OUTPUT_ENABLE \data_0__D2__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D3
  wire width 1 input 0 \data_0__D3__oe
  wire width 1 input 1 \data_0__D3__o
  wire width 1 inout 2 \data_0__D3__io
  wire width 1 \data_0__D3__i
  cell \SB_IO \data_0__D3_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D3__io
    connect \D_IN_0 \data_0__D3__i
    connect \D_OUT_0 \data_0__D3__o
    connect \OUTPUT_ENABLE \data_0__D3__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D4
  wire width 1 input 0 \data_0__D4__oe
  wire width 1 input 1 \data_0__D4__o
  wire width 1 inout 2 \data_0__D4__io
  wire width 1 \data_0__D4__i
  cell \SB_IO \data_0__D4_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D4__io
    connect \D_IN_0 \data_0__D4__i
    connect \D_OUT_0 \data_0__D4__o
    connect \OUTPUT_ENABLE \data_0__D4__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D5
  wire width 1 input 0 \data_0__D5__oe
  wire width 1 input 1 \data_0__D5__o
  wire width 1 inout 2 \data_0__D5__io
  wire width 1 \data_0__D5__i
  cell \SB_IO \data_0__D5_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D5__io
    connect \D_IN_0 \data_0__D5__i
    connect \D_OUT_0 \data_0__D5__o
    connect \OUTPUT_ENABLE \data_0__D5__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D6
  wire width 1 input 0 \data_0__D6__oe
  wire width 1 input 1 \data_0__D6__o
  wire width 1 inout 2 \data_0__D6__io
  wire width 1 \data_0__D6__i
  cell \SB_IO \data_0__D6_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D6__io
    connect \D_IN_0 \data_0__D6__i
    connect \D_OUT_0 \data_0__D6__o
    connect \OUTPUT_ENABLE \data_0__D6__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D7
  wire width 1 input 0 \data_0__D7__oe
  wire width 1 input 1 \data_0__D7__o
  wire width 1 inout 2 \data_0__D7__io
  wire width 1 \data_0__D7__i
  cell \SB_IO \data_0__D7_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D7__io
    connect \D_IN_0 \data_0__D7__i
    connect \D_OUT_0 \data_0__D7__o
    connect \OUTPUT_ENABLE \data_0__D7__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D8
  wire width 1 input 0 \data_0__D8__oe
  wire width 1 input 1 \data_0__D8__o
  wire width 1 inout 2 \data_0__D8__io
  wire width 1 \data_0__D8__i
  cell \SB_IO \data_0__D8_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D8__io
    connect \D_IN_0 \data_0__D8__i
    connect \D_OUT_0 \data_0__D8__o
    connect \OUTPUT_ENABLE \data_0__D8__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D9
  wire width 1 input 0 \data_0__D9__oe
  wire width 1 input 1 \data_0__D9__o
  wire width 1 inout 2 \data_0__D9__io
  wire width 1 \data_0__D9__i
  cell \SB_IO \data_0__D9_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D9__io
    connect \D_IN_0 \data_0__D9__i
    connect \D_OUT_0 \data_0__D9__o
    connect \OUTPUT_ENABLE \data_0__D9__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D10
  wire width 1 input 0 \data_0__D10__oe
  wire width 1 input 1 \data_0__D10__o
  wire width 1 inout 2 \data_0__D10__io
  wire width 1 \data_0__D10__i
  cell \SB_IO \data_0__D10_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D10__io
    connect \D_IN_0 \data_0__D10__i
    connect \D_OUT_0 \data_0__D10__o
    connect \OUTPUT_ENABLE \data_0__D10__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D11
  wire width 1 input 0 \data_0__D11__oe
  wire width 1 input 1 \data_0__D11__o
  wire width 1 inout 2 \data_0__D11__io
  wire width 1 \data_0__D11__i
  cell \SB_IO \data_0__D11_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D11__io
    connect \D_IN_0 \data_0__D11__i
    connect \D_OUT_0 \data_0__D11__o
    connect \OUTPUT_ENABLE \data_0__D11__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D12
  wire width 1 input 0 \data_0__D12__oe
  wire width 1 input 1 \data_0__D12__o
  wire width 1 inout 2 \data_0__D12__io
  wire width 1 \data_0__D12__i
  cell \SB_IO \data_0__D12_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D12__io
    connect \D_IN_0 \data_0__D12__i
    connect \D_OUT_0 \data_0__D12__o
    connect \OUTPUT_ENABLE \data_0__D12__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D13
  wire width 1 input 0 \data_0__D13__oe
  wire width 1 input 1 \data_0__D13__o
  wire width 1 inout 2 \data_0__D13__io
  wire width 1 \data_0__D13__i
  cell \SB_IO \data_0__D13_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D13__io
    connect \D_IN_0 \data_0__D13__i
    connect \D_OUT_0 \data_0__D13__o
    connect \OUTPUT_ENABLE \data_0__D13__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_data_0__D14
  wire width 1 input 0 \data_0__D14__oe
  wire width 1 input 1 \data_0__D14__o
  wire width 1 inout 2 \data_0__D14__io
  wire width 1 \data_0__D14__i
  cell \SB_IO \data_0__D14_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'101001
    connect \PACKAGE_PIN \data_0__D14__io
    connect \D_IN_0 \data_0__D14__i
    connect \D_OUT_0 \data_0__D14__o
    connect \OUTPUT_ENABLE \data_0__D14__oe
  end
end
attribute \generator "Amaranth"
module \top.pin_clk_if_0
  wire width 1 output 0 \clk_if_0__i
  wire width 1 inout 1 \clk_if_0__io
  cell \SB_GB_IO \clk_if_0_0
    parameter \IO_STANDARD "SB_LVCMOS33"
    parameter \PIN_TYPE 6'000001
    connect \PACKAGE_PIN \clk_if_0__io
    connect \GLOBAL_BUFFER_OUTPUT \clk_if_0__i
  end
end
attribute \generator "Amaranth"
attribute \top 1
module \top
  wire width 2 inout 0 \unused_0__io
  wire width 1 inout 1 \i2c_0__scl__io
  wire width 1 inout 2 \i2c_0__sda__io
  wire width 1 inout 3 \fx2_0__sloe__io
  wire width 1 inout 4 \fx2_0__slrd__io
  wire width 1 inout 5 \fx2_0__slwr__io
  wire width 1 inout 6 \fx2_0__pktend__io
  wire width 2 inout 7 \fx2_0__fifoadr__io
  wire width 4 inout 8 \fx2_0__flag__io
  wire width 8 inout 9 \fx2_0__fd__io
  wire width 1 inout 10 \port_a_0__io__io
  wire width 1 inout 11 \port_a_0__oe__io
  wire width 1 inout 12 \port_a_1__io__io
  wire width 1 inout 13 \port_a_1__oe__io
  wire width 1 inout 14 \port_a_2__io__io
  wire width 1 inout 15 \port_a_2__oe__io
  wire width 1 inout 16 \port_a_3__io__io
  wire width 1 inout 17 \port_a_3__oe__io
  wire width 1 inout 18 \port_a_4__io__io
  wire width 1 inout 19 \port_a_4__oe__io
  wire width 1 inout 20 \port_a_5__io__io
  wire width 1 inout 21 \port_a_5__oe__io
  wire width 1 inout 22 \port_a_6__io__io
  wire width 1 inout 23 \port_a_6__oe__io
  wire width 1 inout 24 \port_a_7__io__io
  wire width 1 inout 25 \port_a_7__oe__io
  wire width 1 inout 26 \port_b_0__io__io
  wire width 1 inout 27 \port_b_0__oe__io
  wire width 1 inout 28 \port_b_1__io__io
  wire width 1 inout 29 \port_b_1__oe__io
  wire width 1 inout 30 \port_b_2__io__io
  wire width 1 inout 31 \port_b_2__oe__io
  wire width 1 inout 32 \port_b_3__io__io
  wire width 1 inout 33 \port_b_3__oe__io
  wire width 1 inout 34 \port_b_4__io__io
  wire width 1 inout 35 \port_b_4__oe__io
  wire width 1 inout 36 \port_b_5__io__io
  wire width 1 inout 37 \port_b_5__oe__io
  wire width 1 inout 38 \port_b_7__io__io
  wire width 1 inout 39 \port_b_7__oe__io
  wire width 1 inout 40 \port_b_6__io__io
  wire width 1 inout 41 \port_b_6__oe__io
  wire width 1 inout 42 \control_0__D17__io
  wire width 1 inout 43 \control_0__D18__io
  wire width 1 inout 44 \control_0__D19__io
  wire width 1 inout 45 \control_0__D20__io
  wire width 1 inout 46 \control_0__D21__io
  wire width 1 inout 47 \control_0__D22__io
  wire width 1 inout 48 \control_0__D23__io
  wire width 1 inout 49 \control_0__D24__io
  wire width 1 inout 50 \power_ok_0__io
  wire width 1 inout 51 \data_0__D1__io
  wire width 1 inout 52 \data_0__D2__io
  wire width 1 inout 53 \data_0__D3__io
  wire width 1 inout 54 \data_0__D4__io
  wire width 1 inout 55 \data_0__D5__io
  wire width 1 inout 56 \data_0__D6__io
  wire width 1 inout 57 \data_0__D7__io
  wire width 1 inout 58 \data_0__D8__io
  wire width 1 inout 59 \data_0__D9__io
  wire width 1 inout 60 \data_0__D10__io
  wire width 1 inout 61 \data_0__D11__io
  wire width 1 inout 62 \data_0__D12__io
  wire width 1 inout 63 \data_0__D13__io
  wire width 1 inout 64 \data_0__D14__io
  wire width 1 inout 65 \clk_if_0__io
  wire width 7 \i2c_target_address
  wire width 1 \i2c_target_start
  wire width 8 \i2c_target_data_o
  wire width 1 \i2c_target_read
  wire width 8 \i2c_target_data_i
  wire width 1 \i2c_target_write
  wire width 1 \i2c_target_ack_o
  wire width 1 \i2c_target_rst
  wire width 1 \i2c_target_clk
  wire width 1 \i2c_target_i2c_0__scl__o
  wire width 1 \i2c_target_i2c_0__scl__oe
  wire width 1 \i2c_target_i2c_0__sda__o
  wire width 1 \i2c_target_i2c_0__sda__oe
  wire width 1 \i2c_target_i2c_0__scl__i
  wire width 1 \i2c_target_i2c_0__sda__i
  cell \top.i2c_target \i2c_target
    connect \address \i2c_target_address
    connect \start \i2c_target_start
    connect \data_o \i2c_target_data_o
    connect \read \i2c_target_read
    connect \data_i \i2c_target_data_i
    connect \write \i2c_target_write
    connect \ack_o \i2c_target_ack_o
    connect \rst \i2c_target_rst
    connect \clk \i2c_target_clk
    connect \i2c_0__scl__o \i2c_target_i2c_0__scl__o
    connect \i2c_0__scl__oe \i2c_target_i2c_0__scl__oe
    connect \i2c_0__sda__o \i2c_target_i2c_0__sda__o
    connect \i2c_0__sda__oe \i2c_target_i2c_0__sda__oe
    connect \i2c_0__scl__i \i2c_target_i2c_0__scl__i
    connect \i2c_0__sda__i \i2c_target_i2c_0__sda__i
  end
  wire width 1 \registers_$signal
  wire width 2 \registers_$signal$1
  wire width 8 \registers_$signal$2
  wire width 8 \registers_$signal$3
  wire width 8 \registers_$signal$4
  wire width 8 \registers_$signal$5
  wire width 8 \registers_$signal$6
  wire width 8 \registers_$signal$7
  wire width 8 \registers_$signal$8
  wire width 8 \registers_$signal$9
  wire width 8 \registers_$signal$10
  wire width 8 \registers_$signal$11
  wire width 1 \registers_$signal$12
  wire width 8 \registers_$signal$13
  wire width 1 \registers_$signal$14
  wire width 1 \registers_$signal$15
  wire width 8 \registers_$signal$16
  cell \top.registers \registers
    connect \start \i2c_target_start
    connect \data_o \i2c_target_data_o
    connect \read \i2c_target_read
    connect \data_i \i2c_target_data_i
    connect \write \i2c_target_write
    connect \ack_o \i2c_target_ack_o
    connect \rst \i2c_target_rst
    connect \clk \i2c_target_clk
    connect $signal \registers_$signal
    connect $signal$1 \registers_$signal$1
    connect $signal$2 \registers_$signal$2
    connect $signal$3 \registers_$signal$3
    connect $signal$4 \registers_$signal$4
    connect $signal$5 \registers_$signal$5
    connect $signal$6 \registers_$signal$6
    connect $signal$7 \registers_$signal$7
    connect $signal$8 \registers_$signal$8
    connect $signal$9 \registers_$signal$9
    connect $signal$10 \registers_$signal$10
    connect $signal$11 \registers_$signal$11
    connect $signal$12 \registers_$signal$12
    connect $signal$13 \registers_$signal$13
    connect $signal$14 \registers_$signal$14
    connect $signal$15 \registers_$signal$15
    connect $signal$16 \registers_$signal$16
  end
  wire width 1 \fx2_crossbar_fx2_0__flag__i_clk
  wire width 4 \fx2_crossbar_fx2_0__flag__i1
  wire width 1 \fx2_crossbar_fx2_0__fifoadr__o_clk
  wire width 2 \fx2_crossbar_fx2_0__fifoadr__o
  wire width 1 \fx2_crossbar_fx2_0__fd__o_clk
  wire width 1 \fx2_crossbar_fx2_0__fd__oe
  wire width 8 \fx2_crossbar_fx2_0__fd__o0
  wire width 8 \fx2_crossbar_fx2_0__fd__o1
  wire width 1 \fx2_crossbar_fx2_0__fd__i_clk
  wire width 8 \fx2_crossbar_fx2_0__fd__i1
  wire width 1 \fx2_crossbar_fx2_0__sloe__o_clk
  wire width 1 \fx2_crossbar_fx2_0__sloe__o
  wire width 1 \fx2_crossbar_fx2_0__slrd__o_clk
  wire width 1 \fx2_crossbar_fx2_0__slrd__o
  wire width 1 \fx2_crossbar_fx2_0__slwr__o_clk
  wire width 1 \fx2_crossbar_fx2_0__slwr__o
  wire width 1 \fx2_crossbar_fx2_0__pktend__o_clk
  wire width 1 \fx2_crossbar_fx2_0__pktend__o
  wire width 1 \fx2_crossbar_w_rdy
  wire width 8 \fx2_crossbar_w_data
  wire width 1 \fx2_crossbar_w_en
  wire width 8 \fx2_crossbar_r_data
  wire width 1 \fx2_crossbar_r_rdy
  wire width 1 \fx2_crossbar_r_en
  cell \top.fx2_crossbar \fx2_crossbar
    connect \rst \i2c_target_rst
    connect \clk \i2c_target_clk
    connect $signal \registers_$signal
    connect \fx2_0__flag__i_clk \fx2_crossbar_fx2_0__flag__i_clk
    connect \fx2_0__flag__i1 \fx2_crossbar_fx2_0__flag__i1
    connect \fx2_0__fifoadr__o_clk \fx2_crossbar_fx2_0__fifoadr__o_clk
    connect \fx2_0__fifoadr__o \fx2_crossbar_fx2_0__fifoadr__o
    connect \fx2_0__fd__o_clk \fx2_crossbar_fx2_0__fd__o_clk
    connect \fx2_0__fd__oe \fx2_crossbar_fx2_0__fd__oe
    connect \fx2_0__fd__o0 \fx2_crossbar_fx2_0__fd__o0
    connect \fx2_0__fd__o1 \fx2_crossbar_fx2_0__fd__o1
    connect \fx2_0__fd__i_clk \fx2_crossbar_fx2_0__fd__i_clk
    connect \fx2_0__fd__i1 \fx2_crossbar_fx2_0__fd__i1
    connect \fx2_0__sloe__o_clk \fx2_crossbar_fx2_0__sloe__o_clk
    connect \fx2_0__sloe__o \fx2_crossbar_fx2_0__sloe__o
    connect \fx2_0__slrd__o_clk \fx2_crossbar_fx2_0__slrd__o_clk
    connect \fx2_0__slrd__o \fx2_crossbar_fx2_0__slrd__o
    connect \fx2_0__slwr__o_clk \fx2_crossbar_fx2_0__slwr__o_clk
    connect \fx2_0__slwr__o \fx2_crossbar_fx2_0__slwr__o
    connect \fx2_0__pktend__o_clk \fx2_crossbar_fx2_0__pktend__o_clk
    connect \fx2_0__pktend__o \fx2_crossbar_fx2_0__pktend__o
    connect \w_rdy \fx2_crossbar_w_rdy
    connect \w_data \fx2_crossbar_w_data
    connect \w_en \fx2_crossbar_w_en
    connect \r_data \fx2_crossbar_r_data
    connect \r_rdy \fx2_crossbar_r_rdy
    connect \r_en \fx2_crossbar_r_en
  end
  wire width 1 \multiplexer_port_a_0__io__oe
  wire width 1 \multiplexer_port_a_0__io__o
  wire width 1 \multiplexer_port_a_0__io__i
  wire width 1 \multiplexer_port_a_0__oe__o
  wire width 1 \multiplexer_port_a_1__io__oe
  wire width 1 \multiplexer_port_a_1__io__o
  wire width 1 \multiplexer_port_a_1__io__i
  wire width 1 \multiplexer_port_a_1__oe__o
  wire width 1 \multiplexer_port_a_2__io__oe
  wire width 1 \multiplexer_port_a_2__io__o
  wire width 1 \multiplexer_port_a_2__io__i
  wire width 1 \multiplexer_port_a_2__oe__o
  wire width 1 \multiplexer_port_a_3__io__oe
  wire width 1 \multiplexer_port_a_3__io__o
  wire width 1 \multiplexer_port_a_3__io__i
  wire width 1 \multiplexer_port_a_3__oe__o
  wire width 1 \multiplexer_port_a_4__io__oe
  wire width 1 \multiplexer_port_a_4__io__o
  wire width 1 \multiplexer_port_a_4__io__i
  wire width 1 \multiplexer_port_a_4__oe__o
  wire width 1 \multiplexer_port_a_5__io__oe
  wire width 1 \multiplexer_port_a_5__io__o
  wire width 1 \multiplexer_port_a_5__io__i
  wire width 1 \multiplexer_port_a_5__oe__o
  wire width 1 \multiplexer_port_a_6__io__oe
  wire width 1 \multiplexer_port_a_6__io__o
  wire width 1 \multiplexer_port_a_6__io__i
  wire width 1 \multiplexer_port_a_6__oe__o
  wire width 1 \multiplexer_port_a_7__io__oe
  wire width 1 \multiplexer_port_a_7__io__o
  wire width 1 \multiplexer_port_a_7__io__i
  wire width 1 \multiplexer_port_a_7__oe__o
  wire width 1 \multiplexer_port_b_0__io__oe
  wire width 1 \multiplexer_port_b_0__io__o
  wire width 1 \multiplexer_port_b_0__io__i
  wire width 1 \multiplexer_port_b_0__oe__o
  wire width 1 \multiplexer_port_b_1__io__oe
  wire width 1 \multiplexer_port_b_1__io__o
  wire width 1 \multiplexer_port_b_1__io__i
  wire width 1 \multiplexer_port_b_1__oe__o
  wire width 1 \multiplexer_port_b_2__io__oe
  wire width 1 \multiplexer_port_b_2__io__o
  wire width 1 \multiplexer_port_b_2__io__i
  wire width 1 \multiplexer_port_b_2__oe__o
  wire width 1 \multiplexer_port_b_3__io__oe
  wire width 1 \multiplexer_port_b_3__io__o
  wire width 1 \multiplexer_port_b_3__io__i
  wire width 1 \multiplexer_port_b_3__oe__o
  wire width 1 \multiplexer_port_b_4__io__oe
  wire width 1 \multiplexer_port_b_4__io__o
  wire width 1 \multiplexer_port_b_4__io__i
  wire width 1 \multiplexer_port_b_4__oe__o
  wire width 1 \multiplexer_port_b_5__io__oe
  wire width 1 \multiplexer_port_b_5__io__o
  wire width 1 \multiplexer_port_b_5__io__i
  wire width 1 \multiplexer_port_b_5__oe__o
  wire width 1 \multiplexer_port_b_7__io__oe
  wire width 1 \multiplexer_port_b_7__io__o
  wire width 1 \multiplexer_port_b_7__io__i
  wire width 1 \multiplexer_port_b_7__oe__o
  wire width 1 \multiplexer_control_0__D19__o
  wire width 1 \multiplexer_control_0__D20__o
  wire width 1 \multiplexer_control_0__D22__o
  wire width 1 \multiplexer_control_0__D21__o
  wire width 1 \multiplexer_control_0__D24__o
  wire width 1 \multiplexer_control_0__D23__o
  wire width 1 \multiplexer_data_0__D1__oe
  wire width 1 \multiplexer_data_0__D1__o
  wire width 1 \multiplexer_data_0__D2__oe
  wire width 1 \multiplexer_data_0__D2__o
  wire width 1 \multiplexer_data_0__D3__oe
  wire width 1 \multiplexer_data_0__D3__o
  wire width 1 \multiplexer_data_0__D4__oe
  wire width 1 \multiplexer_data_0__D4__o
  wire width 1 \multiplexer_data_0__D5__oe
  wire width 1 \multiplexer_data_0__D5__o
  wire width 1 \multiplexer_data_0__D6__oe
  wire width 1 \multiplexer_data_0__D6__o
  wire width 1 \multiplexer_data_0__D7__oe
  wire width 1 \multiplexer_data_0__D7__o
  wire width 1 \multiplexer_data_0__D8__oe
  wire width 1 \multiplexer_data_0__D8__o
  wire width 1 \multiplexer_data_0__D9__oe
  wire width 1 \multiplexer_data_0__D9__o
  wire width 1 \multiplexer_data_0__D10__oe
  wire width 1 \multiplexer_data_0__D10__o
  wire width 1 \multiplexer_data_0__D11__oe
  wire width 1 \multiplexer_data_0__D11__o
  wire width 1 \multiplexer_data_0__D12__oe
  wire width 1 \multiplexer_data_0__D12__o
  wire width 1 \multiplexer_data_0__D13__oe
  wire width 1 \multiplexer_data_0__D13__o
  wire width 1 \multiplexer_data_0__D14__oe
  wire width 1 \multiplexer_data_0__D14__o
  cell \top.multiplexer \multiplexer
    connect \rst \i2c_target_rst
    connect \clk \i2c_target_clk
    connect $signal \registers_$signal
    connect $signal$1 \registers_$signal$1
    connect $signal$2 \registers_$signal$2
    connect $signal$3 \registers_$signal$3
    connect $signal$4 \registers_$signal$4
    connect $signal$5 \registers_$signal$5
    connect $signal$6 \registers_$signal$6
    connect $signal$7 \registers_$signal$7
    connect $signal$8 \registers_$signal$8
    connect $signal$9 \registers_$signal$9
    connect $signal$10 \registers_$signal$10
    connect $signal$11 \registers_$signal$11
    connect $signal$12 \registers_$signal$12
    connect $signal$13 \registers_$signal$13
    connect $signal$14 \registers_$signal$14
    connect $signal$15 \registers_$signal$15
    connect $signal$16 \registers_$signal$16
    connect \w_rdy \fx2_crossbar_w_rdy
    connect \w_data \fx2_crossbar_w_data
    connect \w_en \fx2_crossbar_w_en
    connect \r_data \fx2_crossbar_r_data
    connect \r_rdy \fx2_crossbar_r_rdy
    connect \r_en \fx2_crossbar_r_en
    connect \port_a_0__io__oe \multiplexer_port_a_0__io__oe
    connect \port_a_0__io__o \multiplexer_port_a_0__io__o
    connect \port_a_0__io__i \multiplexer_port_a_0__io__i
    connect \port_a_0__oe__o \multiplexer_port_a_0__oe__o
    connect \port_a_1__io__oe \multiplexer_port_a_1__io__oe
    connect \port_a_1__io__o \multiplexer_port_a_1__io__o
    connect \port_a_1__io__i \multiplexer_port_a_1__io__i
    connect \port_a_1__oe__o \multiplexer_port_a_1__oe__o
    connect \port_a_2__io__oe \multiplexer_port_a_2__io__oe
    connect \port_a_2__io__o \multiplexer_port_a_2__io__o
    connect \port_a_2__io__i \multiplexer_port_a_2__io__i
    connect \port_a_2__oe__o \multiplexer_port_a_2__oe__o
    connect \port_a_3__io__oe \multiplexer_port_a_3__io__oe
    connect \port_a_3__io__o \multiplexer_port_a_3__io__o
    connect \port_a_3__io__i \multiplexer_port_a_3__io__i
    connect \port_a_3__oe__o \multiplexer_port_a_3__oe__o
    connect \port_a_4__io__oe \multiplexer_port_a_4__io__oe
    connect \port_a_4__io__o \multiplexer_port_a_4__io__o
    connect \port_a_4__io__i \multiplexer_port_a_4__io__i
    connect \port_a_4__oe__o \multiplexer_port_a_4__oe__o
    connect \port_a_5__io__oe \multiplexer_port_a_5__io__oe
    connect \port_a_5__io__o \multiplexer_port_a_5__io__o
    connect \port_a_5__io__i \multiplexer_port_a_5__io__i
    connect \port_a_5__oe__o \multiplexer_port_a_5__oe__o
    connect \port_a_6__io__oe \multiplexer_port_a_6__io__oe
    connect \port_a_6__io__o \multiplexer_port_a_6__io__o
    connect \port_a_6__io__i \multiplexer_port_a_6__io__i
    connect \port_a_6__oe__o \multiplexer_port_a_6__oe__o
    connect \port_a_7__io__oe \multiplexer_port_a_7__io__oe
    connect \port_a_7__io__o \multiplexer_port_a_7__io__o
    connect \port_a_7__io__i \multiplexer_port_a_7__io__i
    connect \port_a_7__oe__o \multiplexer_port_a_7__oe__o
    connect \port_b_0__io__oe \multiplexer_port_b_0__io__oe
    connect \port_b_0__io__o \multiplexer_port_b_0__io__o
    connect \port_b_0__io__i \multiplexer_port_b_0__io__i
    connect \port_b_0__oe__o \multiplexer_port_b_0__oe__o
    connect \port_b_1__io__oe \multiplexer_port_b_1__io__oe
    connect \port_b_1__io__o \multiplexer_port_b_1__io__o
    connect \port_b_1__io__i \multiplexer_port_b_1__io__i
    connect \port_b_1__oe__o \multiplexer_port_b_1__oe__o
    connect \port_b_2__io__oe \multiplexer_port_b_2__io__oe
    connect \port_b_2__io__o \multiplexer_port_b_2__io__o
    connect \port_b_2__io__i \multiplexer_port_b_2__io__i
    connect \port_b_2__oe__o \multiplexer_port_b_2__oe__o
    connect \port_b_3__io__oe \multiplexer_port_b_3__io__oe
    connect \port_b_3__io__o \multiplexer_port_b_3__io__o
    connect \port_b_3__io__i \multiplexer_port_b_3__io__i
    connect \port_b_3__oe__o \multiplexer_port_b_3__oe__o
    connect \port_b_4__io__oe \multiplexer_port_b_4__io__oe
    connect \port_b_4__io__o \multiplexer_port_b_4__io__o
    connect \port_b_4__io__i \multiplexer_port_b_4__io__i
    connect \port_b_4__oe__o \multiplexer_port_b_4__oe__o
    connect \port_b_5__io__oe \multiplexer_port_b_5__io__oe
    connect \port_b_5__io__o \multiplexer_port_b_5__io__o
    connect \port_b_5__io__i \multiplexer_port_b_5__io__i
    connect \port_b_5__oe__o \multiplexer_port_b_5__oe__o
    connect \port_b_7__io__oe \multiplexer_port_b_7__io__oe
    connect \port_b_7__io__o \multiplexer_port_b_7__io__o
    connect \port_b_7__io__i \multiplexer_port_b_7__io__i
    connect \port_b_7__oe__o \multiplexer_port_b_7__oe__o
    connect \control_0__D19__o \multiplexer_control_0__D19__o
    connect \control_0__D20__o \multiplexer_control_0__D20__o
    connect \control_0__D22__o \multiplexer_control_0__D22__o
    connect \control_0__D21__o \multiplexer_control_0__D21__o
    connect \control_0__D24__o \multiplexer_control_0__D24__o
    connect \control_0__D23__o \multiplexer_control_0__D23__o
    connect \data_0__D1__oe \multiplexer_data_0__D1__oe
    connect \data_0__D1__o \multiplexer_data_0__D1__o
    connect \data_0__D2__oe \multiplexer_data_0__D2__oe
    connect \data_0__D2__o \multiplexer_data_0__D2__o
    connect \data_0__D3__oe \multiplexer_data_0__D3__oe
    connect \data_0__D3__o \multiplexer_data_0__D3__o
    connect \data_0__D4__oe \multiplexer_data_0__D4__oe
    connect \data_0__D4__o \multiplexer_data_0__D4__o
    connect \data_0__D5__oe \multiplexer_data_0__D5__oe
    connect \data_0__D5__o \multiplexer_data_0__D5__o
    connect \data_0__D6__oe \multiplexer_data_0__D6__oe
    connect \data_0__D6__o \multiplexer_data_0__D6__o
    connect \data_0__D7__oe \multiplexer_data_0__D7__oe
    connect \data_0__D7__o \multiplexer_data_0__D7__o
    connect \data_0__D8__oe \multiplexer_data_0__D8__oe
    connect \data_0__D8__o \multiplexer_data_0__D8__o
    connect \data_0__D9__oe \multiplexer_data_0__D9__oe
    connect \data_0__D9__o \multiplexer_data_0__D9__o
    connect \data_0__D10__oe \multiplexer_data_0__D10__oe
    connect \data_0__D10__o \multiplexer_data_0__D10__o
    connect \data_0__D11__oe \multiplexer_data_0__D11__oe
    connect \data_0__D11__o \multiplexer_data_0__D11__o
    connect \data_0__D12__oe \multiplexer_data_0__D12__oe
    connect \data_0__D12__o \multiplexer_data_0__D12__o
    connect \data_0__D13__oe \multiplexer_data_0__D13__oe
    connect \data_0__D13__o \multiplexer_data_0__D13__o
    connect \data_0__D14__oe \multiplexer_data_0__D14__oe
    connect \data_0__D14__o \multiplexer_data_0__D14__o
  end
  wire width 1 \cd_sync_clk_if_0__i
  cell \top.cd_sync \cd_sync
    connect \rst \i2c_target_rst
    connect \clk \i2c_target_clk
    connect \clk_if_0__i \cd_sync_clk_if_0__i
  end
  cell \top.pin_unused_0 \pin_unused_0
    connect \unused_0__io \unused_0__io
  end
  cell \top.pin_i2c_0__scl \pin_i2c_0__scl
    connect \i2c_0__scl__o \i2c_target_i2c_0__scl__o
    connect \i2c_0__scl__oe \i2c_target_i2c_0__scl__oe
    connect \i2c_0__scl__i \i2c_target_i2c_0__scl__i
    connect \i2c_0__scl__io \i2c_0__scl__io
  end
  cell \top.pin_i2c_0__sda \pin_i2c_0__sda
    connect \i2c_0__sda__o \i2c_target_i2c_0__sda__o
    connect \i2c_0__sda__oe \i2c_target_i2c_0__sda__oe
    connect \i2c_0__sda__i \i2c_target_i2c_0__sda__i
    connect \i2c_0__sda__io \i2c_0__sda__io
  end
  cell \top.pin_fx2_0__sloe \pin_fx2_0__sloe
    connect \fx2_0__sloe__o_clk \fx2_crossbar_fx2_0__sloe__o_clk
    connect \fx2_0__sloe__o \fx2_crossbar_fx2_0__sloe__o
    connect \fx2_0__sloe__io \fx2_0__sloe__io
  end
  cell \top.pin_fx2_0__slrd \pin_fx2_0__slrd
    connect \fx2_0__slrd__o_clk \fx2_crossbar_fx2_0__slrd__o_clk
    connect \fx2_0__slrd__o \fx2_crossbar_fx2_0__slrd__o
    connect \fx2_0__slrd__io \fx2_0__slrd__io
  end
  cell \top.pin_fx2_0__slwr \pin_fx2_0__slwr
    connect \fx2_0__slwr__o_clk \fx2_crossbar_fx2_0__slwr__o_clk
    connect \fx2_0__slwr__o \fx2_crossbar_fx2_0__slwr__o
    connect \fx2_0__slwr__io \fx2_0__slwr__io
  end
  cell \top.pin_fx2_0__pktend \pin_fx2_0__pktend
    connect \fx2_0__pktend__o_clk \fx2_crossbar_fx2_0__pktend__o_clk
    connect \fx2_0__pktend__o \fx2_crossbar_fx2_0__pktend__o
    connect \fx2_0__pktend__io \fx2_0__pktend__io
  end
  cell \top.pin_fx2_0__fifoadr \pin_fx2_0__fifoadr
    connect \fx2_0__fifoadr__o_clk \fx2_crossbar_fx2_0__fifoadr__o_clk
    connect \fx2_0__fifoadr__o \fx2_crossbar_fx2_0__fifoadr__o
    connect \fx2_0__fifoadr__io \fx2_0__fifoadr__io
  end
  cell \top.pin_fx2_0__flag \pin_fx2_0__flag
    connect \fx2_0__flag__i_clk \fx2_crossbar_fx2_0__flag__i_clk
    connect \fx2_0__flag__i1 \fx2_crossbar_fx2_0__flag__i1
    connect \fx2_0__flag__io \fx2_0__flag__io
  end
  cell \top.pin_fx2_0__fd \pin_fx2_0__fd
    connect \fx2_0__fd__o_clk \fx2_crossbar_fx2_0__fd__o_clk
    connect \fx2_0__fd__oe \fx2_crossbar_fx2_0__fd__oe
    connect \fx2_0__fd__o0 \fx2_crossbar_fx2_0__fd__o0
    connect \fx2_0__fd__o1 \fx2_crossbar_fx2_0__fd__o1
    connect \fx2_0__fd__i_clk \fx2_crossbar_fx2_0__fd__i_clk
    connect \fx2_0__fd__i1 \fx2_crossbar_fx2_0__fd__i1
    connect \fx2_0__fd__io \fx2_0__fd__io
  end
  cell \top.pin_port_a_0__io \pin_port_a_0__io
    connect \port_a_0__io__oe \multiplexer_port_a_0__io__oe
    connect \port_a_0__io__o \multiplexer_port_a_0__io__o
    connect \port_a_0__io__i \multiplexer_port_a_0__io__i
    connect \port_a_0__io__io \port_a_0__io__io
  end
  cell \top.pin_port_a_0__oe \pin_port_a_0__oe
    connect \port_a_0__oe__o \multiplexer_port_a_0__oe__o
    connect \port_a_0__oe__io \port_a_0__oe__io
  end
  cell \top.pin_port_a_1__io \pin_port_a_1__io
    connect \port_a_1__io__oe \multiplexer_port_a_1__io__oe
    connect \port_a_1__io__o \multiplexer_port_a_1__io__o
    connect \port_a_1__io__i \multiplexer_port_a_1__io__i
    connect \port_a_1__io__io \port_a_1__io__io
  end
  cell \top.pin_port_a_1__oe \pin_port_a_1__oe
    connect \port_a_1__oe__o \multiplexer_port_a_1__oe__o
    connect \port_a_1__oe__io \port_a_1__oe__io
  end
  cell \top.pin_port_a_2__io \pin_port_a_2__io
    connect \port_a_2__io__oe \multiplexer_port_a_2__io__oe
    connect \port_a_2__io__o \multiplexer_port_a_2__io__o
    connect \port_a_2__io__i \multiplexer_port_a_2__io__i
    connect \port_a_2__io__io \port_a_2__io__io
  end
  cell \top.pin_port_a_2__oe \pin_port_a_2__oe
    connect \port_a_2__oe__o \multiplexer_port_a_2__oe__o
    connect \port_a_2__oe__io \port_a_2__oe__io
  end
  cell \top.pin_port_a_3__io \pin_port_a_3__io
    connect \port_a_3__io__oe \multiplexer_port_a_3__io__oe
    connect \port_a_3__io__o \multiplexer_port_a_3__io__o
    connect \port_a_3__io__i \multiplexer_port_a_3__io__i
    connect \port_a_3__io__io \port_a_3__io__io
  end
  cell \top.pin_port_a_3__oe \pin_port_a_3__oe
    connect \port_a_3__oe__o \multiplexer_port_a_3__oe__o
    connect \port_a_3__oe__io \port_a_3__oe__io
  end
  cell \top.pin_port_a_4__io \pin_port_a_4__io
    connect \port_a_4__io__oe \multiplexer_port_a_4__io__oe
    connect \port_a_4__io__o \multiplexer_port_a_4__io__o
    connect \port_a_4__io__i \multiplexer_port_a_4__io__i
    connect \port_a_4__io__io \port_a_4__io__io
  end
  cell \top.pin_port_a_4__oe \pin_port_a_4__oe
    connect \port_a_4__oe__o \multiplexer_port_a_4__oe__o
    connect \port_a_4__oe__io \port_a_4__oe__io
  end
  cell \top.pin_port_a_5__io \pin_port_a_5__io
    connect \port_a_5__io__oe \multiplexer_port_a_5__io__oe
    connect \port_a_5__io__o \multiplexer_port_a_5__io__o
    connect \port_a_5__io__i \multiplexer_port_a_5__io__i
    connect \port_a_5__io__io \port_a_5__io__io
  end
  cell \top.pin_port_a_5__oe \pin_port_a_5__oe
    connect \port_a_5__oe__o \multiplexer_port_a_5__oe__o
    connect \port_a_5__oe__io \port_a_5__oe__io
  end
  cell \top.pin_port_a_6__io \pin_port_a_6__io
    connect \port_a_6__io__oe \multiplexer_port_a_6__io__oe
    connect \port_a_6__io__o \multiplexer_port_a_6__io__o
    connect \port_a_6__io__i \multiplexer_port_a_6__io__i
    connect \port_a_6__io__io \port_a_6__io__io
  end
  cell \top.pin_port_a_6__oe \pin_port_a_6__oe
    connect \port_a_6__oe__o \multiplexer_port_a_6__oe__o
    connect \port_a_6__oe__io \port_a_6__oe__io
  end
  cell \top.pin_port_a_7__io \pin_port_a_7__io
    connect \port_a_7__io__oe \multiplexer_port_a_7__io__oe
    connect \port_a_7__io__o \multiplexer_port_a_7__io__o
    connect \port_a_7__io__i \multiplexer_port_a_7__io__i
    connect \port_a_7__io__io \port_a_7__io__io
  end
  cell \top.pin_port_a_7__oe \pin_port_a_7__oe
    connect \port_a_7__oe__o \multiplexer_port_a_7__oe__o
    connect \port_a_7__oe__io \port_a_7__oe__io
  end
  cell \top.pin_port_b_0__io \pin_port_b_0__io
    connect \port_b_0__io__oe \multiplexer_port_b_0__io__oe
    connect \port_b_0__io__o \multiplexer_port_b_0__io__o
    connect \port_b_0__io__i \multiplexer_port_b_0__io__i
    connect \port_b_0__io__io \port_b_0__io__io
  end
  cell \top.pin_port_b_0__oe \pin_port_b_0__oe
    connect \port_b_0__oe__o \multiplexer_port_b_0__oe__o
    connect \port_b_0__oe__io \port_b_0__oe__io
  end
  cell \top.pin_port_b_1__io \pin_port_b_1__io
    connect \port_b_1__io__oe \multiplexer_port_b_1__io__oe
    connect \port_b_1__io__o \multiplexer_port_b_1__io__o
    connect \port_b_1__io__i \multiplexer_port_b_1__io__i
    connect \port_b_1__io__io \port_b_1__io__io
  end
  cell \top.pin_port_b_1__oe \pin_port_b_1__oe
    connect \port_b_1__oe__o \multiplexer_port_b_1__oe__o
    connect \port_b_1__oe__io \port_b_1__oe__io
  end
  cell \top.pin_port_b_2__io \pin_port_b_2__io
    connect \port_b_2__io__oe \multiplexer_port_b_2__io__oe
    connect \port_b_2__io__o \multiplexer_port_b_2__io__o
    connect \port_b_2__io__i \multiplexer_port_b_2__io__i
    connect \port_b_2__io__io \port_b_2__io__io
  end
  cell \top.pin_port_b_2__oe \pin_port_b_2__oe
    connect \port_b_2__oe__o \multiplexer_port_b_2__oe__o
    connect \port_b_2__oe__io \port_b_2__oe__io
  end
  cell \top.pin_port_b_3__io \pin_port_b_3__io
    connect \port_b_3__io__oe \multiplexer_port_b_3__io__oe
    connect \port_b_3__io__o \multiplexer_port_b_3__io__o
    connect \port_b_3__io__i \multiplexer_port_b_3__io__i
    connect \port_b_3__io__io \port_b_3__io__io
  end
  cell \top.pin_port_b_3__oe \pin_port_b_3__oe
    connect \port_b_3__oe__o \multiplexer_port_b_3__oe__o
    connect \port_b_3__oe__io \port_b_3__oe__io
  end
  cell \top.pin_port_b_4__io \pin_port_b_4__io
    connect \port_b_4__io__oe \multiplexer_port_b_4__io__oe
    connect \port_b_4__io__o \multiplexer_port_b_4__io__o
    connect \port_b_4__io__i \multiplexer_port_b_4__io__i
    connect \port_b_4__io__io \port_b_4__io__io
  end
  cell \top.pin_port_b_4__oe \pin_port_b_4__oe
    connect \port_b_4__oe__o \multiplexer_port_b_4__oe__o
    connect \port_b_4__oe__io \port_b_4__oe__io
  end
  cell \top.pin_port_b_5__io \pin_port_b_5__io
    connect \port_b_5__io__oe \multiplexer_port_b_5__io__oe
    connect \port_b_5__io__o \multiplexer_port_b_5__io__o
    connect \port_b_5__io__i \multiplexer_port_b_5__io__i
    connect \port_b_5__io__io \port_b_5__io__io
  end
  cell \top.pin_port_b_5__oe \pin_port_b_5__oe
    connect \port_b_5__oe__o \multiplexer_port_b_5__oe__o
    connect \port_b_5__oe__io \port_b_5__oe__io
  end
  cell \top.pin_port_b_7__io \pin_port_b_7__io
    connect \port_b_7__io__oe \multiplexer_port_b_7__io__oe
    connect \port_b_7__io__o \multiplexer_port_b_7__io__o
    connect \port_b_7__io__i \multiplexer_port_b_7__io__i
    connect \port_b_7__io__io \port_b_7__io__io
  end
  cell \top.pin_port_b_7__oe \pin_port_b_7__oe
    connect \port_b_7__oe__o \multiplexer_port_b_7__oe__o
    connect \port_b_7__oe__io \port_b_7__oe__io
  end
  cell \top.pin_port_b_6__io \pin_port_b_6__io
    connect \port_b_6__io__io \port_b_6__io__io
  end
  wire width 1 \pin_port_b_6__oe_port_b_6__oe__o
  cell \top.pin_port_b_6__oe \pin_port_b_6__oe
    connect \port_b_6__oe__o \pin_port_b_6__oe_port_b_6__oe__o
    connect \port_b_6__oe__io \port_b_6__oe__io
  end
  cell \top.pin_control_0__D17 \pin_control_0__D17
    connect \control_0__D17__io \control_0__D17__io
  end
  cell \top.pin_control_0__D18 \pin_control_0__D18
    connect \control_0__D18__io \control_0__D18__io
  end
  cell \top.pin_control_0__D19 \pin_control_0__D19
    connect \control_0__D19__o \multiplexer_control_0__D19__o
    connect \control_0__D19__io \control_0__D19__io
  end
  cell \top.pin_control_0__D20 \pin_control_0__D20
    connect \control_0__D20__o \multiplexer_control_0__D20__o
    connect \control_0__D20__io \control_0__D20__io
  end
  cell \top.pin_control_0__D21 \pin_control_0__D21
    connect \control_0__D21__o \multiplexer_control_0__D21__o
    connect \control_0__D21__io \control_0__D21__io
  end
  cell \top.pin_control_0__D22 \pin_control_0__D22
    connect \control_0__D22__o \multiplexer_control_0__D22__o
    connect \control_0__D22__io \control_0__D22__io
  end
  cell \top.pin_control_0__D23 \pin_control_0__D23
    connect \control_0__D23__o \multiplexer_control_0__D23__o
    connect \control_0__D23__io \control_0__D23__io
  end
  cell \top.pin_control_0__D24 \pin_control_0__D24
    connect \control_0__D24__o \multiplexer_control_0__D24__o
    connect \control_0__D24__io \control_0__D24__io
  end
  cell \top.pin_power_ok_0 \pin_power_ok_0
    connect \power_ok_0__io \power_ok_0__io
  end
  cell \top.pin_data_0__D1 \pin_data_0__D1
    connect \data_0__D1__oe \multiplexer_data_0__D1__oe
    connect \data_0__D1__o \multiplexer_data_0__D1__o
    connect \data_0__D1__io \data_0__D1__io
  end
  cell \top.pin_data_0__D2 \pin_data_0__D2
    connect \data_0__D2__oe \multiplexer_data_0__D2__oe
    connect \data_0__D2__o \multiplexer_data_0__D2__o
    connect \data_0__D2__io \data_0__D2__io
  end
  cell \top.pin_data_0__D3 \pin_data_0__D3
    connect \data_0__D3__oe \multiplexer_data_0__D3__oe
    connect \data_0__D3__o \multiplexer_data_0__D3__o
    connect \data_0__D3__io \data_0__D3__io
  end
  cell \top.pin_data_0__D4 \pin_data_0__D4
    connect \data_0__D4__oe \multiplexer_data_0__D4__oe
    connect \data_0__D4__o \multiplexer_data_0__D4__o
    connect \data_0__D4__io \data_0__D4__io
  end
  cell \top.pin_data_0__D5 \pin_data_0__D5
    connect \data_0__D5__oe \multiplexer_data_0__D5__oe
    connect \data_0__D5__o \multiplexer_data_0__D5__o
    connect \data_0__D5__io \data_0__D5__io
  end
  cell \top.pin_data_0__D6 \pin_data_0__D6
    connect \data_0__D6__oe \multiplexer_data_0__D6__oe
    connect \data_0__D6__o \multiplexer_data_0__D6__o
    connect \data_0__D6__io \data_0__D6__io
  end
  cell \top.pin_data_0__D7 \pin_data_0__D7
    connect \data_0__D7__oe \multiplexer_data_0__D7__oe
    connect \data_0__D7__o \multiplexer_data_0__D7__o
    connect \data_0__D7__io \data_0__D7__io
  end
  cell \top.pin_data_0__D8 \pin_data_0__D8
    connect \data_0__D8__oe \multiplexer_data_0__D8__oe
    connect \data_0__D8__o \multiplexer_data_0__D8__o
    connect \data_0__D8__io \data_0__D8__io
  end
  cell \top.pin_data_0__D9 \pin_data_0__D9
    connect \data_0__D9__oe \multiplexer_data_0__D9__oe
    connect \data_0__D9__o \multiplexer_data_0__D9__o
    connect \data_0__D9__io \data_0__D9__io
  end
  cell \top.pin_data_0__D10 \pin_data_0__D10
    connect \data_0__D10__oe \multiplexer_data_0__D10__oe
    connect \data_0__D10__o \multiplexer_data_0__D10__o
    connect \data_0__D10__io \data_0__D10__io
  end
  cell \top.pin_data_0__D11 \pin_data_0__D11
    connect \data_0__D11__oe \multiplexer_data_0__D11__oe
    connect \data_0__D11__o \multiplexer_data_0__D11__o
    connect \data_0__D11__io \data_0__D11__io
  end
  cell \top.pin_data_0__D12 \pin_data_0__D12
    connect \data_0__D12__oe \multiplexer_data_0__D12__oe
    connect \data_0__D12__o \multiplexer_data_0__D12__o
    connect \data_0__D12__io \data_0__D12__io
  end
  cell \top.pin_data_0__D13 \pin_data_0__D13
    connect \data_0__D13__oe \multiplexer_data_0__D13__oe
    connect \data_0__D13__o \multiplexer_data_0__D13__o
    connect \data_0__D13__io \data_0__D13__io
  end
  cell \top.pin_data_0__D14 \pin_data_0__D14
    connect \data_0__D14__oe \multiplexer_data_0__D14__oe
    connect \data_0__D14__o \multiplexer_data_0__D14__o
    connect \data_0__D14__io \data_0__D14__io
  end
  cell \top.pin_clk_if_0 \pin_clk_if_0
    connect \clk_if_0__i \cd_sync_clk_if_0__i
    connect \clk_if_0__io \clk_if_0__io
  end
  process $group_0
    assign \i2c_target_address 7'0000000
    assign \i2c_target_address 7'0001000
  end
  process $group_1
    assign \pin_port_b_6__oe_port_b_6__oe__o 1'0
    assign \pin_port_b_6__oe_port_b_6__oe__o 1'0
  end
end
